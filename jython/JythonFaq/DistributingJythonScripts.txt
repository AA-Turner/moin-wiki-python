#acl MoinPagesEditorGroup:read,write,delete,revert All:read
= Distributing Jython Scripts =

return to JythonFaq

----

== How can do others use scripts/applications I've developed? ==

Initial creation date: Aug 2007 using Jython 2.2rc3

'''NOTE:''' This contains advanced concepts that require knowledge of Java development. Specifically, if you do not know what a classpath is, the difference between a class and a .class file and how they are created or don't know what a jar file contains or what it really is, then I would suggest learning these '''Java''' concepts and once you understand them. Come back and continue on. Here are a couple of links that may help you:  [http://java.sun.com/docs/books/tutorial/java/TOC.html Java Tutorial] and [http://java.sun.com/docs/books/tutorial/getStarted/intro/index.html About Java Technology] but I would not stop with these two links. Use your favorite search engine and search for the terms above. LearningJython is also good reading.

----
There are several ways to accomplish this, but the following text will only cover distributing code you've written so others with out a Jython installation can use them without having to use jythonc. If someone wants to cover deployment to a web app server or embedded deployment, please do! These are beyond the scope of this text and more importantly my personal knowledge.

There are really two main ways to accomplish distributing your code and, like most things Jython, they are pretty easy.

'''Requirements'''

For your script to run on another PC there isn't much in the way of requirements really only two that I can think of.
 * You need a reasonably current JVM installed on the target machine, I've used every thing from Java 1.4.2 through Java 1.6.
 * You need the standalone Jython Jar. 
What I did is install Jython twice. Once as a regular installation (not standalone) and then once as standalone. Then I renamed the standalone Jython jar file to jythonStandalone.jar, moved it into my original Jython2.2 directory, and deleted the other one.
[[BR]]__''Note:''__ ''you don't have to call it 'jythonStandalone' it is simply the name I chose you can use any name you like as long as it ends in .jar.


'''Using the Class Path.'''

Just set up the classpath with all the jars needed and pass that to java with the "-cp" command-line option.  That's a pretty standard thing for command line Java tools to do and isn't specific to Jython.  If you're going to do that, you can't use -jar though.  Just add the Jython jar to the things you've added to the classpath and give Jython's main class, org.python.util.jython, explicitly. Optionally you can add a script as a parameter which would run as usual. This does not use jythonc in any way.

So this boils down to:
 * having your scripts (*.py) outside the standalone jython.jar
 * having all the .jars you need on the classpath (including standalone jython.jar)
 * starting java with the appropriate -cp (-classpath) option and package name.

for example:
 *(Linux / Unix) java -cp /path/to/jython2.2/jython.jar:$CLASSPATH org.python.util.jython [file.py]
 *(windows) java -cp "c:\jython2.2\jython.jar;%CLASSPATH%" org.python.util.jython [file.py]


'''Using the Jar Method'''

This is my favorite method of distribution. It's less hassle for you, the developer, with fewer files to keep track of and easier for your end users to use. This also does not use jythonc in any way.

If you are not using any 3rd party jar files, the very simplest way is to add them to the standalone jython.jar, in the /Lib folder.

If you ARE using 3rd party jars, such as dom4j or maybe Apache Commons jars, what worked very well for me is to explode the jar files, delete the meta_inf directory since you won't need it, and copy the the org or com directory into the standalone Jython jar file into the root directory. If you do that, you don't have to mess with python.path and the like. Imports should just work. For example, the dom4j directory extracts into a directory structure that starts org/dom4j/*. The entire org directory structure should be copied into the standalone Jython jar file into the root directory so that the jar now contains /org/python and /org/dom4j. 

So this boils down to:
 * having your scripts (*.py) inside standalone jython.jar in the /lib directory
 * having all the classes (*.class) in the /org or /com directory
 * having all the .jars you need on the classpath (including standalone jython.jar)
 * start java with the -jar option.

for example:
java -jar jython.jar {optional .py file}

you can manipulate .jar files with tools like:
 * (on Linux) midnight commander
 * (on Windows) servant salamander or total commander
    * total commander: http://www.ghisler.com/index.htm
    * servant salamander: http://www.altap.cz/download.html#sal25

Obviously, the tools listed are just examples, __not endorsements(!)__. You should use what ever works best for you. I've tried using winzip but had difficulty with it. Maybe ant would be another way to do this. If someone wants to post an ant script, that would be wonderful because I'm hardly an ant expert.

For additional info I would strongly suggest you review Oti's notes at http://jython.extreme.st/talk/talk.html
(search for Script Deployment).

For me personally I found the jar method worked best for me. I had the supporting jars and scripts in the standalone Jython jar and then the primary script separately. So I had 2 files that I distributed: one .jar and one .py. Because the support files were pretty stable and didn't change this allowed me to easily improve and fix bugs in the main .py file.

I could have only distributed a single jar file by renaming my main .py file to `__run__.py` and putting it into the /lib directory of the jar file. Then the command simply becomes java -jar jython.jar (or whatever I want to call the jar file).

Ok maybe one mention of webstart:
check out these postings to the mailing list (all from aug 2007):
 * http://article.gmane.org/gmane.comp.lang.jython.user/5821
 * http://article.gmane.org/gmane.comp.lang.jython.user/5820
 * and David Huebel recommends http://seanmcgrath.blogspot.com/JythonWebAppTutorial.html the first part looks pretty good.

Finally, as in all things [http://en.wiktionary.org/wiki/your_mileage_may_vary YMMV]. If you have different experences or just think I'm crazy then don't just sit there and complain, contribute to the wiki!

I'd like to thank Oti H., Charlie G., Frank W., and all the others that have helped along the way.

If you have questions about the FAQ please post them on the jython-users mailing list at http://sourceforge.net/mail/?group_id=12867

GregMoore

----

Return to JythonFaq
