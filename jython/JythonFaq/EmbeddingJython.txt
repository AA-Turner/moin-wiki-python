= Embedding Jython =


JythonFaq

<<TableOfContents>>

----
== How can I use jython classes from my java application? ==

There are several ways to do that. The best way depends on the needs of your application. 

=== Using PythonInterpreter in Factories to instantiate python classes ===

 * [[http://wiki.python.org/jython/JythonMonthly/Articles/October2006/3|Simple and Efficient Jython Object Factories]] from CharlieGroves
 * [[http://www.jython.org/jythonbook/en/1.0/JythonAndJavaIntegration.html#using-jython-within-java-applications|Object Factories]] from Jython Book v1.0

=== Using jythonc (deprecated) ===

Compile the python class into a real java class using the jythonc command. This real java can be used and instances can be created from your application.  

'''Note: It is no longer recommended that jythonc be used, see ReplaceJythonc'''

Create a python module (say Foo.py) and make a class with the same name as the python module. The class must inherit from a java class or interface. If you don't need a particular java superclass, just use java.lang.Object.

{{{#!java
  import java
  class Foo(java.util.Date):
      def toString(self):
          return "Foo[" + java.util.Date.toString(self) + "]"
}}}

The python class can overwrite all existing methods on the java superclass or interface and these overridden methods can be called from the java application. New methods can by default not be accessed from java. If we add a "bar" method, the method can be used from python, but not from java.

{{{#!python
  import java
  class Foo(java.util.Date):
      def __init__(self):
          self.count = 0
      def bar(self, incr=1):
          self.count += incr
          return self.count
      def toString(self):
          cnt = self.bar()
          return "Foo[" + java.util.Date.toString(self) + " " + `cnt` + "]"
}}}

The jythonc compiler can also create java methods for the python methods, but it need some additional help. This help is specified as a @sig line in the doc-string for the method. A doc-string is added to the example above.

{{{#!python
  import java
  class Foo(java.util.Date):
      def __init__(self):
          self.count = 0
      def bar(self, incr=1):
          """@sig void bar(int incr)"""
          self.count += incr
          return self.count
      def toString(self):
          cnt = self.bar()
          return "Foo[" + java.util.Date.toString(self) + " " + `cnt` + "]"
}}}

When this class is compiled with jythonc, A java class Foo.java and Foo.class is created with the java methods toString(), bar() and bar(int incr).

When compiling the Foo.py class, make sure that the Foo actually extends the desired java class. You can check the output from the compilation. It should contain lines like:

{{{
  Required packages:
    java.util

  Creating adapters:

  Creating .java files:
    Foo module
      Foo extends java.util.Date
}}}

If jython fails to recognize the superclass as a java class, it will silently assume that it is a python class and will not generate the desired java methods.

The new Foo class can be used from java java class like this:

{{{#!java
   public class FooTest {
       public static void main(String[] args) {
           Foo foo = new Foo();
           System.out.println(foo);
           foo.bar();
           foo.bar(43);
           System.out.println(foo);
       }
   }
}}}

When compiling the FooTest.java class, the "jpywork" directory should be appended to your classpath.

When running this little application, the jython.jar runtime must be available on the CLASSPATH or specified on the java command line.

----

== My modules can not be found when imported from an embedded application ==

The default value for sys.path in an embedded application depend on several things:

 1. A python.path property, if found in the registry file or in the $HOME/.jython file will be used.
 1. The <python.home>/Lib directory is added.

An application can override the python.path property by calling PythonInterpreter.initialize(..) before any other python code is called:

{{{#!java
    Properties props = new Properties();
    props.setProperty("python.path", "/home/modules:scripts");
    PythonInterpreter.initialize(System.getProperties(), props,
                                 new String[] {""});
}}}

The value for python.path must follow the operating system conventions for the PATH environment var (':' separator for unix, ';' for windows)

----

== Library types and functions can't be found by my embedded application ==

When you run the jython installer, one of the choices is to install as a callable JAR.  Use that selection to create a standalone JAR which can be used to embed.  The jython.jar in the standard install isn't complete to be used as a standalone JAR (despite the fact that they have the same name).
