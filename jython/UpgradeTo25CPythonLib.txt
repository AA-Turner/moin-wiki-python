#format rst

To Fix
======

* test_builtin

  * test_input_and_raw_input - del sys.stdin does nothing
  * test_cmp - Jython can compare objects with cycles in them, at least for this test. 
  * test_general_eval - Jython can use arbitrary maps for globals; this was discussed for CPython. Not in current 2.6, perhaps because it touched a lot of code or issues with performance (see http://bugs.python.org/issue1402289)
  * test_execfile - on the other hand, Jython does not even validate that the locals or globals are in fact mapping objects

* test_doctest - test_doctest2.txt, which is run by test_DocFileSuite, has some random Unicode characters, but no encoding declared (looks utf8). Does this rely on an implicit utf8 encoding?
* test_generators

  * parser probs where we don't reject bad syntax
  * ill-behaved generator doesn't finalize upon GC
  * closure setup in visitLambda and visitGeneratorExp does not interact properly with a yield point, resulting in bad bytecode

* test_inspect

  * test_excluding_predicates - sys.exit, etc., are not really attributes of a module
  * test_wrapped_decorator - see below in the Parser section

* test_site - del sys.setdefaultencoding does nothing
* test_struct - needs new 2.5 struct.Struct type and pack_into/unpack_from
* test_unicode - no idna encoding (which needs unicodedata); raises wrong error for decode to int of unicode string
* test_univnewlines - test_doctest failures don't restore sys.stdin -- causes to skip (it normally passes)
* test_with - 1 failure, testNestedSingleStatements (__main__.ExceptionalTestCase), this is a tricky one

Flaky/arch?
===========

* test_cpickle
* test_socket - historically this is the case on SO_RCVBUF, SO_SNDBUF
* test_scope
* test_tuple - sometimes OutOfMemoryErrors during regrtest (when creating a set from a large list of small tuples). maybe not the tests fault, but the fact that the regrtest progressively uses more and more memory as it goes: http://pylonshq.com/pasties/917

Parser
======

* test_compiler - one line functions are not working compiler.parse (causing AttributeError: 'NoneType' object has no attribute 'suite')
* test_doctest - in test_pdb_set_trace, removing  # doctest: +NORMALIZE_WHITESPACE allows it to parse
* test_decorators - compile(..., "eval") not working for test_dbcheck
* test_doctest - in addition to the unicode problem, there is a parsing problem with newlines + comment -- the following fails: (try: pass<newline>except: pass<newlne>#comment)
* test_syntax - lots of work needed to make exceptions look more like CPython
* test_inspect.test_wrapped_decorator, the line number needs to be set for the wrapped function at the def, not at the decorators stacked above. right now node.getLine()  in CodeCompiler#visitFunctionDef must be reporting where the function def starts in the AST (which includes of course the decorators)


Development
===========

* test__rawffi (for ctypes, ported from PyPy)
* test_multibytecodec (implies test_multibytecodec_support)
* test_unicodedata - need to implement unicodedata!
