'''Contents''' [[TableOfContents]]

= Jython 2.2 =

== regrtest Failures ==

 * descr
 * new
 * weakref
 * zlib
 * windows only failures

= Jython 2.3 =

== Builtins == 

yield is always a keyword.

enumerate() built-in added.

int() will now return a long instead of raising OverflowError if a number
is too large.

built-in types support extending slicing syntax.

list.insert() changed to be consistent with negative slice indexing.

list.index() takes optional start, stop arguments.

Dictionaries gained a pop() method and .fromkeys() class method.

dict() constructor takes keyword arguments.

assert no longer checks __debug__ flag.

Many type objects are now callable.

== PEPs == 

PEP 218: A Standard Set Datatype

PEP 263: Defining Python Source Code Encodings

PEP 273: Importing Modules from Zip Archives

PEP 278: Universal Newline Support

PEP 285: A Boolean Type

PEP 305: Pickle Enhancements

== Replace jythonc ==

jythonc doesn't handle generators and is difficult to debug and improve.  The current thinking is to add capabilites to jython itself to generate bytecode from py files and run those statically compiled items rather than jythonc's approach of making Java classes that work like the base Python code.  See http://thread.gmane.org/gmane.comp.lang.jython.devel/1429/focus=1430 for the general idea. 

== Solidify Import System ==

Jython adds to Python's import system to handle loading from Java's classpath and to load from jar files.  It's not exactly clear what modifications are in place and what techniques are best for adding jar files to the path at runtime and things like that.  A JEP explaining what's been added and how things relate to both the Python and Jython sides would be nice.  

== Complete Java to Python naming integration ==

Java allows a method and field of the same name to exist in the same class.  Python only has a single namespace for these items.  This leads to methods being hidden in a Java instance in Jython if the instance has a field of the same name.  In addition, the bean convenience methods that map object.getField() in Java to  object.field in Jython lead to collisions.  A standard system for renaming fields and methods to avoid collisions and a JEP explaining the whole thing would be most welcome.

= Jython 2.4 =

Built-in set, frozenset

Unifying int/long

Generator expressions

Function/method decorators

Multi-line imports

= Jython 2.5 =

Conditional expressions

'with' statement

Absolute & relative imports

Unified try/except/finally

New generator features

Exceptions as new-style classes

The __index__ method
