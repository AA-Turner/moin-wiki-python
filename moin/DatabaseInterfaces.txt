[[TableOfContents]]

= See also =
 * ChoosingDatabase
 * DbApiModuleComparison
 * HigherLevelDatabaseProgramming
 * http://www.python.org/topics/database/modules.html
 * [http://dmoz.org/Computers/Programming/Languages/Python/Modules/Databases_and_Persistence/ Category in the Open Directory Project]

= Relational database =
Databases based on a relational model, with support for SQL.

== MySQL ==
 * MySQLdb
   * [http://sourceforge.net/projects/mysql-python SourceForge Project]: Download, report bugs, forums
   * [http://dev.mysql.com/downloads/python.html MySQL AB]: MySQL on-line documentation, additional forums (maintainer does not currently read these)

== PostgreSQL ==
 * psycopg
  * psycopg1: http://initd.org/projects/psycopg1
  * psycopg2: http://initd.org/projects/psycopg2
 * pyPgSQL: http://pypgsql.sourceforge.net/
 * PyGreSQL: http://www.pygresql.org/
 * PoPy: http://sourceforge.net/projects/popy
  * PoPy and PyGreSQL are [http://www.zope.org/Members/tm/Full_Announce merging]
 * PostgresPy: http://python.projects.postgresql.org/
 * pgasync: http://jamwt.com/pgasync/
  * Asynchronous and pure Python. Speed comparable to C bindings. Special support for Twisted.
 * bpgsql: http://barryp.org/software/bpgsql/
  * Barebones pure-Python PostgreSQL client
 * ["sipPQ"]
 * mxODBC: http://www.egenix.com/files/python/mxODBC.html

 Supports the PostgreSQL ODBC driver on both Windows and Unix. Note that you have to enable the advanced option "Use bytea for lo" in case you want to work with BLOBs.

== SQLite ==
 * pysqlite: http://pysqlite.org/
  * Have versions for both SQLite 2 and 3.
 * APSW: http://www.rogerbinns.com/apsw.html
  * SQLite 3 only.
  * Not DB-API compliant. Focus on wrapping all SQLite APIs.

== Oracle ==
 * cx_Oracle: http://www.python.net/crew/atuining/cx_Oracle/
 * DCOracle: http://www.zope.org/Products/DCOracle/
  * This is for old Oracle versions (7 and 8).
 * DCOracle2: http://www.zope.org/Members/matt/dco2
  * For Oracle 8i and up.
 * mxODBC: http://www.egenix.com/files/python/mxODBC.html

 Supports the ''Oracle Instant Client'' which is available for Windows and many popular Unix platforms.

== MS SQL Server ==
 * mssql: http://www.object-craft.com.au/projects/mssql/
 * pymssql: http://pymssql.sourceforge.net/
 * mxODBC: http://www.egenix.com/files/python/mxODBC.html

 Supports the MS SQL Server ODBC driver on Windows and the Actual Technologies ODBC driver for MS SQL Server on Mac OS X

== MS Access ==
 * mxODBC: http://www.egenix.com/files/python/mxODBC.html

== MS Desktop Engine ==
 * mxODBC: http://www.egenix.com/files/python/mxODBC.html

== IBM DB2 ==
 * PyDB2: http://sourceforge.net/projects/pydb2
 * mxODBC: http://www.egenix.com/files/python/mxODBC.html

 DB2's native CLI is ODBC compatible and mxODBC can link directly against these libraries. It also supports the DB2 ODBC driver on Windows.

== Firebird/InterBase ==
 * KInterbasDB: http://kinterbasdb.sourceforge.net/

== Sybase ==
 * sybase: http://www.object-craft.com.au/projects/sybase/
 * mxODBC: http://www.egenix.com/files/python/mxODBC.html

 Supports Sybase ASE and Sybase Anywhere.

== MaxDB/SAPDB ==
 * sapdb: http://dev.mysql.com/doc/maxdb/interfaces.html
 * mxODBC: http://www.egenix.com/files/python/mxODBC.html

 MaxDB/SAPDB's native CLI is ODBC compatible and mxODBC can link directly against the CLI libs on Unix. It also supports the ODBC driver on Windows.

== Informix ==
 * InformixDB: http://informixdb.sourceforge.net/
 * mxODBC: http://www.egenix.com/files/python/mxODBC.html

 Note: The Informix ODBC drivers are included in the Informix CSDK.

== Ingres ==
 * ingresdbi: http://www.ingres.com/products/Prod_Download_Drivers.html

== ThinkSQL ==
 * http://www.thinksql.com/

== ODBC ==
 * pyodbc: http://pyodbc.sourceforge.net/
 * mxODBC: http://www.egenix.com/files/python/mxODBC.html

 Provides ODBC connectivity on Windows, Mac OS X, FreeBSD and most other Unix platforms.

 * ODBTPAPI: http://benjiyork.com/odbtp.html

== ADO ==
 * adodbapi: http://adodbapi.sourceforge.net/

= Native Python Databases =

== Gadfly ==
Gadfly is a simple relational database system implemented in Python based on the SQL Structured Query Language.

http://gadfly.sourceforge.net/

== SnakeSQL ==
SnakeSQL is a pure Python SQL database written to remove the dependence of the Python Web Modules on 3rd party drivers for non-Python databases like MySQL but designed to be a useful database in its own right.

http://www.pythonweb.org/projects/snakesql/

== ZODB ==
Zope Object Database.

 * http://www.zope.org/Wikis/ZODB/FrontPage
 * DirectoryStorage: http://dirstorage.sourceforge.net/
 * PGStorage: http://hathawaymix.org/Software/PGStorage

== Durus ==
Durus is a persistent object system for applications written in the Python programming language. Durus offers an easy way to use and maintain a consistent collection of object instances used by one or more processes. Access and change of a persistent instances is managed through a cached Connection instance which includes commit() and abort() methods so that changes are transactional.

http://www.mems-exchange.org/software/durus/

== Pypersyst ==
Pypersyst provides fast, reliable, and flexible object persistence with a small footprint, suitable for embedding in other Python applications.

http://pypersyst.org/

== shelve ==
A [http://www.python.org/doc/current/lib/module-shelve.html ''shelf''] is a persistent, dictionary-like object. The difference with ''dbm'' databases is that the values (not the keys!) in a shelf can be essentially arbitrary Python objects -- anything that the [http://www.python.org/doc/current/lib/module-pickle.html pickle] module can handle. This includes most class instances, recursive data types, and objects containing lots of shared sub-objects. The keys are ordinary strings.

== KirbyBase ==
http://www.netpromi.com/kirbybase.html 


= Datafiles interfaces =
Things you open.

== xBase ==
Which stands for .dbf files interface.[[BR]]
.dbf files were produced by several old systems like dBase(II,III,IV), Fox(Base,Pro)
 * xBase (http://linux.techass.com/projects/xdb/) - Python interface in plans
 * http://www.fiby.at/dbfpy/index.html - working now. or (take it [http://starship.python.net/crew/jjkunce/python/dbfpy.tgz here]) 
 * http://www.sequiter.com/products/Python/
 * http://cbbrowne.com/info/xbase.html
 * http://www.e-bachmann.dk/docs/xbase.htm - dead link

== dbm ==
A family of old unix plain hash tables. Has varieties like dbm, ndbm, gdbm, dbmdb185.[[BR]]
See [http://www.python.org/doc/current/lib/module-anydbm.html anydbm], 
[http://www.python.org/doc/current/lib/module-dumbdbm.html dumbdbm],
[http://www.python.org/doc/current/lib/module-dbhash.html dbhash],
[http://www.python.org/doc/current/lib/module-bsddb.html bsddb],
[http://www.python.org/doc/current/lib/module-dbm.html dbm],
[http://www.python.org/doc/current/lib/module-gdbm.html gdbm]
in Python Standard Library.

== MetaKit ==
http://www.equi4.com/metakit/python.html

= XML Databases or Interfaces =

== Forest ==
Forest is a (native) XML database written in Python. It is intended to support fast queries of XML data.

https://infrae.com/viewvc/old/forest/

== 4ODS ==

http://www.4suite.org/

== xsdbXML ==
http://xsdb.sourceforge.net/

= Special file interface =

 * http://python-dsv.sourceforge.net/ CSV or any separated file (see also PEP:0305)
 * ConfigParser.py - Windows .ini format
 * gzip.py
 * zipfile.py
 * tar
 * pdf http://www.pythonware.com/
 * PyTables
