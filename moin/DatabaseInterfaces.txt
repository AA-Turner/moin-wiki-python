<<TableOfContents>>

Note: The contents of the ChoosingDatabase page are being merged back into this page.

= Generic Database Interfaces and APIs =

 * The Python standard for database interfaces is the [[http://www.python.org/dev/peps/pep-0249/|Python DB-API (PEP 249)]]

 Most Python database interfaces adhere to this standard.

 * Most databases have ODBC support; see the section below on ODBC modules.
 * Java databases usually support JDBC, and can be used from Jython.
 * See also DbApiModuleComparison

== ODBC Support ==

 * ceODBC: http://ceodbc.sourceforge.net

 * pyodbc: http://pyodbc.sourceforge.net

 * [[http://www.egenix.com/products/python/mxODBC|mxODBC]]: A commercial Python extension that provides ODBC connectivity on Windows, Linux, Mac OS X, FreeBSD and many other Unix platforms.

 * [[http://www.egenix.com/products/python/mxODBCConnect|mxODBC Connect]]: A commercial client-server product that allows connecting Python to ODBC compatible databases running on remote servers without requiring an ODBC driver on the client side.

 * ODBTPAPI: http://benjiyork.com/odbtp.html

== ADO Support ==

 * adodbapi (http://adodbapi.sourceforge.net/):  A Python module that makes it easy to use Microsoft ADO for connecting to databases and other data sources. 

= Database Interfaces for Relational Database Systems =

Database systems employing a relational model, with support for SQL.

== General Purpose Database Systems ==

 * IBM [[DB2]]
 * [[Firebird]] (and Interbase)
 * [[Informix]]
 * [[Ingres]]
 * [[MySQL]]
 * [[Oracle]]
 * [[PostgreSQL]]
 * [[SAP DB]] (also known as "MaxDB")
 * Microsoft [[SQL Server]]
 * [[Sybase]]

(To add new entries, please choose DatabaseTemplate when creating the page.)

== Database Systems for Embedding Into Applications ==

The following database systems are more oriented towards embedded applications:

  * GadFly
  * [[SQLite]]
  * [[ThinkSQL]]

(To add new entries, please choose DatabaseTemplate when creating the page.)

== Non-Relational Databases ==

  * MetaKit
  * [[ZODB]]
  * [[BerkeleyDB]]
  * [[KirbyBase]]
  * [[Durus]]
  * [[atop]]
  * [[buzhug]]

(To add new entries, please choose DatabaseTemplate when creating the page.)

= Native Python Databases =

== buzhug ==

[[http://buzhug.sourceforge.net/|buzhug]] is a pure-Python database engine, using a Pythonic, no-SQL syntax.

The data is stored and accessed on disk (it is not an in-memory database). The implementation has been designed to make all operations, and especially selection, as fast as possible with an interpreted language.

A limited benchmark using the same use cases as SQLite's author shows that buzhug is much faster than other pure-Python modules (KirbyBase, gadfly). SQLite, which is implemented in C, is faster, but only less than 3 times on the average.

== SnakeSQL ==

[[http://www.pythonweb.org/projects/snakesql/|SnakeSQL]] is a pure Python SQL database written to remove the dependence of the Python Web Modules on 3rd party drivers for non-Python databases like MySQL but designed to be a useful database in its own right.
