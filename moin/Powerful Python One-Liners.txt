= Powerful Python One-Liners =
This is a page that is devoted to short programs that can perform powerful operations. The ability to write short programs that are just as powerful as a program written in another language designed to do the same thing. However, it is sometimes fun to try and write a program in Python that is only one line. In other languages this would be nearly ''impossible'', but in Python it is a lot easier to do. The trick is to think up something that will "do a lot with a little." I, personally, would love to see this page expanded to the point where it needs some sort of organization system.

Thanks for Your Code, [[JAM]]

Of course, there is debate on whether one-liners are even ''Pythonic''.

== Contributed Code ==
 * [[JAM/Code/PlatformFinder]] - This program tells you what platform you are using.
 * [[JAM/Code/ComPYiler]] - This program compiles every .py file in the Python directory.
 * [[Powerful Python One-Liners/Hostname]] - This programs tells you what your hostname is.

Some thoughts by ewo:

 * Want to know many bytes a terabyte is? If you know further abbreviations, you can extend the list.

{{{
import pprint;pprint.pprint(zip(('Byte', 'KByte', 'MByte', 'GByte', 'TByte'), (1 << 10*i for i in range(5))))
}}}
 * And what's the largest number that can be represented by 8 Byte?

{{{
print '\n'.join("%i Byte = %i Bit = largest number: %i" % (j, j*8, 256**j-1) for j in (1 << i for i in range(8)))
}}}
Cute, isn't it?

=== Set of all subsets ===
 * Function that returns the set of all subsets of its argument

{{{
f = lambda x: [[y for j, y in enumerate(set(x)) if (i >> j) & 1] for i in range(2**len(set(x)))]
}}}
{{{
>>>f([10,9,1,10,9,1,1,1,10,9,7])
[[], [9], [10], [9, 10], [7], [9, 7], [10, 7], [9, 10, 7], [1], [9, 1], [10, 1], [9, 10, 1], [7, 1], [9, 7, 1], [10, 7, 1], [9, 10, 7, 1]]
}}}
-RJW

Alternately (shorter, more functional version):

{{{
f = lambda l: reduce(lambda z, x: z + [y + [x] for y in z], l, [[]])
}}}
=== Decode a base64 encoded file ===
{{{
import base64, sys; base64.decode(open(sys.argv[1], "rb"), open(sys.argv[2], "wb"))
}}}
=== Editing a list of files in place ===
I came up with this one-liner in response to an [[http://linuxgazette.net/issue96/orr.html|article]] that said it couldn't be done as an one-liner in Python.

What this does is replace the substring "at" by "op" on all lines of all files (in place) under the path specified (here, the current path).

 * '''''Caution:''''' Don't run this on your home directory or you're going to get '''all your text files edited'''.

{{{#!python
import sys,os,re,fileinput;a=[i[2] for i in os.walk('.') if i[2]] [0];[sys.stdout.write(re.sub('at','op',j)) for j in fileinput.input(a,inplace=1)]
}}}
Clearer is: {{{import os.path; a=[f for f in os.listdir('.') if not os.path.isdir(f)]}}}

=== Reimplementing cut ===
Print every line from an input file but remove the first two fields.

{{{
python -c "import sys;[sys.stdout.write(' '.join(line.split(' ')[2:])) for line in sys.stdin]" < input.txt
}}}
=== Cramming Python into Makefiles ===
A related issue is embedding Python into a Makefile. I had a really long script that I was trying to cram into a makefile so I automated the process:

{{{
import sys,re

def main():
    fh = open(sys.argv[1],'r')
    lines = fh.readlines()
    print '\tpython2.2 -c "`printf \\"if 1:\\n\\'
    for line in lines:
        line = re.sub('[\\\'\"()]','\\\g<0>',line)
        # grab leading white space (should be multiples of 4) and makes them into
        # tabs
        wh_spc_len = len(re.match('\s*',line).group())

        sys.stdout.write('\t')
        sys.stdout.write(wh_spc_len/4*'\\t'+line.rstrip().lstrip())
        sys.stdout.write('\\n\\\n')
    print '\t\\"`"'

if __name__=='__main__':
    main()
}}}
This script generates a "one-liner" from make's point of view.

== echo unicode character: ==
{{{
python -c "print unichr(234)"
}}}
This script echos "Ãª"

== Apply regular expression to lines from stdin ==
{{{
[another command] | python -c "import sys,re;[sys.stdout.write(re.sub('PATTERN', 'SUBSTITUTION', line)) for line in sys.stdin]"
}}}
== Modify lines from stdin using map ==
{{{
python -c "import sys; tmp = lambda x: sys.stdout.write(x.split()[0]+'\t'+str(int(x.split()[1])+1)+'\n'); map(tmp, sys.stdin);"
}}}
== Display List of all users on Unix-like systems ==
{{{
print '\n'.join(line.split(":",1)[0] for line in open("/etc/passwd"))
}}}
== CSV file to json ==
{{{
python -c "import csv,json;print json.dumps(list(csv.reader(open('csv_file.csv'))))"
}}}
== Compress CSS file ==
{{{
python -c 'import re,sys;print re.sub("\s*([{};,:])\s*", "\\1", re.sub("/\*.*?\*/", "", re.sub("\s+", " ", sys.stdin.read())))'
}}}
== Decode string written in Hex ==
{{{
python -c "print ''.join(chr(int(''.join(i), 16)) for i in zip(*[iter('474e552773204e6f7420556e6978')]*2))"
}}}
== Retrieve content text from HTTP data ==
{{{
python -c "import sys; print sys.stdin.read().replace('\r','').split('\n\n',2)[1]";
}}}
== Prints file extension ==
{{{
print '~/python/one-liners.py'.split('.')[-1]
}}}
== Escapes content from stdin ==
This can be used to convert a string into a "url safe" string

{{{
python -c "import urllib, sys ; print urllib.quote_plus(sys.stdin.read())";
}}}
== Reverse lines in stdin ==
{{{
python -c "import sys; print '\n'.join(reversed(sys.stdin.read().split('\n')))"
}}}
== Print top 10 lines of stdin ==
{{{
python -c "import sys; sys.stdout.write(''.join(sys.stdin.readlines()[:10]))" < /path/to/your/file
}}}
== Sony's Open Source command line tool for performing python one liners using unix-like pipes ==
They call it "The Pyed Piper" or pyp. It's pretty similar to the -c way of executing python, but it imports common modules and has it's own preset variable that help with splitting/joining, line counter, etc. You use pipes to pass information forward instead of nested parentheses, and then use your normal python string and list methods. Here is an example from the homepage:

Here, we take a linux long listing, capture every other of the 5th through the 10th lines, keep username and file name fields, replace "hello" with "goodbye", capitalize the first letter of every word, and then add the text "is splendid" to the end:

{{{
ls -l | pyp "pp[5:11:2] | whitespace[2], w[-1] | p.replace('hello','goodbye') | p.title(),'is splendid'"
}}}
and the explanation:

This uses pyp's built-in string and list variables (p and pp), as well as the variable whitespace and it's shortcut w, which both represent a list based on splitting each line on whitespace (whitespace = w = p.split()). The other functions and selection techniques are all standard python. Notice the pipes ("|") are inside the pyp command.

http://code.google.com/p/pyp/ http://opensource.imageworks.com/?p=pyp

== 10 one-liners that fit into a tweet ==
I visited this page oftentimes and I loved studying the one-liners presented above. Thanks for creating this awesome resource, JAM and RJW! :)

Because I learned a lot from studying the one-liners, I thought why not revive the page (after almost ten years since the last change happened)?

After putting a lot of effort into searching the web for inspiration, I created the following ten one-liners. Some of them are more algorithmic (e.g. Quicksort). Some day, I will add a detailed explanation here - but for now, you can [[https://blog.finxter.com/10-python-one-liners/|read my blog article]] to read the explanations.

{{{
# 10. Palindrome Python One-Liner
phrase.find(phrase[::-1])

# 9. Swap Two Variables Python One-Liner
a, b = b, a

# 8. Sum Over Every Other Value Python One-Liner
sum(stock_prices[::2])

# 7. Read File Python One-Liner
[line.strip() for line in open(filename)]

# 6. Factorial Python One-Liner
reduce(lambda x, y: x * y, range(1, n+1))

# 5. Performance Profiling Python One-Liner
python -m cProfile foo.py

# 4. Superset Python One-Liner
lambda l: reduce(lambda z, x: z + [y + [x] for y in z], l, [[]])

# 3. Fibonacci Python One-Liner
lambda x: x if x<=1 else fib(x-1) + fib(x-2)

# 2. Quicksort Python One-liner
lambda L: [] if L==[] else qsort([x for x in L[1:] if x< L[0]]) + L[0:1] + qsort([x for x in L[1:] if x>=L[0]])

# 1. Sieve of Eratosthenes Python One-liner
reduce( (lambda r,x: r-set(range(x**2,n,x)) if (x in r) else r), range(2,int(n**0.5)), set(range(2,n)))
}}}
