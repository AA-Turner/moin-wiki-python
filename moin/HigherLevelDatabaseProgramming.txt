There are several wrappers that provide improved or simplified interfaces to SQL databases. Some of these might be referred to as object relational mappers, or ORM in this list -- these create Pythonic objects out of database rows. Others may only help generate SQL, or provide simple mapping support.


= Object Relational Mappers (ORMs) =


 * [[https://github.com/twisted/axiom/|Axiom]]: MIT-licensed, SQLite-based
 * [[http://www.nongnu.org/bazaar/|Bazaar ORM]]: Easy to use and powerful abstraction layer between relational database and object oriented application.
 * [[http://code.google.com/p/web2py/source/browse/gluon/dal.py|dal.py]]: a Database Abstraction Layer (DAL), an API that maps Python objects into database objects such as queries, tables, and records. [[http://vimeo.com/20760298|101 video]] (This module is normally distributed as part of web2py but it does not depend on web2py, except for few some web2py specific functionalities)
 * [[DbObj|DbObj]]: ORM
 * [[http://www.aminus.net/dejavu|Dejavu]]: Public domain, thread-safe, Data Mapper ORM. (latest rel. 1.5 dd. 2007-01-24)
 * [[http://forgetsql.sourceforge.net/|forgetSQL]]: ORM
 * [[https://pypi.python.org/pypi/libschevo/3.2.10/|libschevo]]: Next-generation Object-Oriented DBMS.
 * [[MiddleKit|MiddleKit]]: ORM
 * [[http://modeling.sourceforge.net/|Modeling Object-Relational Bridge]]: ORM and schema design with Zope integration
 * [[http://orm.nongnu.org/|Object Relational Membrame]] ([[http://freshmeat.net/projects/orm/|Freshmeat entry]]): ORM
 * [[http://docs.projexsoftware.com/api/orb|ORB]]: easy to use ORM with Pythonic query markup language for multiple databases, works with the [[http://www.projexsoftware.com/products/orbiter|Orbiter]] ORM designer
 * [[PyDo|PyDo]]: ORM
 * [[http://pypi.python.org/pypi/quick_orm/|quick_orm]]: ORM on top of SQLAlchemy to make things simple
 * [[http://sqlobject.org/|SQLObject]]: ORM
 * [[http://www.sqlalchemy.org/|SQLAlchemy]]: SQL Toolkit and ORM
 * [[https://storm.canonical.com|Storm]]: Clean and powerful ORM by Canonical.


= SQL Wrappers & Generators =


 * [[http://opensource.theopalgroup.com/|db_row]]: SQL result wrapper
 * [[http://gnuenterprise.org/tools/common/|gnue-common]]: gnue.common.datasources module - Database abstraction layer
 * [[http://roundup.sf.net/|Roundup's hyperdb]]: set of constrained data types with relations (many-to-many included) over multiple backends including SQL, metakit and db (yes, relations in an anydbm-backed database :)
 * [[http://www.livinglogic.de/Python/sql/|ll.sql]]: SQL generator
 * [[http://pdo.neurokode.com|PDO]]: Python Database Objects - allows use of most DBAPI modules with a clean, simple API similar in scope to ADO or JDBC. Column access by name is provided by a low overhead mechanism.
 * [[https://fedorahosted.org/pySQLFace/|pySQLFace]]: SQL interface over DBAPI2. It provides a database specific API to retrive and save data by creating SQL/DML command objects from a configuration file.
 * [[PyTable|PyTable]]
 * The [[PythonWebModules|PythonWebModules]] web.database module - Database abstraction layer to make it possible to run the same SQL on different databases without changing your code.
 * The [[PythonWebModules|PythonWebModules]] web.database.object module - ORM - treat an SQL database like python objects for easy programming, the SQL is done behind the scenes. Supports one and many to many mappings and can generate HTML forms for the data automatically.
 * QLime ([[http://freshmeat.net/projects/qlime/|Freshmeat entry]]): Easy to use, transparent data access to relational databases or other data sources. See examples here: http://www.qlime-project.org/example.rst
 * [[http://www.python.org/pypi/simpleQL|simpleQL]]: SQL generator using live translation of generator expressions
 * [[http://py.vaults.ca/apyllo2.py/D21777795|SQLBuilder]]: SQL generator
 * [[http://dustman.net/andy/python/SQLDict|SQLDict]]: SQL wrapper
 * [[http://lists.canonical.org/pipermail/kragen-hacks/2004-April/000394.html|prototype SchemQL/Roe-like thing in Python]] --- Python objects representing relational algebra expressions, backed by lazy compilation to SQL and an iterable interface.


= Relational Python =


 * [[http://www.quicksort.co.uk|Dee]]: A proposal to supersede SQL and the need for database sub-languages. Adds truly relational capabilities to Python (no wrappers, no mappers).


See also Thinki:PersistenceSystems and Thinki:ObjectOrientedDatabase


== Editorial Notes ==


The above lists should be arranged in ascending alphabetical order - please respect this when adding new entries. When specifying release dates please use the format YYYY-MM-DD.


----
