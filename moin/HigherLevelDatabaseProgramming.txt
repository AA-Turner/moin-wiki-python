There are several wrappers that provide improved or simplified interfaces to SQL databases.  Some of these might be referred to as ``object relational mappers``, or ORM in this list -- these create Pythonic objects out of database rows.  Others may only help generate SQL, or provide simple mapping support.

= Object Relational Mappers (ORMs) =

 * [http://divmod.org/trac/wiki/DivmodAxiom Axiom]: MIT-licensed, SQLite-based
 * [http://www.nongnu.org/bazaar/ Bazaar ORM]: Easy to use and powerful abstraction layer between relational database and object oriented application.
 * DbObj: ORM
 * [http://www.aminus.net/dejavu Dejavu]: Public domain, thread-safe, Data Mapper ORM.
 * [http://forgetsql.sourceforge.net/ forgetSQL]: ORM
 * MiddleKit: ORM
 * [http://modeling.sourceforge.net/ Modeling Object-Relational Bridge]: ORM and schema design with Zope integration
 * [http://orm.nongnu.org/ Object Relational Membrame] ([http://freshmeat.net/projects/orm/ Freshmeat entry]): ORM
 * PyDo: ORM
 * [http://sqlobject.org/ SQLObject]: ORM
 * [http://www.sqlalchemy.org/ SQLAlchemy]: SQL Toolkit and ORM
 * [https://storm.canonical.com Storm]: Clean and powerful ORM by Canonical.

= SQL Wrappers & Generators =

 * [http://opensource.theopalgroup.com/ db_row]: SQL result wrapper
 * [http://roundup.sf.net/ Roundup's hyperdb]: set of constrained data types with relations (many-to-many included) over multiple backends including SQL, metakit and db (yes, relations in an anydbm-backed database :)
 * [http://www.livinglogic.de/Python/sql/ ll.sql]: SQL generator
 * [http://pdo.neurokode.com PDO]: Python Database Objects - allows use of most DBAPI modules with a clean, simple API similar in scope to ADO or JDBC.  Column access by name is provided by a low overhead mechanism.
 * PyTable
 * The PythonWebModules web.database module - Database abstraction layer to make it possible to run the same SQL on different databases without changing your code.
 * The PythonWebModules web.database.object module - ORM - treat an SQL database like python objects for easy programming, the SQL is done behind the scenes. Supports one and many to many mappings and can generate HTML forms for the data automatically.
 * QLime ([http://freshmeat.net/projects/qlime/ Freshmeat entry]): Easy to use, transparent data access to relational databases or other data sources. See examples here: http://www.qlime-project.org/example.rst
 * [http://www.python.org/pypi/simpleQL simpleQL]: SQL generator using live translation of generator expressions
 * [http://py.vaults.ca/apyllo2.py/D21777795 SQLBuilder]: SQL generator
 * [http://dustman.net/andy/python/SQLDict SQLDict]: SQL wrapper
 * [http://lists.canonical.org/pipermail/kragen-hacks/2004-April/000394.html prototype SchemQL/Roe-like thing in Python] --- Python objects representing relational algebra expressions, backed by lazy compilation to SQL and an iterable interface.

= Relational Python =

 * [http://www.quicksort.co.uk Dee]: A proposal to supersede SQL and the need for database sub-languages. Adds truly relational capabilities to Python (no wrappers, no mappers).


See also Thinki:PersistenceSystems and Thinki:ObjectOrientedDatabase 

== Editorial Notes ==

The above lists should be arranged in ascending alphabetical order - please respect this when adding new entries. When specifying release dates please use the format YYYY-MM-DD.
----
CategoryTracker
