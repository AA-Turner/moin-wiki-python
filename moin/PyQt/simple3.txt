== "Simple" Stage 3 ==


Here is listing of the next stage, namely '''Stage 3''':

{{{#!python
#!/usr/bin/env python
# .../simple_1/simple.py
'''A really simple editor program in PyQt4 - simple.py'''

import sys

from PyQt4.QtGui import (QMainWindow, QApplication, QFileDialog)
from PyQt4.QtCore import SIGNAL

from ui_simple import Ui_MainWindow
__version__ = "0.0.04"
class MainWindow(QMainWindow, Ui_MainWindow):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)                                         
        self.setupUi(self)
        self.action_New.triggered.connect(self.fileNew)
        self.action_Open.triggered.connect(self.fileOpen)
        self.action_Save.triggered.connect(self.fileSave)
        self.actionSave_As.triggered.connect(self.fileSaveAs)
        self.fileName = None
        
    def fileNew(self):
        '''Clear the editor window for a new file with name
        specified in fileSaveAs method.'''
        self.textEdit.setText('')
        self.statusBar().showMessage('File menu: New selected', 8000)

    def fileOpen(self):
        '''Open file'''
        fname = unicode(QFileDialog.getOpenFileName(self,
                        "Open File", '.', "Files (*.*)"))
        if not (fname == ""):
            self.textEdit.setText(open(fname).read())
            self.fileName = fname
        else:
            return
        self.statusBar().showMessage('File opened ', 8000)
  
    def fileSave(self):
        if self.fileName is None:
            return self.fileSaveAs()
        else:
            fname = self.fileName
            fl = open(fname, 'w')
            tempText = self.textEdit.toPlainText()
            if tempText:                
                fl.write(tempText)
                fl.close()
                self.statusBar().showMessage('Saved file ' + fname, 8000)
                return True
            else:
                self.statusBar().showMessage('Failed to save ...', 5000)
                return False
        
    def fileSaveAs(self):
        dir = self.fileName if self.fileName is not None else "."
        fname = unicode(QFileDialog.getSaveFileName(self,
                        "Simple Editor, SaveAs ", dir, "Any File (*.*)"))
        if fname:
            if "." not in fname:
                fname += ".txt"
            self.fileName = fname
            self.fileSave()        
            self.statusBar().showMessage('SaveAs file' + fname, 8000)
       
if __name__ == '__main__':
    app = QApplication(sys.argv)
    frame = MainWindow()
    frame.show()
    app.exec_()
}}}

We will put this snipped of a code again to http://akabaila.pcug.org.au/data_sample/ directory and will name it '''simple0.0.04.tar.gz.'''  Please download it and save it for testing the program. This version is a bit longer than that of '''Stage 2,''' but it is already a fully working program - you start a new document, type the text and save it as '''some_file_name;''' open a file and edit it and save it with the same name; you can exit the program.  Of course, right from the '''Stage 0,''' the edit window can be resized, the window can be moved to any desired location.  The typed part of program is still only some 70 lines long.

So why don't we stop here, pat ourselves on the shoulder for a job well done and retire?  Well, to begin with, it is unusual for modern GUIs to only have menus to invoke various actions, so we need some tool bars and populate them with icons that have the same effect as the menu items. Icons will need images and we may as well append those images to the menu items. We also should help the user avoid shooting himself or herself in the foot and warn about destructive actions. So if there is a text in the window that has been altered from the originally loaded source of it and the user requests to open a new file, we should issue a '''warning''' about it. There probably are other situations that we should draw user attention to.

One small item really bugged me when I started to use this partially complete program - I sorely missed the lack of '''title of opened file.'''  That needs to be also attended too.

It would be useful to issue tips at the end of the mouse arrow when it is hovering over representation of an action (an icon that invokes action). It would be nice to also have the status bar at the bottom of the edit window, to display the status information.

From '''Stage 2''' to '''Stage 3''' was a small step.  After all, in '''Stage 3''' we did with all actions that which we in '''Stage 2''' did with '''file_New''' action. Though the program text is about 3 times bigger, there is nothing new or unfamiliar. So it may come as a surprise that the completed program in the '''finished''' Stage is some 3 times longer than '''Stage 3''', though it is still small as programs go.

One thing that needs to be stressed - we are using the results of '''Qt Designer''', which produced file '''simple.ui,''' which we compiled to python source, named '''ui_simple.py.''' We did not invent the action names - we took them from '''ui_simple.py!''' We do want to make as much use of the information from '''Qt Designer''' as possible.  No need to reinvent the wheel!

Yes, '''ui_simple.py''' is full of useful information, but the code should not be edited. Of course, we can get a new '''simple.ui''' with different setup from the Qt Designer any time we want to. That allows substantial alterations to the form that we have designed in the first place. However its compilation would wipe out any editing of the ui_simple.py file. That's why it is best not to edit it. 

A plea to you all - if you visit this tutorial, please drop a line to me at the following address:
'''akabaila[at]pcug[dot]org[dot]au.'''  It would be great if you would kindly report any glitches that you encounter - that's what open source software is all about! Thank you.



[[PyQt/simple|Return Home]]
