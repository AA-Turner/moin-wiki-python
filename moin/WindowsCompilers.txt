<<TableOfContents()>>

Even though Python is an interpreted language, you may need to install Windows C++ compilers in some cases. Unlike Linux, compilers for Windows are not included by default in the OS.

For example, you will need to use them if you want to:

 * Install a non-pure Python package from sources with [[https://pip.pypa.io/|Pip]] (If there is no [[http://wheel.readthedocs.org|Wheel package]] provided).
 * Compile a [[http://cython.org/|Cython]] or [[https://pypi.python.org/pypi/Pyrex|Pyrex]] file.

Microsoft provides official C++ compilers called ''Visual C++'', you can find them bundled with ''Visual Studio'' or, for some versions, in standalone distributions. Some alternative compilers exists like [[http://mingw.org/|MinGW]], but incompatibilities may occur with a CPython official distribution that is build with Microsoft Visual C++.

The compiler's architecture must be the same as Python's (for example: if you use Python 64bit, you have to use a x64 compiler).

= Which Microsoft Visual C++ compiler use with a specified Python version ? =
Each Python version uses a specific compiler version (e.g. ''CPython 2.7'' uses ''Visual C++ 9.0'', ''CPython 3.3'' uses ''Visual C++ 10.0'', ...). So, you need to install the compiler version that corresponds to your Python version  :
||'''Visual C++''' ||'''CPython''' ||
||14.0 ||3.5 ||
||10.0 ||3.3, 3.4 ||
||9.0 ||2.6, 2.7, 3.0, 3.1, 3.2 ||




= Compilers Installation and configuration =
Compatible architectures are specified for each compiler in brackets.

== Microsoft Visual C++ 14.0 standalone: Visual C++ Build Tools 2015 (x86, x64, ARM) ==
This is a standalone version of ''Visual C++ 14.0'' compiler, you don't need to install ''Visual Studio 2015''.

 * Install ''[[https://www.microsoft.com/download/details.aspx?id=49983|Microsoft Visual C++ Build Tools 2015]]''. Check ''Windows 8.1 SDK'' and ''Windows 10 SDK'' options.

You have to run your commands from ''Visual C++ Build Tools Command Prompt'' (''C:\Program Files (x86)\Microsoft Visual C++ Build Tools\'') each time you want compile with Python.

(!) If you want automatic use of this compiler with Python, you can also edit the ''C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat'' and replace its contents with the following text :

{{{#!highlight bat
rem Vcvarsall for Visual C++ Build Tools 2015
@echo off
set vcprogramfiles=%ProgramFiles(x86)%
if "%vcprogramfiles%"=="" set vcprogramfiles=%ProgramFiles%
call "%vcprogramfiles%\Microsoft Visual C++ Build Tools\vcbuildtools.bat" %*
}}}
== Microsoft Visual C++ 14.0 with Visual Studio 2015 (x86, x64, ARM) ==
''Visual Studio 2015'' contains ''Visual C++ 14.0'' compiler. ''Distutils'' will automatically detect the compiler and use it.

== Microsoft Visual C++ 10.0 standalone: Windows SDK 7.1 (x86, x64, ia64) ==
This is a standalone version of ''Visual C++ 10.0'' compiler, you don't need to install ''Visual Studio 2010''.

 * Uninstall ''Microsoft Visual C++ 2010 Redistributable'' if present (all versions and architectures). If present, it can cause an error on Windows SDK 7.1 installation.
 * Install ''[[https://www.microsoft.com/download/details.aspx?id=24872|Microsoft .NET Framework 4]]'' if not present.
 * Install ''[[https://www.microsoft.com/download/details.aspx?id=8279|Microsoft Windows SDK for Windows 7 and .NET Framework 4]]''. Check ''Windows headers and libraries'', ''Visual C++ Compilers'' and ''Windows Native Code Development\Tools'' options only.
 * Install ''[[https://www.microsoft.com/download/details.aspx?id=4422|Microsoft Visual C++ 2010 Service Pack 1 Compiler Update for the Windows SDK 7.1]]''. This updates the compiler to Visual C++ 10.0 SP1.
 * reinstall ''[[https://www.microsoft.com/download/details.aspx?id=26999|Microsoft Visual C++ 2010 Redistributable]]'' (for all previously installed architectures).

You have to run your commands from ''Windows SDK 7.1 Command Prompt'' (''C:\Program Files (x86)\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd'') each time you want to compile with Python. By default, SetEnv.cmd uses the ''x86'' architecture, use ''/x64'' or ''/ia64'' arguments to change it.

(!) If you want automatic use of this compiler with Python, you can also edit the ''C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\vcvarsall.bat'' file and replace its contents with the following text :

{{{#!highlight bat
rem Vcvarsall for Windows SDK 7.1
@echo off
if /i "%1" == "x64" (
    set vcvararch=x64
) else if /i "%1" == "amd64" (
    set vcvararch=x64
) else if /i "%1" == "x86_amd64" (
    set vcvararch=x64
) else if /i "%1" == "ia64" (
    set vcvararch=ia64
) else if /i "%1" == "x86_ia64" (
    set vcvararch=ia64
) else (
    set vcvararch=x86
)
set vcprogramfiles=%ProgramFiles(x86)%
if "%vcprogramfiles%"=="" set vcprogramfiles=%ProgramFiles%
call "%vcprogramfiles%\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /%vcvararch%
}}}
== Microsoft Visual C++ 10.0 with Visual Studio 2010 (x86, x64, ia64) ==
''Visual Studio 2010'' contains ''Visual C++ 10.0'' compiler. ''Distutils'' will automatically detect the compiler and use it.

== Microsoft Visual C++ 9.0 standalone: Visual C++ Compiler for Python 2.7 (x86, x64) ==
This is a standalone version of ''Visual C++ 9.0'' compiler, you don't need to install ''Visual Studio 2008''.

 * Install ''[[https://www.microsoft.com/download/details.aspx?id=44266|Microsoft Visual C++ Compiler for Python 2.7]]''.
 * Make sure ''setuptools'' version is at least 6.0 or it will not correctly detect the compiler path. Simply run the following in command prompt to update it:

{{{
pip install --upgrade setuptools
}}}
{i} Even though this package's name refers to Python 2.7 specifically, you can use it with all Python versions that use ''Visual C++ 9.0''.

== Microsoft Visual C++ 9.0 standalone: Windows SDK 7.0 (x86, x64, ia64) ==
This is a standalone version of ''Visual C++ 9.0'' compiler, you don't need to install ''Visual Studio 2008''.

/!\ The use of ''Microsoft Visual C++ Compiler for Python 2.7'' is recommended (If you don't need to compile for ia64). See the previous paragraph to install it.

 * Install ''[[https://www.microsoft.com/download/details.aspx?id=25150|Microsoft .NET Framework 3.5 SP1]]'' if not present.
 * Install ''[[https://www.microsoft.com/download/details.aspx?id=3138|Microsoft Windows SDK for Windows 7 and .NET Framework 3.5 SP1]]''. Check ''Windows headers and libraries'', ''Visual C++ Compilers'' and ''Win32 Developement Tools'' options only.
 * Set the ''DISTUTILS_USE_SDK'' environment variable to 1.

You have to run your commands from ''Windows SDK 7.0 Command Prompt'' (''C:\Program Files (x86)\Microsoft SDKs\Windows\v7.0\Bin\SetEnv.cmd'') each time you want to compile with Python. By default, SetEnv.cmd uses the ''x86'' architecture, use ''/x64'' or ''/ia64'' arguments to change it.

== Microsoft Visual C++ 9.0 standalone: Windows SDK 6.1 (x86, x64, ia64) ==
This is a standalone version of ''Visual C++ 9.0'' compiler, you don't need to install ''Visual Studio 2008''.

/!\ Windows SDK 6.1 was upgraded by Microsoft to Windows SDK 7.0. See the previous paragraph to install it.

 * Install ''[[https://www.microsoft.com/download/details.aspx?id=25150|Microsoft .NET Framework 3.5 SP1]]'' if not present.
 * Install ''[[https://www.microsoft.com/download/details.aspx?id=11310|Windows SDK for Windows Server 2008 and .NET Framework 3.5]]''. Check ''Windows headers and libraries'', ''Visual C++ Compilers'' and ''Win32 Development Tools'' options only.
 * Set the ''DISTUTILS_USE_SDK'' environment variable to 1.

You have to run your commands from ''Windows SDK 6.1 Command Prompt'' (''C:\Program Files (x86)\Microsoft SDKs\Windows\v6.1\Bin\SetEnv.cmd'') each time you want to compile with Python. By default, SetEnv.cmd uses the ''x86'' architecture, use ''/x64'' or ''/ia64'' arguments to change it.

== Microsoft Visual C++ 9.0 with Visual Studio 2008 (x86, x64, ia64) ==
''Visual Studio 2008'' contains ''Visual C++ 9.0'' compiler. ''Distutils'' will automatically detect the compiler and use it.

== MinGW (x86) ==
MinGW is an alternative C++ compiler that works with all Python versions.

 * Install ''[[http://sourceforge.net/projects/mingw/files/|Minimalist GNU For Windows]]'' in ''C:\MinGW''.
 * Open ''MinGW Installation Manager'', check ''mingw32-base'' and ''mingw32-gcc-g++'', and ''Apply Changes'' in the ''Installation'' menu.
 * Add ''C:\MinGW\bin'' to the ''PATH'' environment variable (With ";" before if PATH is not empty).
 * Create a ''distutils.cfg'' file with the following contents in the folder ''\Lib\distutils'' in Python install directory :

{{{#!highlight ini
[build]
compiler=mingw32

[build_ext]
compiler=mingw32
}}}
= Links =
 * [[https://support.microsoft.com/kb/2977003|Microsoft : The latest supported Visual C++ downloads]] : List of up-to-date ''Visual C++ Redistribuable'' and ''Visual Studio'' packages.
