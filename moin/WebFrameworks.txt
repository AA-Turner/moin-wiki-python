#acl Trusted:read,write,delete,revert Known:read,write,revert All:read
#pragma section-numbers off

= Web Frameworks for Python =

A Web framework is a collection of packages or modules which allow developers to write Web applications (see WebApplications) or services without having to handle such low-level details as protocols, sockets or process/thread management.

The majority of Web frameworks are exclusively server-side technology, although, with the increased prevalence of AJAX, some Web frameworks are beginning to include AJAX code that helps developers with the particularly tricky task of programming (client-side) the user's browser.  At the extreme end of the client-side Web Frameworks is technology that can use the web browser as a full-blown application execution environment (a la gmail for example): see [[WebBrowserProgramming|Web Browser Programming]] for details.

As a developer using a framework, you typically write code which conforms to some kind of conventions that lets you "plug in" to the framework, delegating responsibility for the communications, infrastructure and low-level stuff to the framework while concentrating on the logic of the application in your own code. This "plugging in" aspect of Web development is often seen as being in opposition to the classical distinction between programs and libraries, and the notion of a "mainloop" dispatching events to application code is very similar to that found in [[GuiProgramming|GUI programming]].

Generally, frameworks provide support for a number of activities such as interpreting requests (getting form parameters, handling cookies and sessions), producing responses (presenting data as HTML or in other formats), storing data persistently, and so on. Since a non-trivial Web application will require a number of different kinds of abstractions, often stacked upon each other, those frameworks which attempt to provide a complete solution for applications are often known as '''full-stack''' frameworks in that they attempt to supply components for each layer in the stack. 

Many frameworks now provide an element of customization in their support for the above activities and abstractions, utilizing [[WebComponents|components]] in that they provide abstractions only for certain specific things. As a result, it can be possible for you to build your own full-stack framework almost entirely from existing components.

== Popular Full-Stack Frameworks ==

A web application may use a combination of a base HTTP application server, a storage mechanism such as a database, a template engine, a request dispatcher, an authentication module and an AJAX toolkit. These can be individual components or be provided together in a high-level framework.

These are the most popular high-level frameworks. Many of them include components listed on the WebComponents page.

 * [[Django]] (1.3 Released 2011-03-23) - the Web framework for perfectionists (with deadlines). Django makes it easier to build better Web apps more quickly and with less code. Django is a high-level Python Web framework that encourages rapid development and clean, pragmatic design. It lets you build high-performing, elegant Web applications quickly. Django focuses on automating as much as possible and adhering to the DRY (Don't Repeat Yourself) principle. http://www.djangoproject.com/.
 * [[http://grok.zope.org/|Grok]] (1.4 Released 2011-04-04) is built on the existing Zope 3 libraries, but aims to provide an easier learning curve and a more agile development experience. It does this by placing an emphasis on convention over configuration and DRY (Don't Repeat Yourself).
 * [[http://pylonshq.com/|Pylons]] (1.0 Released 2010-05-28) a lightweight Web framework emphasizing flexibility and rapid development. It combines the very best ideas from the worlds of Ruby, Python and Perl, providing a structured but extremely flexible Python Web framework. It's also one of the first projects to leverage the emerging WSGI standard, which allows extensive re-use and flexibility but only if you need it. Out of the box, Pylons aims to make Web development fast, flexible and easy. Pylons is built on top of Paste (see below).  NOTE: Pylons-the-web-framework has recently been placed into maintenance status with the release of [[http://pylonsproject.org|Pyramid]], a successor, which is detailed further down the page.
 * [[http://www.turbogears.org/|TurboGears]] (2.1.1 Released 2011-06-15) the rapid Web development megaframework you've been looking for. Combines [[http://www.sqlalchemy.org/|SQLAlchemy (Model)]], [[http://genshi.edgewall.org/|Genshi (View)]], [[http://pylonshq.com/|Pylons (Controller)]], [[http://repoze.org/|Repoze]] and [[http://toscawidgets.org/|Tosca Widgets]]. Create a database-driven, ready-to-extend application in minutes. All with designer friendly templates, easy AJAX on the browser side and on the server side, with an incredibly powerful and flexible Object Relational Mapper (ORM), and with code that is as natural as writing a function. After reviewing the website check out: [[http://lucasmanual.com/mywiki/TurboGears2|QuickStart Manual]]
 * [[http://www.web2py.com|web2py]] Version 1.98.1 (2011-07-31)  
    * Python 2.4 to 2.7, no 3.x support yet
    * All in one package with no further dependencies. Development, deployment, debugging, testing, database administration and maintenance of applications can be done via the provided web interface. 
    * web2py has no configuration files, requires no installation, can be run off a USB drive. 
    * web2py uses Python for the Model, View and the Controller
    * Built-in ticketing system to manage errors
    * Internationalization engine, caching system
    * Flexible authentication system (LDAP, MySQL, janrain etc)
    * NIX(Linux, BSD), Windows, Mac OSX, tested on EC2, Webfaction 
    * works with MySQL, PostgreSQL, SQLite , Oracle, MSSQL and the Google App Engine via an ORM abstraction layer. 
    * Includes libraries to handle HTML/XML, RSS, ATOM, CSV, RTF, JSON, AJAX, XMLRPC, WIKI markup.
    * Production ready, capable of upload/download of very large files
    * Emphasis on backward compatibility.
 * [[http://www.zope.org/|Zope]] (2.13.6 Released 2011-04-03); [[http://wiki.zope.org/zope3/Zope3Wiki|Zope 3.4.1]] (Released 2010-06-22) Being the grandaddy of Python web frameworks, Zope has grown into a family of frameworks over the years. Zope 1 was released in 1999. Zope 2 is both a web framework and a general purpose application server, today it is primarily used by ContentManagementSystems. Zope 3 is both a standalone framework and a collection of related libraries, which are also included with newer releases of Zope 2. All of the Zope frameworks include the ZODB, an object database for Python.

See below for some other arguably less popular full-stack frameworks!


== Other Full-Stack Frameworks ==

These frameworks also provide most, if not all of the technology stack. However, they are regarded as not being as popular as the frameworks listed above.

 * [[http://www.cubicweb.org/|CubicWeb]] - a semantic web application framework featuring a query language, a selection+view mechanism, multiple databases, security, workflows, reusable components, etc. 
 * [[http://open.thusa.net/enamel/|Enamel]] - an abstraction layer over Twisted, Nevow, Formal and SQLAlchemy to converge their concepts under a single framework
 * [[http://www.gaeframework.com|GAE framework]] (1.0 PRE, Released 2011-05-84) is a Python web framework that's designed for high-load web sites build on Google App Engine
 * [[http://gizmojo.org/|Gizmo(QP)]] (0.7 Released 2007-04-17) extends QP (see below) adding functionality to help with building rich and exacting web interfaces. Includes a Form module that supports (redundant) automatically generated client-side field validation as well as additional json callbacks.
 * [[http://glashammer.welterde.de|Glashammer]] (0.1.3 Released 2008-08-11) is a full stack Python web framework with an emphasis on simplicity, flexibility, and extensibility. It is built atop excellent components and reinvents zero wheels. WSGI, routing, templating, forms, data, plugins, config, events, SQLAlchemy, Storm, Couchdb, OpenID, AppEngine, Jquery, etc.
 * [[Karrigell]] (3.1.1 Released 2010-09-02) is a flexible Python web framework, with a clear and intuitive syntax. It is independent from any database, ORM or templating engine, and lets the programmer choose between a variety of coding styles. A version for Python3.2+ (4.2 Released 2011-06-26) is available at http://code.google.com/p/karrigell/
 * [[http://www.nagare.org|Nagare]] - a new approach for the rapid development of web applications, thanks to advanced features like truely autonomous and reusable components, continuation, programmatic HTML/XML, automatic AJAX rendering and database ORM.
 * [[https://bitbucket.org/erob/notmm|notmm]] (0.4.3 Released 2011-03-12) - A general-purpose web toolkit sitting on top of Django and others. The notmm toolkit is an interactive Pythonic API for Django developers to create scalable web applications using WSGI 1.0 and Django. In active development and seeking new developers.  
 * [[http://www.innoscript.org|Porcupine]] (0.6 Released 2009-07-18) provides everything you need for building modern data-centric Web 2.0 applications, including the QuiX Javascript toolkit and the Porcupine Object Query Language (POQL). Requires Python 2.5 or later - not including 3.0 yet.
 * [[https://www.mems-exchange.org/software/qp/|QP]] (2.2 Released 2009-08-25) a package for defining and running multiple Web applications that are based on Durus for persistence, offering standard persistent Session and User classes, easy interactive database sessions, and QPY for safely assembling html. Packages require and run on Python >= 2.4 and yes that includes Python 3.x with the same code base!
 * SkunkWeb (3.4.0 Released 2004-09-10)
 * [[Spyce]] (2.1.3 Released 2006-11-17)
 * [[http://www.tipfy.org|Tipfy]] (0.5.6 Available on 30-Jun-2010) tipfy is a small but powerful framework made specifically for Google App Engine.
 * [[http://www.tornadoweb.org/|Tornado]] (0.1 Released 2009-09-10) is an open source version of the scalable, non-blocking web server and and tools that power !FriendFeed (acquired by Facebook with this project released as open source).
 * [[http://webapp-improved.appspot.com/|webapp2]] (2.0.2 Released 2011-07-18) - a lightweight framework compatible with Google App Engine’s webapp: it extends webapp to add better URI routing and exception handling, a full featured response object and a more flexible dispatching mechanism. Also offers sessions, localization, internationalization, domain and subdomain routing and secure cookies. Can be used outside of App Engine, independently of the App Engine SDK.
 * [[http://web-core.org/|WebCore]] (1.0.1 Released 2010-12-13) A full-stack, light-weight and efficient web development framework.  Web applications as simple as a single file, or as structured as you want.  Utilizes popular WSGI components, ORMs, etc. without locking you in, and offers a unique init.d-like middleware configuration.
 * [[http://webpy.org/|web.py]] (0.32 Released 2009-06-04) Think about the ideal way to write a Web app. Write the code to make it happen.
 * [[http://www.webwareforpython.org/|Webware]] (1.1 Released 2011-08-03) is a suite of Python packages and tools for developing object-oriented, web-based applications.
 * [[http://werkzeug.pocoo.org|Werkzeug]] (0.4.1 Released 2009-01-11) is Unicode-aware, includes a powerful debugger, full featured request and response objects, HTTP utilities to handle entity tags, cache control headers, HTTP dates, cookie handling, file uploads, a powerful URL routing system and a bunch of community contributed addon modules. 
 * [[http://whiff.sourceforge.net/|WHIFF]] (1.0 Released 2010-06-03) WHIFF is a collection of support services for WSGI/Python web applications which allows applications to be composed by "dropping" dynamic pages into container directories.  It automatically includes support for advanced features such as AJAX, jQueryUI widgets, Flash based charts and more. Extensive documentation and tutorial essays.
 * [[http://www.xpress.ir/|XPRESS]] (1.0 RC3 Released 2009-10-31) is an open source web application framework written in Python which provides an organized approach of designing and programming a website or web application. XPRESS emphasizes on Security, Speed, Simplicity, Scalability and Extensibility.

== Basic Frameworks ==

These projects provide the base "application server", either running as its own independent process, upon Apache or in other environments. On many of these you can then introduce your own choice of templating engines and other components to run on top, although some may provide technologies for parts of the technology stack.

 * [[http://code.google.com/p/appwsgi/|AppWsgi]] - illustration of building your own ajax framework running on a mod_wsgi apache server
 * [[http://bobo.digicool.com|Bobo]] (0.2.2 Released 2010-01-19) is a light-weight framework for creating WSGI web applications. It's goal is to be easy to use and remember. It addresses 2 problems: 1) mapping URLs to objects and 2) calling objects to generate HTTP responses. Bobo doesn't have a templating language, a database integration layer, or a number of other features that are better provided by WSGI middle-ware or application-specific libraries. Bobo builds on other frameworks, most notably WSGI and WebOb.
 * [[http://wiki.github.com/defnull/bottle|Bottle]] (0.8.5 Released 2010-11-11) is a fast and simple micro-framework for small web-applications. It offers request dispatching (Routes) with url parameter support, Templates, key/value Databases, a build-in HTTP Server and adapters for many third party WSGI/HTTP-server and template engines. All in a single file and with no dependencies other than the Python Standard Library.
 * [[CherryPy]] (3.2.0 Released 2011-02-25) is a pythonic, object-oriented HTTP framework. CherryPy powered web applications are in fact stand-alone Python applications embedding their own multi-threaded web server.[[TurboGears]] , web2py (see above) also use CherryPy.
 * [[https://bitbucket.org/prologic/circuits/|circuits.web]] (1.5 Released 2011-02-27) is a component based, event-driven light weight and high performance HTTP/WSGI framework. circuits.web has some similar features to CherryPy (see above), such as CherryPy's URL mapping. circuits.web applications are stand-alone applications with a high performance, multi-process web server with great concurrent scalability with full support for WSGI and deployment with other web servers.
 * [[http://pythonpaste.org/|Python Paste]] (1.7.5.1 Released 2010-09-20) brings consistency to Python Web development and Web application installation, providing tools for both developers and system administrators. Also, Pylons and Pyramid (see above) are built on top of Paste.
 * [[http://www.stroeder.com/pylib/PyWebLib/|PyWebLib]] (1.3.7 Released 2011-02-19) - provides support for forms and sessions; used to implement web2ldap
 * [[WebStack]] (1.2.7 Released 2007-10-29) - very lightweight, requiring layers of extra technology (such as [[http://www.python.org/pypi/XSLTools|XSLTools]] and others) to match full-stack frameworks in feature comparisons

=== Basic Frameworks Providing Templating ===

 * [[Albatross]] (1.40 Released 2010-03-15) a small and flexible Python toolkit for developing highly stateful Web applications.
 * [[Aquarium]] (2.2.1 Released 2005-04-21) offers convenient libraries, tight integration with Cheetah, adaptors for various Web environments
 * [[http://divmod.org/trac/wiki/DivmodNevow|Divmod Nevow]] (0.9.0 Released 2006-06-12) a comprehensive library including a resource model encouraging the separation of application and presentation logic, a markup system with support for designer-friendly XHTML templates and pure-Python templates, and a robust AJAX-like API ([[http://divmod.org/trac/wiki/DivmodNevow/Athena|Divmod Athena]]) which supports the creation of highly dynamic Web pages in a structured manner.
 * [[Flask]] (v0.7.2 released 2011-07-07) is a microframework based on Werkzeug, Jinja2, and good intentions. It's easy to set up, comes with a built-in development server, integrated support for unit-testing, is 100% WSGI 1.0 compliant, Unicode-based, and is extensively documented.
 * [[JOTWeb2]] (1.10 Released 2005-12-30) developing dynamic Web applications using HTML and TAL/TALES/METAL for templating
 * [[http://nick.borko.org/pse/index.html|Python Servlet Engine]] (3.0.4 Released 2006-02-17) PSE parses your templates into byte compiled "servlets" to produce Web pages that run fast
 * [[http://pylonsproject.org|Pyramid]] (1.2a6 Released 2011-09-06) a small, fast, down-to-earth, open source Python web development framework. It makes real-world web application development and deployment more fun, more predictable, and more productive.  Pyramid is a A Pylons Project, and is the successor to the Pylons web framework.
 * [[http://bfg.repoze.org/|Repoze.bfg]] (1.3) BFG is a "pay only for what you eat" Python web framework . BFG is a Python web application framework based on WSGI. BFG is also referred to as repoze.bfg. Ancestor of (and supplanted by) Pyramid.
 * [[http://www.mems-exchange.org/software/quixote/|Quixote]] (2.5 Released 2007-11-16) Allows developers to develop dynamic Web sites while using as much of their existing Python knowledge as possible
 * [[http://spiked.sourceforge.net/|Spiked]] (0.1.1 Released 2009-04-04) - web development framework built on a top of Twisted and Cheetah.
 * [[http://packages.python.org/weblayer/|weblayer]] (0.4 Released 2011-01-18) - weblayer is a lightweight, componentised Python package for writing web applications.

== Discontinued/Inactive Frameworks ==

The following frameworks are either discontinued, in that their developers may have stated that they no longer maintain the code, or appear to be inactively developed or maintained, in that the Web site for the project has remained unchanged for an extended period of time.

 * [[4Suite]] (the server product seems to receive relatively infrequent updates and the site is often down)
 * [[http://wiki.python.org/moin/Crusader|Crusader]] is a powerful application server for Python based upon a scalable, extensible and easy-to-use general purpose server framework.
 * [[http://www.stackworks.net/view.php/cymbeline/index.html|Cymbeline]] (1.3.1 Released 2005-12-09) an application server framework, including functionality such as DB and arbitrary object pooling, Web servers, persistant object repository, and a text console
 * [[maki]] (developers no longer use the product)
 * [[http://www.ciobriefings.com/psp/|Python Server Pages]], or PSP (old Web site from 1999)
 * [[http://snakelets.sourceforge.net/|Snakelets]] (1.50 Released 2008-10) simple-to-use Python Web application server. Announced as discontinued upon release of version 1.50.
 * [[http://trac.pytan.com/|Spark]] (0.2.1 Released 2006-9-15) Fast and lightweight Web kit. Supports mod_python, WSGI, Twisted.  (2010-03-15, site hasn't responded for a week or so, seems dead).
 * [[http://robinparmar.com/wasp.html|Wasp]] (2.00 Released 2007.07) - supports command-line, CGI and embedded web server modes, with templating, session mechanism and other modules emphasizing ease of use and familiar paradigms.  (2010-03-15, website indicates that it is no longer active: "I AM SORRY BUT WASP WILL NOT BE RETURNING.  I simply have no time for this venture, seeing as how I am working towards my masters...")
 * [[http://pyroxide.org/|Pyroxide]] is built atop Apache's mod_python. It uses the MVC (model-view-controller) pattern and other classic object oriented patterns throughout. It abstracts the mod_python layer presenting a very sensible object oriented framework so that the developer deals with HTTP Requests, HTTP Responses, Page Controllers, Views and domain model objects. It integrates very well with AJAX frameworks such as Prototype and Mochikit.  It comes with an elegant ORM framework and runs with Zope Page Templates ([[http://www.owlfish.com/software/simpleTAL/|Simpletal]] project) out of the box.  (site says: "Please note that this project is dead" and directs people to Django and/or Pylons)

== Books and Articles ==

 * Steve Holden wrote a book on [[http://pydish.holdenweb.com/pwp/|Python Web Programming]]. The book from John Goerzen, [[http://www.apress.com/book/bookDisplay.html?bID=363|Foundations of Python Network Programming]], can also be useful. O'Reilly's [[http://www.oreilly.com/catalog/python3/|Programming Python 3rd Edition]] has 500 pages on Internet programming, including 250 on Web scripting. Finally, check out the Web Programming chapter in [[http://corepython.com|Core Python Programming]] by Wesley Chun -- there is also a small section elsewhere on Web APIs.
 * [[http://www.tossed.org/modules.php?name=News&amp;amp;file=article&amp;amp;sid=12|Developing With Mod_Python]] - an article on Mod_Python programming with Cheetah Templates and MySQL.  Contains code samples.
 * The [[http://benjiyork.com/quick_start|Zope 3 Quick Start Guide]] gives a short introduction to Zope 3.

== Content Management Systems ==

Content management systems (CMS) often allow you to build application like functionality upon them and typically provide many of the facilities seen in full-stack frameworks. See ContentManagementSystems for more details.

== Web Components ==

Some frameworks promote interoperable components for things like templating/output and authentication/authorization, and so you might see users of different frameworks actually using the same component or library. See WebComponents for details of such components.

== Web Client Frameworks ==

In contrast to server-oriented frameworks which may offer AJAX (asynchronous !JavaScript and XML) support by serving pre-packaged (inflexible and highly specific but otherwise very useful) !JavaScript components, and offering server-side support for requests made by such !JavaScript components, Web client frameworks take more direct advantage of the dynamic capabilities of browser engines.  Ways in which the full potential of browser engines can be realised are, for example, by compiling Python code into !JavaScript or by embedding a Python interpreter into the Web browser itself.  In some cases, Web browser engines can be run within separate customised applications rather than in a "web browser" per se. See [[WebBrowserProgramming|Web Browser Programming]] for details.


== Editorial Note ==

The above lists should be arranged in ascending alphabetical order - please respect this when adding new solutions. When specifying release dates please use the format YYYY-MM-DD.

Some special notes to contributors to this page who like to assume an advocacy position when "reorganising" the content:

 * '''Do not''' remove editorial guidelines: when people do this it not only indicates that they do not care about such guidelines, but it also leads others to believe that the page never had any structure or purpose.
 * If you must change the categories used on this page, at least attempt to assign all frameworks to meaningful categories. '''Do not''' invent special categories in order to elevate the profile of certain projects. '''Do not''' merge categories and put frameworks into a miscellaneous category.
 * '''Do not''' add links to projects unless they are Web frameworks. Instead, use the [[WebComponents]], [[WebServers]], [[Templating]] pages, or any page referenced by [[WebProgramming]].
 * Some frameworks are not actively developed or maintained. '''Do not''' just move entries into the "Discontinued/Inactive Frameworks" section without at least doing some investigation first.

And some basic editing advice: use the preview button when making edits, rather than leaving tens of micro-changes in the history.
