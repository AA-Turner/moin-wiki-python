= Web Frameworks for Python =
A Web framework is a collection of packages or modules which allow developers to write Web applications (see WebApplications) or services without having to handle such low-level details as protocols, sockets or process/thread management.

The majority of Web frameworks are exclusively server-side technology, although, with the increased prevalence of AJAX, some Web frameworks are beginning to include AJAX code that helps developers with the particularly tricky task of programming (client-side) the user's browser. At the extreme end of the client-side Web Frameworks is technology that can use the web browser as a full-blown application execution environment (a la gmail for example): see [[WebBrowserProgramming|Web Browser Programming]] for details.

As a developer using a framework, you typically write code which conforms to some kind of conventions that lets you "plug in" to the framework, delegating responsibility for the communications, infrastructure and low-level stuff to the framework while concentrating on the logic of the application in your own code. This "plugging in" aspect of Web development is often seen as being in opposition to the classical distinction between programs and libraries, and the notion of a "mainloop" dispatching events to application code is very similar to that found in [[GuiProgramming|GUI programming]].

Generally, frameworks provide support for a number of activities such as interpreting requests (getting form parameters, handling cookies and sessions), producing responses (presenting data as HTML or in other formats), storing data persistently, and so on. Since a non-trivial Web application will require a number of different kinds of abstractions, often stacked upon each other, those frameworks which attempt to provide a complete solution for applications are often known as '''full-stack''' frameworks in that they attempt to supply components for each layer in the stack.

Many frameworks now provide an element of customization in their support for the above activities and abstractions, utilizing [[WebComponents|components]] in that they provide abstractions only for certain specific things. As a result, it can be possible for you to build your own full-stack framework almost entirely from existing components.

== Popular Full-Stack Frameworks ==
A web application may use a combination of a base HTTP application server, a storage mechanism such as a database, a template engine, a request dispatcher, an authentication module and an AJAX toolkit. These can be individual components or be provided together in a high-level framework.

These are the most popular high-level frameworks. Many of them include components listed on the WebComponents page.
||Name ||Latest version ||Latest update date ||description ||
||[[https://www.djangoproject.com/|Django]] ||2.2.7 (LTS) ||2019-11-04 ||The Web framework for perfectionists (with deadlines). Django makes it easier to build better Web apps more quickly and with less code. Django is a high-level Python Web framework that encourages rapid development and clean, pragmatic design. It lets you build high-performing, elegant Web applications quickly. Django focuses on automating as much as possible and adhering to the DRY (Don't Repeat Yourself) principle. The last release supporting Python 2.7 is 1.11 LTS. See [[Django]] ||
||[[https://www.turbogears.org/|TurboGears]] ||2.4.2 ||2019-10-20 ||the rapid Web development  webframework you've been looking for. Combines [[http://www.sqlalchemy.org/|SQLAlchemy (Model)]] or [[http://ming.readthedocs.io/en/latest/|Ming (MongoDB Model)]], [[https://kajiki.readthedocs.io/|Kajiki (View)]], [[http://repoze.org/|Repoze]] and [[https://tw2core.readthedocs.io|ToscaWidgets2]]. Create a database-driven, ready-to-extend application in minutes. All with designer friendly templates, easy AJAX on the browser side and on the server side, with an incredibly powerful and flexible Object Relational Mapper (ORM), and with code that is as natural as writing a function. After reviewing the [[http://turbogears.readthedocs.org/en/latest/|Documentation]], check out [[http://turbogears.readthedocs.org/en/latest/turbogears/starting.html#tutorials|the Tutorials]] ||
||[[https://www.web2py.com|web2py]] ||2.18.5 ||2019-04-07 ||* Python 2.7, Python 3.5+, !PyPy * All in one package with no further dependencies. Development, deployment, debugging, testing, database administration and maintenance of applications can be done via the provided web interface, but not required. * web2py has no configuration files, requires no installation, can be run off a USB drive. * web2py uses Python for the Model, View and the Controller * Built-in ticketing system to manage errors * Internationalization engine and pluralisation, caching system * Flexible authentication system (LDAP, MySQL, janrain etc) * NIX(Linux, BSD), Windows, Mac OSX, tested on EC2, Webfaction * works with MySQL, PostgreSQL, SQLite , Firebird, Oracle, MSSQL and the Google App Engine via an ORM abstraction layer. * Includes libraries to handle HTML/XML, RSS, ATOM, CSV, RTF, JSON, AJAX, XMLRPC, WIKI markup. * Production ready, capable of upload/download of very large files * Emphasis on backward compatibility. ||




See below for some other arguably less popular full-stack frameworks!

== Other Full-Stack Frameworks ==
These frameworks also provide most, if not all of the technology stack. However, they are regarded as not being as popular as the frameworks listed above.
||Name ||Latest version ||Latest update date ||description ||
||[[http://www.cubicweb.org/|CubicWeb]] ||3.26.4 ||2018-04-23 ||a semantic web application framework featuring a query language, a selection+view mechanism, multiple databases, security, workflows, reusable components, etc. ||
||[[https://pypi.org/project/django-hotsauce/|Django-hotsauce]] ||1.0.1 ||2019-09-28 ||Scalable and heterogeneous web toolkit sitting on top of Django and others. Django-hotsauce is a pragmatic fork of Django 1.x API to develop scalable and extensible WSGI applications in Python. [[https://bitbucket.org/tkadm30/django-hotsauce|Source code]]  [[https://www.isotopesoftware.ca/wiki/DjangoHotsauce|Development Wiki]] ||
||[[http://priestc.github.io/giotto/|Giotto]] ||0.10.5 ||2013-01-18 ||a strict MVC framework that strictly separated Model, View and Controller elements so that Designers, Web Developers, and Sysadmins can work independently of each other. Giotto includes controller modules that allow applications to be built on top of the web, irc or the command line. ||
||[[https://pypi.python.org/pypi/grok/|Grok]] ||3.1 ||2018-05-09 ||built on the existing Zope 3 libraries, but aims to provide an easier learning curve and a more agile development experience. It does this by placing an emphasis on convention over configuration and DRY (Don't Repeat Yourself). ||
||[[https://github.com/Pylons/pylons|Pylons]] ||1.0.3 ||2018-01-12 ||a lightweight Web framework emphasizing flexibility and rapid development. It combines the very best ideas from the worlds of Ruby, Python and Perl, providing a structured but extremely flexible Python Web framework. It was also one of the first projects to leverage the emerging WSGI standard, which allows extensive re-use and flexibility but only if you need it. Out of the box, Pylons aims to make Web development fast, flexible and easy. Pylons is built on top of Paste (see below). NOTE: Pylons the web framework is in maintenance-only status after merging with [[https://trypyramid.com/|Pyramid]] to form the [[https://pylonsproject.org|Pylons Project]] to develop web technologies using Python. ||
||[[http://www.reahl.org/|Reahl]] ||4.0.5 ||2018-12-11 ||With Reahl, programming is done purely in Python, using concepts familiar from GUI programming - like reusable Widgets and Events. ||
||[[https://websauna.org/|Websauna]] ||1.0a13 ||2019-06-26 ||A full stack Python framework for building consumer and business web applications. Websauna builds upon Pyramid, SQLAlchemy, and other mature open source components. Jupyter Notebook is directly integrated to Websauna. Analyzing website data and building interactive visualizations is within a reach of one click. Websauna needs Python 3.5.2 or newer. ||
||[[https://bitbucket.org/akorn/wheezy.web|wheezy.web]] ||0.1.485 ||2015-05-24 ||A lightweight, [[http://mindref.blogspot.com/2012/09/python-fastest-web-framework.html|high performance]], high concurrency WSGI web framework with the key features to ''build modern, efficient web''. Requires Python 2.4-2.7 or 3.2+. MVC architectural pattern ([[http://en.wikipedia.org/wiki/Web_application_framework#Push-based_vs._pull-based|push]]-based). Includes [[https://bitbucket.org/akorn/wheezy.routing|routing]], [[https://bitbucket.org/akorn/wheezy.validation|model update/validation]], [[https://bitbucket.org/akorn/wheezy.security|authentication/authorization]], [[http://packages.python.org/wheezy.http/userguide.html#content-cache|content]] [[https://bitbucket.org/akorn/wheezy.caching|caching]] with [[http://packages.python.org/wheezy.caching/userguide.html#cachedependency|dependency]], xsrf/resubmission protection, AJAX+JSON, i18n (gettext), middlewares, and more. Template engine agnostic (integration with: jinja2, mako, tenjin and [[https://bitbucket.org/akorn/wheezy.template|wheezy template]]) plus [[https://bitbucket.org/akorn/wheezy.html|html widgets]]. ||
||[[https://pypi.python.org/pypi/Zope2|Zope2]] ||4.0 ||2019-05-10 ||<style="text-align:center" |2>Being the grandaddy of Python web frameworks, Zope has grown into a family of frameworks over the years. Zope 1 was released in 1999. Zope 2 is both a web framework and a general purpose application server, today it is primarily used by ContentManagementSystems. Zope 3 is both a standalone framework and a collection of related libraries, which are also included with newer releases of Zope 2. All of the Zope frameworks include the ZODB, an object database for Python. ||
||[[https://pypi.org/project/Zope|Zope3]] ||4.1.2 ||2019-09-19 ||




 * [[https://github.com/stanislavfeldman/kiss.py|Kiss.py]] (1.0.0 Released 2014-06-23) MVC web framework in Python with Gevent, Jinja2, Werkzeug.

 * [[http://www.lino-framework.org|Lino]] (19.11.0 Released 2019-11-11), a framework for creating customized enterprise-level Rich Internet Applications using [[http://www.sencha.com/products/extjs|Sencha ExtJS]] and [[https://www.djangoproject.com|Django]].

 * [[http://www.nagare.org|Nagare]] (0.5.1 Released 2018-01-25) - a new approach for the rapid development of web applications, thanks to advanced features like truely autonomous and reusable components, continuation, programmatic HTML/XML, automatic AJAX rendering and database ORM.

 * [[https://pypi.python.org/pypi/Pylatte|Pylatte]] (1.0 Released 2013-02-03) - Pylatte is Python3-based web framework. Pylatte is used pyl code to make web site. pyl code is compose to python and HTML. so pyl code seem like php code. easy to learn, easy to run.

 * [[https://pypi.python.org/pypi/tipfy|Tipfy]] (1.0b3 Released 2011-07-18) tipfy is a small but powerful framework made specifically for Google App Engine.

 * [[http://www.tornadoweb.org/|Tornado]] (6.0.3 Released 2019-06-23) is an open source version of the scalable, non-blocking web server and and tools that power FriendFeed (acquired by Facebook with this project released as open source).

 * [[https://github.com/Bespohk/watson-framework|watson-framework]] (3.5.4 Released 2019-10-07, initial release 2012-11-26) A component based WSGI web framework giving you the tools needed to build your web apps quickly and easily:
  * Requires Python 3.3+.
  * MVC based architecture
  * Dependency injection
  * Event driven

 * [[https://webapp2.readthedocs.io/en/latest/|webapp2]] (3.0.0b1 Released 2016-09-13) - a lightweight framework compatible with Google App Engine’s webapp: it extends webapp to add better URI routing and exception handling, a full featured response object and a more flexible dispatching mechanism. Also offers sessions, localization, internationalization, domain and subdomain routing and secure cookies. Can be used outside of App Engine, independently of the App Engine SDK.

 * [[http://www.webbot.ws/|WebBot]] (0.5.0 Released 2013-04-10) - A QT inspired web framework that includes a graphical interface builder, AJAX abstraction, and integration support for Google's AppEngine.

 * [[https://pypi.python.org/pypi/WebCore|WebCore]] (2.0.3 Released 2016-09-25) A full-stack, light-weight and efficient web development framework. Web applications as simple as a single file, or as structured as you want. Utilizes popular WSGI components, ORMs, etc. without locking you in, and offers a unique init.d-like middleware configuration.

 * [[http://webpy.org/|web.py]] (0.39 Released 2018-02-28) Think about the ideal way to write a Web app. Write the code to make it happen.

 * [[https://cito.github.io/w4py/|Webware for Python]] (1.2.2 Released 2019-08-04) is a suite of Python packages and tools for developing object-oriented, web-based applications.

 * [[https://palletsprojects.com/p/werkzeug/|Werkzeug]] (0.16.0 Released 2019-09-19) is Unicode-aware, includes a powerful debugger, full featured request and response objects, HTTP utilities to handle entity tags, cache control headers, HTTP dates, cookie handling, file uploads, a powerful URL routing system and a bunch of community contributed addon modules.

 * [[http://whiff.sourceforge.net/|WHIFF]] (1.1 Released 2013-07-09) WHIFF is a collection of support services for WSGI/Python web applications which allows applications to be composed by "dropping" dynamic pages into container directories. It automatically includes support for advanced features such as AJAX, jQueryUI widgets, Flash based charts and more. Extensive documentation and tutorial essays.

== Popular Non Full-Stack Frameworks ==
These projects provide the base "application server", either running as its own independent process, upon Apache or in other environments. On many of these you can then introduce your own choice of templating engines and other components to run on top, although some may provide technologies for parts of the technology stack.

 * [[http://bottlepy.org/|Bottle]] (0.12.17 Released 2019-06-23) is a fast and simple micro-framework for small web-applications. It offers request dispatching (Routes) with url parameter support, Templates, key/value Databases, a build-in HTTP Server and adapters for many third party WSGI/HTTP-server and template engines. All in a single file and with no dependencies other than the Python Standard Library.

 * CherryPy (18.4.0 Released 2019-11-03) is a pythonic, object-oriented HTTP framework. CherryPy powered web applications are in fact stand-alone Python applications embedding their own multi-threaded web server. TurboGears, web2py (see above) also use CherryPy.

 * [[http://flask.pocoo.org/|Flask]] (1.1.1 Released 2019-07-08) is “a microframework for Python based on Werkzeug, Jinja 2 and good intentions.” Includes a built-in development server, unit tesing support, and is fully Unicode-enabled with RESTful request dispatching and WSGI compliance.

 * [[https://github.com/hugapi/hug|Hug]] (2.6.0 Released 2019-08-29) Embrace the APIs of the future. Hug aims to make developing APIs as simple as possible, but no simpler. It's one of the first fully future looking frameworks: only supporting Python3+.

 * [[https://trypyramid.com/|Pyramid]] (1.10.4 Released 2019-04-15) a small, fast, down-to-earth, open source Python web development framework. It makes real-world web application development and deployment more fun, more predictable, and more productive. Pyramid is a Pylons Project, and is the successor to the Pylons web framework.

== Other Non Full-Stack Frameworks ==
 * [[Albatross]] (1.42 Released 2011-04-27) a small and flexible Python toolkit for developing highly stateful Web applications; deploys to CGI, FastCGI, and ModPython servers.

 * [[Aquarium]] (2.3 Released 2007-01-01) offers convenient libraries, tight integration with Cheetah, adaptors for various Web environments; deploys to CGI, FastCGI, and ModPython servers.

 * [[https://github.com/gertcuykens/wsgi-design|AppWsgi]] - illustration of building your own ajax framework running on a mod_wsgi apache server

 * [[http://bluebream.zope.org/|BlueBream]] (1.0 Released 2011-01-18) is a web framework best suited for medium to large projects split into many interchangeable and reusable components. Formerly known as Zope 3, and based on Zope Toolkit (ZTK).

 * [[https://pypi.python.org/pypi/bobo|Bobo]] (2.4.0 Released 2017-05-17) is a light-weight framework for creating WSGI web applications. It's goal is to be easy to use and remember. It addresses 2 problems: 1) mapping URLs to objects and 2) calling objects to generate HTTP responses. Bobo doesn't have a templating language, a database integration layer, or a number of other features that are better provided by WSGI middle-ware or application-specific libraries. Bobo builds on other frameworks, most notably WSGI and [[https://webob.readthedocs.io/en/stable/|WebOb]].

 * [[https://bocadilloproject.github.io|Bocadillo]] (0.18.3 Released 2019-10-22) is the Python web framework filled with asynchronous salsa. This async-first framework ships with carefully chosen included batteries which help you build performant web apps and services with minimal setup. Bocadillo has core support for both HTTP and WebSocket and is built on top of Starlette and Uvicorn. Python 3.6+ only. (Note: Bocadillo is now UNMAINTAINED. Users are recommended to migrate to a supported alternative, such as Starlette or FastAPI.)

 * [[http://circuitsframework.com/|circuits]] (3.2 Released 2016-06-02) is a component based, event-driven light weight and high performance HTTP/WSGI framework. circuits has some similar features to CherryPy (see above), such as CherryPy's URL mapping. circuits applications are stand-alone applications with a high performance, multi-process web server with great concurrent scalability with full support for WSGI and deployment with other web servers.

 * [[https://github.com/mahmoud/clastic|Clastic]] (19.0.0 released 2019-03-07) is a functional web microframework that streamlines explicit development practices while eliminating global state. It's built on top of Werkzeug, so it's immediately familiar to Flask users, and WSGI, so it deploys the same as other Python web applications. It has a powerful and intuitive routing system, built-in development server, and metadata application. See [[https://www.paypal-engineering.com/2015/03/17/introducing-support/|this PayPal Engineering post]] for examples and screenshots.

 * [[https://pypi.python.org/pypi/Nevow|Divmod Nevow]] (0.14.4 Released 2017-06-13) a comprehensive library including a resource model encouraging the separation of application and presentation logic, a markup system with support for designer-friendly XHTML templates and pure-Python templates, and a robust AJAX-like API ([[http://divmod.readthedocs.io/en/latest/products/nevow/athena/|Divmod Athena]]) which supports the creation of highly dynamic Web pages in a structured manner.

 * [[https://falconframework.org/|Falcon]] (2.0.0 Released 2019-04-26) - lightweight, API-oriented framework designed to be fast. Falcon powers the popular [[https://github.com/timothycrosley/hug|Hug]] web framework. Supports Python 2.7 and 3.

 * [[https://github.com/pyGrowler/Growler|Growler]] (0.8.0 Released 2016-09-07) - A micro web-framework built atop asyncio coroutines and chained middleware, that provides an easy way to implement complex applications.

 * [[http://github.com/allisson/gunstar/|Gunstar]] (0.2.2 released 2013-09-06) is a microframework based on WebOb and Jinja2.

 * [[https://github.com/twisted/klein|Klein]] (19.6.0 released 2019-06-07) is a micro-framework for developing production-ready web services with Python. It is 'micro' in that it has an incredibly small API similar to Bottle and Flask. It is not 'micro' in that it depends on things outside the standard library. This is primarily because it is built on widely used and well tested components like Werkzeug and Twisted.

 * [[http://morepath.readthedocs.io/en/latest/index.html|MorePath]] (0.18.2 released 2019-01-22) Morepath is a Python web microframework, with super powers. It uses routing, but the routing is to models. Morepath is model-driven and flexible, which makes it expressive.

 * [[http://pycnic.nullism.com|Pycnic]] (0.0.9 Released 2016-05-20) - A web framework that is object oriented and optimized for JSON APIs. Pycnic only includes the tools needed for web API creation allowing for a lighter footprint than most other frameworks. Supports Python 2.7 and 3.

 * [[http://pythonpaste.org/|Python Paste]] (1.7.5.1 Released 2010-09-20) brings consistency to Python Web development and Web application installation, providing tools for both developers and system administrators. Also, Pylons (see above) is built on top of Paste.

 * [[http://www.stroeder.com/pylib/PyWebLib/|PyWebLib]] (1.3.13 Released 2017-01-18) - provides support for forms and sessions; used to implement web2ldap

 * [[https://gitlab.com/pgjones/quart|Quart]] (0.10.0 Released 2019-08-30) is a Python web microframework based on Asyncio. It is intended to provide the easiest way to use the asyncio functionality in a web context, especially with existing Flask apps. This is possible as Quart has the same API as Flask.

 * [[http://quixote.ca/|Quixote]] (3.1 Released 2019-04-24) Allows developers to develop dynamic Web sites while using as much of their existing Python knowledge as possible

 * [[https://github.com/taoufik07/responder|Responder]] (2.0.3 released 2019-10-20) is a web service framework, that lets you easily serve a ASGI app, with a production static files server (WhiteNoise) pre-installed, jinja2 templating (without additional imports), and a production webserver based on uvloop, serving up requests with gzip compression automatically.

 * [[https://github.com/huge-success/sanic|Sanic]] (19.9.0 Released 2019-10-12) - A Flask-like Python 3.5+ web server that's written to go fast.

 * [[https://github.com/aTechs/Spinne/|Spinne]] (1.0.1 Released 2014-05-17) - A simple, easy and fast micro web framework for python 3.x.

 * [[https://pythonhosted.org/weblayer/|weblayer]] (0.4.3 Released 2011-02-03) - weblayer is a lightweight, componentised Python package for writing web applications.

 * WebStack (1.2.7 Released 2007-10-29) - very lightweight, requiring layers of extra technology (such as [[https://pypi.python.org/pypi/XSLTools?|XSLTools]] and others) to match full-stack frameworks in feature comparisons

 * [[https://pypi.python.org/pypi/WSGIServlets|WSGIServlets]] (1.0.1 Released 2011-11-09) - lightweight, object-oriented framework that doesn't get in your way. Intuitive class hierarchy makes coding WSGI applications, middleware or full-blown CMS and frameworks a simple task by providing developers a rich set of tools out-of-the-box. A link to a live tutorial (written with WSGIServlets) is available on the project's homepage. The tutorial is also included in the distribution along with a complete API reference manual.

== Discontinued/Inactive Frameworks ==
The following frameworks are either discontinued, in that their developers may have stated that they no longer maintain the code, or appear to be inactively developed or maintained, in that the Web site for the project has remained unchanged for an extended period of time.

 * [[4Suite]] (the server product seems to receive relatively infrequent updates and the site is often down)

 * [[http://wiki.python.org/moin/Crusader|Crusader]] is a powerful application server for Python based upon a scalable, extensible and easy-to-use general purpose server framework.

 * [[http://www.stackworks.net/view.php/cymbeline/index.html|Cymbeline]] (1.3.1 Released 2005-12-09) an application server framework, including functionality such as DB and arbitrary object pooling, Web servers, persistant object repository, and a text console. As of 2013-08-13, this is a dead link.

 * [[http://open.thusa.net/enamel/|Enamel]] - an abstraction layer over Twisted, Nevow, Formal and SQLAlchemy to converge their concepts under a single framework (''Link no longer works'')

 * GAE framework - (1.0 PRE, Released 2011-05-84) is a Python web framework that's designed for high-load web sites build on Google App Engine; Note: '''The project website appears to have been closed down: http://www.gaeframework.com'''

 * [[http://gizmojo.org/|Gizmo(QP)]] (0.7 Released 2007-04-17) extends QP (see below) adding functionality to help with building rich and exacting web interfaces. Includes a Form module that supports (redundant) automatically generated client-side field validation as well as additional json callbacks.

 * [[https://pypi.python.org/pypi/Glashammer|Glashammer]] (0.2.1 Released 2009-03-31) is a full stack Python web framework with an emphasis on simplicity, flexibility, and extensibility. It is built atop excellent components and reinvents zero wheels. WSGI, routing, templating, forms, data, plugins, config, events, SQLAlchemy, Storm, Couchdb, OpenID, AppEngine, Jquery, etc.

 * [[https://github.com/PierreQuentel/Karrigell|Karrigell]] (3.1.1 Released 2010-09-02) is a flexible Python web framework, with a clear and intuitive syntax. It is independent from any database, ORM or templating engine, and lets the programmer choose between a variety of coding styles. A version for Python3.2+ (4.3.10 Released 2013-05-26) --(is)-- was available at http://code.google.com/p/karrigell/

 * [[maki]] (developers no longer use the product)

 * [[http://www.innoscript.org|Porcupine]] (0.6 Released 2009-07-18) provides everything you need for building modern data-centric Web 2.0 applications, including the QuiX Javascript toolkit and the Porcupine Object Query Language (POQL). Requires Python 2.5 or later - not including 3.0 yet.

 * [[http://pyroxide.org/|Pyroxide]] is built atop Apache's mod_python. It uses the MVC (model-view-controller) pattern and other classic object oriented patterns throughout. It abstracts the mod_python layer presenting a very sensible object oriented framework so that the developer deals with HTTP Requests, HTTP Responses, Page Controllers, Views and domain model objects. It integrates very well with AJAX frameworks such as Prototype and Mochikit. It comes with an elegant ORM framework and runs with Zope Page Templates ([[http://www.owlfish.com/software/simpleTAL/|Simpletal]] project) out of the box. (site says: "Please note that this project is dead" and directs people to Django and/or Pylons)

 * [[http://www.ciobriefings.com/psp/|Python Server Pages]], or PSP (old Web site from 1999, dead link)

 * [[http://nick.borko.org/pse/index.html|Python Servlet Engine]] (3.0.4 Released 2006-02-17) PSE parses your templates into byte compiled "servlets" to produce Web pages that run fast. (site says: "NOTE: The PSE Project is officially closed as of 3/28/2010")

 * [[https://www.mems-exchange.org/software/qp/|QP]] (2.2 Released 2009-08-25) a package for defining and running multiple Web applications that are based on Durus for persistence, offering standard persistent Session and User classes, easy interactive database sessions, and QPY for safely assembling html. Packages require and run on Python >= 2.4 and yes that includes Python 3.x with the same code base!

 * [[http://bfg.repoze.org/|Repoze.bfg]] (1.3) BFG is a "pay only for what you eat" Python web framework . BFG is a Python web application framework based on WSGI. BFG is also referred to as repoze.bfg. Ancestor of (and supplanted by) Pyramid.

 * SkunkWeb (3.4.0 Released 2004-09-10)

 * [[http://snakelets.sourceforge.net/|Snakelets]] (1.50 Released 2008-10) simple-to-use Python Web application server. Announced as discontinued upon release of version 1.50. As of 2013-08-13, dead link

 * [[http://trac.pytan.com/|Spark]] (0.2.1 Released 2006-9-15) Fast and lightweight Web kit. Supports mod_python, WSGI, Twisted. (2010-03-15, site hasn't responded for a week or so, seems dead; 2013-08-13, dead link).

 * [[http://spiked.sourceforge.net/|Spiked]] (0.1.3 Released 2010-01-23) - web development framework built on a top of Twisted and Cheetah.

 * [[Spyce]] (2.1.3 Released 2006-11-17)

 * [[http://robinparmar.com/wasp.html|Wasp]] (2.00 Released 2007.07) - supports command-line, CGI and embedded web server modes, with templating, session mechanism and other modules emphasizing ease of use and familiar paradigms. (2010-03-15, website indicates that it is no longer active: "I AM SORRY BUT WASP WILL NOT BE RETURNING. I simply have no time for this venture, seeing as how I am working towards my masters..."; 2013-08-13, dead link)

== Books and Articles ==
 * Steve Holden wrote a book on [[http://pydish.holdenweb.com/pwp/|Python Web Programming]]. The book from John Goerzen, [[http://www.apress.com/book/bookDisplay.html?bID=363|Foundations of Python Network Programming]], can also be useful. O'Reilly's [[http://www.oreilly.com/catalog/python3/|Programming Python 3rd Edition]] has 500 pages on Internet programming, including 250 on Web scripting. Finally, check out the Web Programming chapter in [[http://corepython.com|Core Python Programming]] by Wesley Chun -- there is also a small section elsewhere on Web APIs.

 * The [[http://benjiyork.com/quick_start|Zope 3 Quick Start Guide]] gives a short introduction to Zope 3.

== Content Management Systems ==
Content management systems (CMS) often allow you to build application like functionality upon them and typically provide many of the facilities seen in full-stack frameworks. See ContentManagementSystems for more details.

== Web Components ==
Some frameworks promote interoperable components for things like templating/output and authentication/authorization, and so you might see users of different frameworks actually using the same component or library. See WebComponents for details of such components.

== Web Client Frameworks ==
In contrast to server-oriented frameworks which may offer AJAX (asynchronous JavaScript and XML) support by serving pre-packaged (inflexible and highly specific but otherwise very useful) JavaScript components, and offering server-side support for requests made by such JavaScript components, Web client frameworks take more direct advantage of the dynamic capabilities of browser engines. Ways in which the full potential of browser engines can be realised are, for example, by compiling Python code into JavaScript or by embedding a Python interpreter into the Web browser itself. In some cases, Web browser engines can be run within separate customised applications rather than in a "web browser" per se. See [[WebBrowserProgramming|Web Browser Programming]] for details.

== Editorial Note ==
The above lists should be arranged in ascending alphabetical order - please respect this when adding new solutions. When specifying release dates please use the format YYYY-MM-DD.

Some special notes to contributors to this page who like to assume an advocacy position when "reorganising" the content:

 * '''Do not''' remove editorial guidelines: when people do this it not only indicates that they do not care about such guidelines, but it also leads others to believe that the page never had any structure or purpose.

 * If you must change the categories used on this page, at least attempt to assign all frameworks to meaningful categories. '''Do not''' invent special categories in order to elevate the profile of certain projects. '''Do not''' merge categories and put frameworks into a miscellaneous category.

 * '''Do not''' add links to projects unless they are Web frameworks. Instead, use the WebComponents, WebServers, [[Templating]] pages, or any page referenced by WebProgramming.

 * Some frameworks are not actively developed or maintained. '''Do not''' just move entries into the "Discontinued/Inactive Frameworks" section without at least doing some investigation first.

And some basic editing advice: use the preview button when making edits, rather than leaving tens of micro-changes in the history.
