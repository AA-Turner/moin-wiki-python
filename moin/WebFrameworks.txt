#pragma section-numbers off

= Web Frameworks for Python =

A Web framework is a collection of packages or modules which allow developers to write Web applications (see WebApplications) or services without having to handle such low-level details as protocols, sockets or process/thread management. 

As a developer using a framework, you typically write code which conforms to some kind of conventions, with the benefit being that most of the code can be concerned with the logic of the application, rather than working out how to process incoming network messages, spawn processes, work out which part of the application should be invoked, and so on.

Some packages can be considered 'components' in that they provide abstractions only for certain things (eg. incoming requests, outgoing responses, state handling).

Some other packages can be described as 'frameworks' as they provide many more abstractions and mechanisms (eg. database access, presentation of Web pages). Since a non-trivial Web application will require a number of different kinds of abstractions, often stacked upon each other, those frameworks which attempt to provide a complete solution for applications are often known as "full-stack" frameworks in that they attempt to supply components for each layer in the stack.

== High Level Full-Stack Frameworks ==

A web application may use a combination of a base HTTP application server, a storage mechanism such as a database, a template engine, a request dispatcher, an authentication module and an AJAX toolkit. These can be individual components or be provided together in a high-level framework.

These are the main high-level frameworks. Many of them include   components listed further down the page. 

 * ["Django"] (0.96 Released 2007-03-23) a high-level Python Web framework that encourages rapid development and clean, pragmatic design
 * [http://pylonshq.com/ Pylons] (0.9.6 Released 2007-08) a lightweight Web framework emphasizing flexibility and rapid development. It combines the very best ideas from the worlds of Ruby, Python and Perl, providing a structured but extremely flexible Python Web framework. It's also one of the first projects to leverage the emerging WSGI standard, which allows extensive re-use and flexibility but only if you need it. Out of the box, Pylons aims to make Web development fast, flexible and easy. Pylons is built on top of Paste (see below).
 * [http://www.turbogears.org/ TurboGears] (1.0 Released 2007-01-03)  the rapid Web development megaframework you've been looking for. Combines ["CherryPy"], Kid, SQLObject and MochiKit. After reviewing the website check out: [http://lucasmanual.com/mywiki/TurboGears QuickStart Manual]
 * [http://www.zope.org/ Zope] (2.10.3 Released 2007-03-25, 3.3.1 Released 2007-01-14) a server for building ContentManagementSystems, intranets, portals, and custom applications.

== Templating Engines ==

Templating engines allow you to separate your application code from the presentation. Many of these engines can be used alone or within a high-level framework.

 * [http://www.myghty.org/ Myghty ] (1.0 Released 2006-01-27) is a Python based templating framework originally based on HTML::Mason
 * [http://www.makotemplates.org/ Mako] is an all-new templating engine which represents the best ideas of Myghty distilled into a completely-rewritten and updated API and syntax.
 * [http://www.thomas-lotze.de/en/software/ophelia/ Ophelia] (0.3 Released 2007-07-06) Generates XHTML pages from TAL templates. This avoids repetitive code, allows the site content to reside in the file system instead of a database, and lets Python scripts make the content dynamic.
 * ["JonsPythonModules"] (1.06 Released 2004-04-11) a set of simple yet powerful multi-threaded object-oriented CGI/FastCGI/mod_python/html-templating modules for Python
 * [http://www.cheetahtemplate.org/ Cheetah] - Cheetah is a Python-powered template engine and code generator. It may be used as a standalone utility or combined with other tools.
 * [http://genshi.edgewall.org/ Genshi] is a Python library that provides an integrated set of components for parsing, generating, and processing HTML, XML or other textual content for output generation on the web.

== HTTP frameworks ==

The packages provide the base 'application server', either running as its own independent process or upon Apache. You can then bring your own applications, templating engines and other components to run on top of it.  

 * ["CherryPy"] (3.0.2 Released 2007-08-07) is a pythonic, object-oriented HTTP framework. CherryPy powered web applications are in fact stand-alone Python applications embedding their own multi-threaded web server.["TurboGears"] (see above) also uses CherryPy.
 * [http://pythonpaste.org/ Python Paste] (1.4 Released 2007-06-26) brings consistency to Python Web development and Web application installation, providing tools for both developers and system administrators. Also, Pylons (see above) is built on top of Paste.
 * [http://www.movatis.com/crusader Crusader] is a powerful application server for Python based upon a scaleable, extensible and easy-to-use general purpose server framework. 
 * ["Karrigell"] (2.3.3 Released 2007-01-15) is a flexible Python web framework, with a clear and intuitive syntax. It is independent from any database, ORM or templating engine, and lets the programmer choose between a variety of coding styles.
 * SkunkWeb (3.4.0 Released 2004-09-10)

== Authorisation toolkits ==

These allow you to add authorisation to your web applications. 

 * [http://authkit.org/ AuthKit] is a WSGI framework that provides a structure for implementing your own authorisation and authentication system. 
 * [http://www.chrisarndt.de/en/software/python/#auth Auth modules] - a module collection for authentication purposes
 * [http://www.voidspace.org.uk/python/modules.shtml#dataenc Dataenc] - allows secure and time limited logins to be encoded into Web pages for use with Web applications
 * [http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/305288 HTTP basic authentication example]

== Request dispatchers ==

A dispatcher takes the requests (i.e. the URL that a user types in) and then provides the response (i.e. the web application that creates the webpage that the user sees).  

 * [http://routes.groovie.org/ Routes] is a Python re-implementation of the Rails routes system for mapping URL's to Controllers/Actions and generating URL's. Routes makes it easy to create pretty and concise URL's that are RESTful with little effort.
 * [http://lukearno.com/projects/selector/ selector] - provides WSGI middleware for "RESTful" mapping of URL paths to WSGI applications.
 * [http://wsgiarea.pocoo.org/colubrid/ Colubrid] is a WSGI publisher which simplifies Python web developement.If you've ever created a WSGI application without a framework of an request handler you know how hard this can be.

== Form handling ==
 
 * [http://formencode.org/ FormEncode] - is a validation and form generation package.  
 * [http://formbuild.org/ FormBuild] - FormBuild is a package designed to help with the generation of HTML form components. 
 * [http://cheeseshop.python.org/pypi/twForms/ twForms] - Web Widgets for building and validating forms.
 
== Content Management Systems ==

Some CMS' allow you to build application like functionality upon them.  See ContentManagementSystems for more details.

== Other Frameworks/components ==

These components are not categorised at the moment, not all are still developed.

 * ["4Suite"] (XML-1.0rc3 Released 2006-08-28)
 * [http://www.stackworks.net/view.php/cymbeline/index.html Cymbeline] (1.3.1 Released 2005-12-09) an application server framework, including functionality such as DB and arbitrary object pooling, Web servers, persistant object repository, and a text console

 * [http://gizmojo.org/ Gizmo(QP)] (0.7 Released 2007-04-17) extends QP (see below) adding functionality to help with building rich and exacting web interfaces. Includes a Form module that supports (redundant) automatically generated client-side field validation as well as additional json callbacks.
 * [https://www.mems-exchange.org/software/qp/ QP] (1.8 Released 2006-08-22) a package for defining and running multiple Web applications that are based on Durus for persistence, offering standard persistent Session and User classes, easy interactive database sessions, and unicode QPY for assembling html.
 * ["Spyce"] (2.1.3 Released 2006-11-17)
 * [http://webpy.org/ web.py] (0.2 Released 2006-11-27) Think about the ideal way to write a Web app. Write the code to make it happen.
 * [http://www.webwareforpython.org/ Webware] (0.9.4 Released 2007-07-07) is a suite of Python packages and tools for developing object-oriented, Web-based applications
 * ["Albatross"] (1.35 Released 2006-06-20) a small and flexible Python toolkit for developing highly stateful Web applications.
 * ["Aquarium"] (2.2.1 Released 2005-04-21) offers convenient libraries, tight integration with Cheetah, adaptors for various Web environments
 * BaseHttpServer (along with successors such as DocXmlRpcServer) can be considered as the original Python Web framework
 * [http://divmod.org/trac/wiki/DivmodNevow Divmod Nevow] (0.9.0 Released 2006-06-12) a comprehensive library including a resource model encouraging the separation of application and presentation logic, a markup system with support for designer-friendly XHTML templates and pure-Python templates, and a robust AJAX-like API ([http://divmod.org/trac/wiki/DivmodNevow/Athena Divmod Athena]) which supports the creation of highly dynamic Web pages in a structured manner.
 * ["JOTWeb2"] (1.10 Released 2005-12-30) developing dynamic Web applications using HTML and TAL/TALES/METAL for templating
 * ["maki"]
  * [http://www.ciobriefings.com/psp/ Python Server Pages], or PSP
 * [http://nick.borko.org/pse/index.html Python Servlet Engine] (3.0.4 Released 2006-02-17) PSE parses your templates into byte compiled "servlets" to produce Web pages that run fast
 * [http://www.stroeder.com/pylib/PyWebLib/ PyWebLib] (1.3.4) - provides support for forms and sessions; used to implement web2ldap
 * [http://www.mems-exchange.org/software/quixote/ Quixote] (2.4 Released 2005-12-13) Allows developers to develop dynamic Web sites while using as much of their existing Python knowledge as possible
 * [http://snakelets.sourceforge.net/ Snakelets] (1.44 Released 2006-06-04) simple-to-use Python Web application server
 * [http://trac.pytan.com/ Spark] (0.2.1 Released 2006-9-15) Fast and lightweight Web kit. Supports mod_python, WSGI, Twisted.
 * [http://robinparmar.com/wasp.html Wasp] (2.00 Released 2007.07) - supports command-line, CGI and embedded web server modes, with templating, session mechanism and other modules emphasizing ease of use and familiar paradigms.
 * ["WebStack"] (1.2.4 Released 2007-06-13) - very lightweight, requiring layers of extra technology (eg. [http://www.python.org/pypi/XSLTools XSLTools] and others) to match full-stack frameworks in feature comparisons

== Books and Articles ==

 * Steve Holden wrote a book on [http://pydish.holdenweb.com/pwp/ Python Web Programming]. The book from John Goerzen, [http://www.apress.com/book/bookDisplay.html?bID=363 Foundations of Python Network Programming], can also be useful. O'Reilly's [http://www.oreilly.com/catalog/python3/ Programming Python 3rd Edition] has 500 pages on Internet programming, including 250 on Web scripting. Finally, check out the Web Programming chapter in [http://corepython.com Core Python Programming] by Wesley Chun -- there is also a small section elsewhere on Web APIs.
 * [http://www.tossed.org/modules.php?name=News&amp;amp;file=article&amp;amp;sid=12 Developing With Mod_Python] - an article on Mod_Python programming with Cheetah Templates and MySQL.  Contains code samples.
 * The [http://benjiyork.com/quick_start Zope 3 Quick Start Guide] gives a short introduction to Zope 3.
