<<TableOfContents>>

== Introduction ==

This is a summary of FSM implementations in Python right now. Licensing
remains unclear.

For general information about finite state machines, see:

 * [[WikiPedia:Finite_state_machine|Wikipedia:Finite_state_machine]] -- B) ''excellent!'' B)
 * [[Wiki:FiniteStateMachine|Wiki:FiniteStateMachine]]

== Finite State Machine Editor ==

[[http://fsme.sourceforge.net/|FSME]] is a tool where you can draw FSM
diagrams, and then compile to a Python module (or C++ code.) It also makes
an XML description of the FSM.

Requires QT for the editor. (Not the compiler, though, which probably reads
XML.)

 * [[http://fsme.sourceforge.net/doc/tutorial.html|tutorial]]
 * [[http://fsme.sourceforge.net/phpwiki/|project wiki]]


== FSA - Finite State Automation in Python ==

[[http://osteele.com/software/python/fsa/|FSA]] seems to be all about
creating finite state machines, but I don't see a whole lot on how to use
them.

== Noah Spurrier's FSM ==

http://www.noah.org/python/FSM/

Noah's implementation is pure Python code. You init an FSM, register
transitions, and then throw inputs at it. States and inputs must be
hashable.

It's fairly similar to Skip's implementation (below).

== fsmpy ==

[[http://www.research.att.com/projects/mohri/fsm/doc4/fsmpy.html|fsmpy module]]

This seems to be a Python wrapper around
[[http://www.research.att.com/projects/mohri/fsm/|AT&T's FSM library.]] It's
all oriented around "weighted" finite state machines, so I'm not so sure how
suitable it is if you just want to use unweighted FSM.

== Decorator-based FSM ==

An [[http://wiki.python.org/moin/State Machine via Decorators|example using decorators]] is in the Decorator Library on this site.  The module simplifies
implementation of FSM's based on UML 2.0 state diagrams.  The FSM is
implemented as a class, with methods of the class associated with
transitions or with states.  The design is not the best for constructing
FSMs to parse text being somewhat slower than alternatives.

== Skip Montanaro's FSM ==

[[http://www.smontanaro.net/python/fsm.py|fsm.py.]]

Features transition actions.

== python-fsm FSM module with PyGraphViz support ==

An concise yet comprehensive implementation based on Wikipedia spec of Finite State Machines. The module can be used to build and further describe finite state automata with DOT graphs. It implements acceptors and transducers (Moore and Mealy machines) and provides an straight-forward way to inject and execute state change actions for entry, exit, input and transition.

Licensed under the new BSD license.

[[http://code.google.com/p/python-fsm/]]

== fysom ==

A port of Jake Gordon's [[https://github.com/jakesgordon/javascript-state-machine|javascript-state-machine]]. The module lets the user define callbacks for before/after events as well as callbacks on entering/leaving states. Events are exposed as object methods which when called, causes the appropriate state transition. The module also provides asynchronous callback functionality which allows delaying a state transition.

[[https://github.com/oxplot/fysom]]
