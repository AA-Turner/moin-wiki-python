Counter to the PythonSpeed/PerformanceTips, on python 2.4 the following string concatenation is almost twice as fast:
{{{
#!python
from time import time
t = time()

s = 'lksdajflakjdsflku09uweoir'
for x in range(40):
    s += s[len(s)/2:]
    
print 'duration:', time()-t
}}}

as:

{{{
#!python
from time import time
t = time()

s = 'lksdajflakjdsflku09uweoir'
for x in range(40):
    s = "".join((s, s[len(s)/2:]))
    
print 'duration:', time()-t
}}}


----
On the win32 Python 2.4 I'm seeing the join sample above complete in less than half the time of the concatenating sample.
 -db

Usually the join() is located ''outside'' the loop, that code makes this extremely hard though (becuase of the self-referencing of the generated string). But that situation is not the norm. -- JÃ¼rgenHermann [[DateTime(2005-08-01T06:07:51Z)]]
