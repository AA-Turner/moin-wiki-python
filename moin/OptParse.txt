OptParse is a module introduced in Python2.3 that makes it easy to write command line tools.

You give a description of the options that the program can receive, and OptParse will do reasonable stuff for you.

For example:

{{{
#!python
import optparse

if __name__=="__main__":
    parser = optparse.OptionParser("usage: %prog [options] arg1 arg2")
    parser.add_option("-H", "--host", dest="hostname",
                      default="127.0.0.1", type="string",
                      help="specify hostname to run on")
    parser.add_option("-p", "--port", dest="portnum", default=80,
                      type="int", help="port number to run on")

    (options, args) = parser.parse_args()
    if len(args) != 2:
        parser.error("incorrect number of arguments")
    hostname = options.hostname
    portnum = options.portnum
}}}

''args'' contains your fixed arguments, ''options'' contains your values.

For example, {{{options.portnum}}} would contain the integer {{{80}}}, in the example above.

== References ==

 * [http://docs.python.org/lib/module-optparse.html Official Python optparse Documentation]


== Discussion ==

* Impossible to verify the amount of options passed.

I have had to create a function to verify in certain circumstances if we have at least one option set:

(takes an OptParse Values instances returned by parser.parse_args() as argument)
{{{
#!python
def is_empty(options):                                                                                                                                                   
    """
    Returns True or False if an option is set or not.
    """
    values = options.__dict__.values()                                                                                                                                   
    return (values == [None] * len(values))
}}}

Is my need for this is due to a bad design in my option parsing?

- NicolasCouture Mon Nov 28 18:08:12 EST 2005
