= Writing Exception Classes =

Exception classes are not special, you just derive them from Exception:

{{{
#!python
class HostNotFound(Exception):
    def __init__( self, host ):
        self.host = host
        Exception.__init__(self, 'Host Not Found exception: missing %s' % host)
}}}

You may later write:

{{{
#!python
try:
    raise HostNotFound("taoriver.net")
except HostNotFound, exc:
    # Handle exception.
    print exc  # -> 'Host Not Found exception: missing taoriver.net'
    print exc.host  # -> 'taoriver.net'
    
}}}

== See Also ==

HandlingExceptions, TracebackModule

== Questions ==

  * How do you relay the traceback information? ''Relay the traceback information? Moving it higher up the call-stack? Could you try to explain your question?''
     * When you're logging exceptions, you want access to the traceback information to. After some research, I believe what you use is extract_tb or extract_stack from the traceback module. -- LionKimbro <<DateTime(2003-09-07T15:23:43Z)>>

  ''Look at cgitb for how to do detailed TB introspection, and as an example of why mixing logic and (HTML) layout is a very bad thing.''

  * What better exception-foo is out there?

  ''AlexMartelli's "Dos and Don'ts".''

  * The new text involving {{{super}}} doesn't seem to work for me.

Using Python 2.3:

{{{
#!python
class LocalNamesSyntaxError(Exception):
    def __init__(self, msg):
        self.msg=msg
        super(LocalNamesSyntaxError, self)('Local Names v1.1 Syntax Error: %s' % msg)
}}}

{{{
Traceback (most recent call last):
  File "parser.py", line 92, in ?
    pprint.pprint(parse_text(test_string))
  File "parser.py", line 69, in parse_text
    cursor=parse_record_type(cursor,line,results)
  File "parser.py", line 43, in parse_record_type
    raise LocalNamesSyntaxError("unrecognized v1.1 record type- require LN, NS, X, or PATTERN")
  File "parser.py", line 17, in __init__
    super(LocalNamesSyntaxError, self)('Local Names v1.1 Syntax Error: %s' % msg)
TypeError: super() argument 1 must be type, not classobj
}}}

Is this a Python2.4 v. Python2.3 thing? Or is there a simple error in my code? -- LionKimbro

super() only works for new-style classes. Exception is still an old-style class: type 'classobj'. I've fixed the example. -- JohannesGijsbers

Thanks a lot, I was having hardtime figureing this out, as exactly the same construct worked in other places. -- HariDara

It might become a 2.4 vs 2.5 thing though, as 2.5 should allow new-style classes.
