= Writing Exception Classes =

I (LionKimbro) don't know much about writing exception classes; Here's hoping someone rewrites this better.

Exception classes are not special, you just derive them from Exception:

{{{
#!python
class HostNotFound(Exception):
    def __init__( self, host ):
        self.host = host
        Exception.__init__(self)
}}}

You may later write:

{{{
#!python
try:
    raise HostNotFound( "taoriver.net" )
except HostNotFound, X:
    print "Host Not Found:", X.host
}}}

== Overloading __str__ ==

You can overload {{{__str__}}} to get the exception to explain itself:

{{{
#!python
class HostNotFound(Exception):
    def __init__( self, host ):
        self.host = host
    def __str__( self ):
        return "Host Not Found exception: missing %s" % self.host
}}}

That way, you only need print the exception instance:

{{{
#!python
try:
    raise HostNotFound( "taoriver.net" )
except HostNotFound, X:
    print X
}}}

I don't know if this is a good idea or not.

''In this instance, there's no need to overload {{{__str__}}}, as the standard Exception already has a {{{__str__}}} method:''

{{{
#!python
class HostNotFound(Exception):
    def __init__(self, host):
        self.host = host
        Exception.__init__(self, 'Host Not Found exception: missing %s' % host)
}}}

== Questions ==

  * How do you relay the traceback information? ''Relay the traceback information? Moving it higher up the call-stack? Could you try to explain your question?''
  * What better exception-foo is out there?
