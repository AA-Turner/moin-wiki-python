These are the [http://code.google.com/soc/ Google "Summer of Code"] projects involving Python and mentored by the Python Software Foundation.

For information on the accepted projects for 2005, see ["SummerOfCode/2005"].

The Drupal folks have some nice information for students.  
 * [http://drupal.org/node/59963 "Student requirements"]  
 * [http://drupal.org/node/59037 "HOWTO write an application"]

= How to apply as a mentor =
The mentor's responsibility is to ensure the student makes progress. This could be coaching them, providing motivation, making sure they aren't stuck, answering technical questions, or pointing the student to the proper resources; however, the mentor is not expected to do work for the student. In order to accomplish this, the mentor is expected to dedicate a couple of hours per week.

[http://code.google.com/soc/mentor_step1.html "Apply through Google's online form."]

 * [http://mail.python.org/pipermail/python-dev/2006-April/063965.html Announcement made to Python-Dev]
 * [http://code.google.com/soc/mentorfaq.html Mentor FAQ]
 * Contact [mailto:nnorwitz@gmail.com Neal Norwitz]
  * If neither Neal nor Guido know you personally, please provide personal references

= How to submit a proposal =

 * [http://code.google.com/soc/studentfaq.html Student FAQ]

= Proposal ideas =

The following ideas are just suggestions.  You're free to invent your own ideas, or to use their suggestions as starting points.

 * Some ideas to help get you started: look at the SimpleTodo and CodingProjectIdeas pages.  [http://www.python.org/dev/peps/pep-0042/ PEP 42] also lists feature ideas.
 * Integrate [http://www.nedbatchelder.com/code/modules/coverage.html Ned Batchelder's coverage module] into the core, along with improved performance profiling, and make 'em both thread-smart (so that we can get accurate stats on multicore CPUs).
 * Revive restricted Python -- inspired by a recent thread on the py3k list (would be mentored by Brett Cannon: request that student who takes this on not use it as basis of work to be published because of competition with my dissertation)
 * Create a bunch of modules like what Squeak has for 3D modeling,
 events etc. (the exact list may be somewhat different, I haven't
 researched this in any depth). This is inspired by a recommendation
 from Alan Kay made at the Shuttleworth workshop.
 * Design and implement an interface for manipulating both [http://www.openoffice.org/product/calc.html Calc] and [http://www.gnome.org/projects/gnumeric/ Gnumeric] spreadsheets (in the same way that DB-API allows programs to interact with a variety of databases).
 * Add a web-based admin interface and/or user-oriented views to [http://www.third-bit.com/drproject DrProject], a lightweight project management portal intended for use in software engineering courses.
 * Help improve the www.python.org web site production system (pyramid) and write documentation to prepare it for open source release.
 * There are a number of potential TurboGears projects that may be interesting related to Kid, SQLAlchemy and TurboGears itself (like the FastData package).
 * Help move www.python.org towards dynamic content generation techniques.
 * Improve Buildbot for python use and/or in general.
 * Add regular code-coverage (both C and Python) to the build system (maybe even to Buildbot?)
 * The PyPy project has lots of SoC sized tasks.  See [http://codespeak.net/pypy/dist/pypy/doc/independent-project-ideas.html] for some concrete suggestions.
 * Improve Jython
 * Write a new and useful application in Python.
 * Improve an existing Python application (e.g. [http://wiki.list.org/display/DEV/Summer+of+Code Mailman], BitTorrent, Zope).  Some Python-based projects are SoC mentoring organizations in their own right, so you might end up being mentored by them, not the PSF.  (You should probably contact a current developer on the project first, to ensure that your plans mesh with theirs.  JimJJewett offers to help if you want to work on [http://www.plkr.org plucker], which lets you read web pages on a disconnected palm pilot.)
 * Write an IPC or RPC package to allow for concurrent Python execution.  Compare with http://rpyc.sourceforge.net
 * Work on unit test suite.  This includes not only developing support code (such as decorators to flag tests that are implementation-specific, known to fail, etc.), but also to have more code coverage in the unit tests.
 * Implement ctypes support for GCC ARM platforms. The underlying issue is lack of closure API support for ARM in libffi. A patch available at http://handhelds.org/~pb/arm-libffi.dpatch, that should be hopefully  a good starting point. ctypes CVS has a libffi_arm_wince directory, which also seems to support closure API.
 * Improve Python Debugger(PDB).Some of general ideas are here: ["PdbImprovments"].If you have any sugesstions related to pdb add them there.
 * Create a Python web app server, synthesized from the many options already available, with an eye towards the total developer experience.
 * A web-based IDE, offering through-the-web editing (with version control), execution, and testing of code ([mailto:ianb@colorstudy.com contact])
 * Create a full-featured WSGI app server (taking into account projects like [http://www.saddi.com/software/flup/ flup]) with special attention to things like resource usage and restarting after crashes, to make it suitable for commodity hosting environments ([mailto:ianb@colorstudy.com contact]).
 * Integrate a Javascript interpreter with Python.  [http://webcleaner.sourceforge.net/ WebCleaner] has some initial work; so extracting, documenting, and refining that code would be in order.  The whole spec is probably too much, but you could focus on langauge support, or on "what typical web pages actually need".
 * A client side web browser.  Grail is not currently maintained, and the others are almost entirely for automated or testing purposes, without a good interactive mode.  But try to keep the scope reasonable, somehow.  Perhaps hooking beautifulsoup or tidy to elementtree, urllib or urllib2, cookielib, and a text (or very basic) Tk front end?  Do keep the DOM exposed, so that others can build on it more easily.
 * [http://pyxides.stani.be/ PyxIDE] has several potential projects related to IDEs in Python.  Real-time code analysis would be a good project (which could in turn be used to build auto-completion and other tools).
 * Several DocumentationTools exist for Python.  Choose one and improve it.  Choose two and combine their features.  Choose four or more and take over the world.  The Python documentation world, at least.
 * Push-button web. A prototype system exists to manage HTML and ReST content in a relational database and publish it as static HTML. The wxPython GUI needs improvement and a more consistent substitution mechanism is required, together with better documentation and a supporting web content (which should be managed as a push-button web).
 * There are a lot of potential [http://docutils.sourceforge.net/ Docutils] and [http://docutils.sourceforge.net/rst.html reStructuredText] projects in the [http://docutils.sourceforge.net/docs/dev/todo.html To Do List].  Some examples (listed in the "Minimum Requirements..." section): Nested inline markup; Python Source Reader; Suitability for Python module documentation.
 * Improve the Eclipse IDE's support for Python: http://pydev.sf.net
 * Implement [http://www.ieee802.org/1/pages/802.1x.html IEEE Std 802.1X] Authenticator for wired networks,with one of the low-level python networking libraries: [http://www.secdev.org/projects/scapy/ scapy], [http://twistedmatrix.com Twisted.Pair],[http://pycap.sourceforge.net/ pycap] or maybe  something else.Probably some python firewall bindings will be needed too.
 * PyGame Projects
  * Implement CodingProjectIdeas/PygameOnCtypes
  * ./PygameGui
  * ./SimpleNetworkingForPygame
 * Data mining in Python (e.g., adding new widget for text mining or 3-D data visualization for Orange, [http://www.ailab.si/orange])
 * Improved python code generation support in umbrello [http://uml.sourceforge.net/index.php] or alternatively a pure python implementation to parse umbrello files and generate python code.
 * Provide more and better debugging of reference counting, garbage collection, and other memory issues for extension and embedding authors.
 * Add a wxPython/wax based object browser to the ipipe module which will be part of the next release of [http://ipython.scipy.org/ IPython].
 * Write an RPC mechanism, or prepare an existing RPC mechanism, for the standard library. 
 * Enable I18N identifiers support for py3k.
 * Implement a pure python library that handles unicode [http://www.unicode.org/cldr/ CLDR]. (like ICU?)
 * Implement the [http://www.unicode.org/reports/tr6/ SCSU] codec.
 * Add C implementation of decimal module.
 * Write tools that leverage the new compiler AST-- tools to analyze code, walk the AST, modify it, allow a modified AST to be compiled back to bytecode.  Work on PEP 267.
 * Create a practical statistical profiler designed for inclusion in core Python.  (You might want to take a look at Andy Wingo's [http://wingolog.org/archives/2005/10/ statprof] profiler as a starting point. -- SkipMontanaro)
 * Take an existing set of sources for M2Crypto and build a robust distribution from it.  This should include comprehensive API documentation, a full test suite, and providing a better Python interface, not just a light wrapper around openssl, for many of the functions like X.509 certificates that are not currently exposed.
 * Implement [http://sage.scipy.org/sage/ SAGE], which is a Python-based free open source computer algebra system.  SAGE is the algebraic analogue of [http://www.scipy.org scipy]---it incorporates and "glues together" a wide range of existing open-source mathematics packages such as Maxima, Matplotlib, and GAP.  Here's a [http://sage.scipy.org/sage/projects list of projects] and an [mailto:wstein@gmail.com email contact].
 * Conduct a review of one chunk of functionality in [http://www.scipy.org scipy] similar to the one currently in progress about [http://projects.scipy.org/scipy/scipy/wiki/StatisticsReview the statistics package]. Alternatively, add a chunk of functionality to scipy. Recently discussed requests have been bindings to [http://www.llnl.gov/casc/sundials/ SUNDIALS], sparse matrices in [http://www.netlib.org/lapack/lug/node121.html LAPACK packed storage formats], 3-D Delaunay tetrahedralization and natural neighbour interpolation, and porting the [http://www.ncrg.aston.ac.uk/netlab/index.php Netlab] neural network code to scipy.
 * Bring [http://www.enthought.com/enthought/wiki/MayaVi MayaVi 2's] feature set up to the level of [http://mayavi.sourceforge.net MayaVi 1.5] ([mailto:robert.kern@enthought.com contact]).
 * Write a library around pickle that allows developers to version their pickles such that old pickles can still be read even though the code that created them has been refactored, attributes renamed, and other such changes.
 * Implement mathematical formula typesetting using TeX algorithms and TeX fonts but without needing a TeX installation.
 * Add more plot types to the recently refactored [http://code.enthought.com/chaco/ Chaco] plotting library  ([mailto:robert.kern@enthought.com contact]).
 * Make [http://code.enthought.com/traits/ Traits UI] available to Qt, Tk, or GTK applications ([mailto:robert.kern@enthought.com contact]).
 * Help make [http://ipython.scipy.org/ IPython's] capabilities available inside a wxPython application.
 * Use [http://www.cs.washington.edu/research/constraints/cassowary/ Cassowary] or some other constraint solving library to implement automatic, "nice" GUI layout.
 * The development of the new [http://numeric.scipy.org/ NumPy] has led to good ideas for how to get a generic multidimensional array object into Python 2.6.  Somebody willing to work with the !NumPy developers to take the essential portions of !NumPy and create a basearray (also called a dimarray) that could be included as a base-class multidimensional array object along with a general-purpose data-type object.  This project has already been started but needs someone with time to help it along.  See the [http://numeric.scipy.org/array_interface.html/ Array Interface] description page for an SVN check-out.  This project has large impact potential for Python.
 * Write general [http://pango.org/ Pango] bindings that can be used by Python libraries to do general text layout outside of PyGTK and pycairo.
 * Help merge the codebases of [http://matplotlib.sourceforge.net matplotlib] and [http://code.enthought.com/chaco/ Chaco] ([mailto:jdhunter@nitace.bsd.uchicago.edu contact], [mailto:robert.kern@enthought.com contact]).
 * integrate Baysean Filtering with MoinMoin. see: [http://gauss.ffii.org/BayesWiki full proposal]
 * Soya3d Projects
  * add multi-texture support (bump/normals mapping, etc)
  * verse support for shapes and materials
  * improved exporters/importers (blender, etc)
  * cal3d per-bone and morph animations
  * improved ode integration
 * Improve [http://yaml.org/ YAML] [http://pyyaml.org/ support in Python], e.g.,
  * make [http://pyyaml.org/wiki/PySyck Python support in Syck] (C extension) as complete as Ruby's 
  * make [http://whytheluckystiff.net/syck/ Syck] support Unicode
  * contribute to [http://pyyaml.org/wiki/PyYAML PyYAML] (pure Python version)
 * improve Python threading performance, maybe remove Global Interpreter Lock (GIL)

= Related sponsors =

Those interested in working in [http://www.djangoproject.com Django] may do so [http://code.djangoproject.com/wiki/SummerOfCode2006 under the auspices of the Django group].

MoinMoin is also participating as their own organization, see [http://moinmoin.wikiwikiweb.de/GoogleSoc2006] for project ideas.

= Accepted proposals =

Note: if a project is listed as having two mentors, the first mentor listed is the ''primary'' mentor, and the second one is the ''back-up'' mentor.

 * None yet.
