This page is for students and mentors for the [http://code.google.com/soc/ Google "Summer of Code"] projects involving Python and mentored by the Python Software Foundation (PSF).

Discussion about any Python-related SoC topic should take place on 
[http://mail.python.org/mailman/listinfo/soc2006 the soc2006 mailing list].  Joining this list is strongly encouraged for people interested in discussing possible projects, people who'd be willing to help students this summer as mentors, and any students considering applying for the program.

For information on last year's accepted projects, see ["SummerOfCode/2005"].

= Students: How to submit a proposal =

[http://code.google.com/soc/student_signup.html Apply through Google's online form.]

[http://code.google.com/soc/student_step1.html Submit an application.]

The Drupal folks have some good information for students on how you should write your application:

 * [http://drupal.org/node/59963 Student requirements]
 * [http://drupal.org/node/59037 HOWTO write an application]

Here is Google's [http://code.google.com/soc/studentfaq.html Student FAQ].

== Tips on writing your proposal ==

'''Be detailed.'''
Don't say "I want to improve Python's support of XYZ", because that's vague, making it difficult to assess the project's feasibility or the time required.  What changes would you make to improve XYZ support? 

'''Compare with alternative projects.'''
If your project will do task XYZ, look at other existing projects
that perform the same task and
explain how yours is different or better.  (Or you can write a proposal to enhance an existing project instead.)

'''Try to provide a rough timeline.'''
How much time would each change take (a day, a week, six weeks)?  What intermediate milestones will there be?  (e.g. for a game, you might get an initial graphic display in week 1, write a parser for level definitions in week 2, write a level editor in weeks 3 and 4, etc.)

'''Get feedback.'''  Post the proposal to a relevant mailing list and ask for comments.  Post the proposal to your weblog and see what people think.

'''Describe your experience.''' 
Why are you a good person to work on this project?  What skills/interests/knowledge do you have that are applicable?

'''Suggest a mentor.'''  
If you know a developer who would be a good mentor for your project,
contact him/her and ask if they're interested.  In 2005, some interesting projects went unfunded because there was no one in the pool of mentors who felt capable of handling them.


= Mentors: How to apply =

The mentor's responsibility is to ensure the student makes progress. This could entail coaching them, providing motivation, making sure they aren't stuck, answering technical questions, or pointing the student to the proper resources.  However, the mentor is not expected to do work for the student. In order to accomplish this, the mentor is expected to dedicate a couple of hours per week.

[http://code.google.com/soc/mentor_step1.html Apply through Google's online form.]

 * [http://mail.python.org/pipermail/python-dev/2006-April/063965.html Announcement made to Python-Dev]
 * [http://code.google.com/soc/mentorfaq.html Mentor FAQ]
 * Contact [mailto:nnorwitz@gmail.com Neal Norwitz]
  * If neither Neal nor Guido know you personally, please provide personal references of some sort.

= Proposal ideas =

The ideas on the following pages are just suggestions. You're free to invent your own ideas, and don't have to use these suggestions as starting points.

 * ["SummerOfCode/PythonWebSite"]

This page can help you craft your proposals to the PSF mentors and their interests.
 * ["SummerOfCode/Mentors"]

= Related sponsors =

While not sponsors themselves, the PyPy and Jython projects have many SoC sized tasks available. For PyPy, see [http://codespeak.net/pypy/dist/pypy/doc/independent-project-ideas.html] for some concrete suggestions.

Those interested in working in [http://www.djangoproject.com Django] may do so [http://code.djangoproject.com/wiki/SummerOfCode2006 under the auspices of the Django group].

MoinMoin is also participating as their own organization, see [http://moinmoin.wikiwikiweb.de/GoogleSoc2006] for project ideas.

[http://www.bbc.co.uk/rd/ BBC Research] is also a mentor organisation for python projects using the [http://kamaelia.sourceforge.net/Introduction.html Kamaelia] project for audio/video & multimedia/networking related projects, also for graphical construction of systems. Please see our [http://kamaelia.sourceforge.net/SummerOfCode2006.html Summer of Code] page for more details. (BTW, there's some discussion on edu-sig which coincides with some of our aims, so if you're interested in python for schools, talk to us, we can't guarantee anything but you'll understand why we're interested if you chat to us!) 

The current list of ideas  that the Kamaelia project is looking to mentor includes the following:
 * "Trusted Communications" (trusted by the user)
 * "Component bindings to AV codecs"
 * "Modifications of Visual Graphline editors, Reapplication to Graphline Video Editting"
 * "CSS-esque Styling and XML (?) Layout Definition of Pygame Applications"
 * "Collaborative Sketching Server - A P2P Events Backplane Application"
 * "Creation of an integrated bit torrent component"
 * "OpenGL widget framework"
 * "Hierarchical topology visualiser"
 * "Hierarchical Introspector"
 * "Distributed physics"
 * "Primitives for graphical composition"

= Accepted proposals =

= Pygame on ctypes =

Student: Alex Holkner

Mentor:  Richard Jones

My project proposal is to rewrite Pygame to use ctypes.  The current implementation is written as a C module that links to SDL.  The proposed addition of ctypes to Python 2.5 is a great catalyst for using it to wrap SDL and reimplementing Pygame in pure Python.  This would allow developers to extend Pygame with much more ease than is currently possible, and to make use of SDL features not exported by Pygame.  Some probing emails on the Pygame mailing list have indicated there is definitely support for this conversion.  A wiki further discussing the initial proposal is at CodingProjectIdeas/PygameOnCtypes.

= SQLAlchemy Schema Migration =

Student: Evan Pierce Rosson 

Mentor: Jonathan La``Cour

SQLAlchemy is an excellent object-relational database mapper for Python projects. Currently, it does a fine job of creating a database from scratch, but provides no tool to assist the user in modifying an existing database. This project aims to provide such a tool. 


= Drop-in WSGI support for Commodity Hosting =

Student: Jonathan Rosebaugh 

Mentor: Benjamin C. Bangert 

I intend to take advantage of existing developments in WSGI such as Paste, flup, and various WSGI-compatible frameworks in order to develop a simple drop-in method for hosting WSGI webapps in commodity hosting.

Project Goals in rough order of priority

  * WSGI Admin Panel - A self-contained WSGI app which allows the user to attach various WSGI apps to different urls. At its most basic it will be a simple wrapper around paste.urlmap, but it will be able to handle more complex situations, involving such things as paste.cascade, paste.urlparser, various middleware, and other complex situations. When I can use PasteDeploy I will, but there will have to be support for manual importing of apps from modules.
  * FastCGI made easy - flup has taken us most of the way, but it needs to be friendlier. Some hosting providers want the FastCGI process to be running on a specified port; some providers want the web server to spawn it. Either option should be easy to do, with robust process management to make sure the FastCGI process stays up.
  * Ease of installation for webhosts - Ideally, a commodity webhost should be able to provide this package for their customers; just click a button in the signup and the WSGI admin panel is deployed to the user's account, creating an isolated user environment using workingenv and setuptools.
  * Ease of installation by end users - However, until this has widespread support by webhosts, the user needs a quick and simple install process. We'll have a simple installer--command line for those who have shell access, python cgi, and maybe even a php-based installer--that lets the user set up their WSGI package using workingenv and setuptools.


= PyDev - Python for Eclipse =

Student: Sean Handley 

Mentor: Fabio Zadrozny 

Deliverables:

 * Work on the PyDev plugin and implement as many of the requested/required features as possible (http://sourceforge.net/tracker/?group_id=85796&atid=577332).
 * Specifically, work on these features:
  * Automatically reload changes in the debugger when a file is changed. 
  * Evaluate selection (hovering) to show the debugger values
  * Create a break for exception
  * Making calltips after '(' or ','
  * Make the tab key automatically jump from parameter to parameter 
  * When Ctrl is pressed, the parameters should not be added
  * Discover instance values in code-completion
  * Analyse functions to get the code-completion to know what can be used to complete a method
  * Make a Python project explorer, such as the one for Java

= Ajax in python based on PyPy's JavaScript backend =

Student: Maciej Fijalkowski 

Mentor: Eric van Riet Paap 

The main target of the project is to produce a framework which
takes advantage of PyPy's JavaScript backend and to make it
easy to write an AJAX based framework written entirely in Python.

The aim is to produce a framework which allows Python applications
to be translated into an AJAX based application split into
a client part (JavaScript running on browser) and a server part
(python running on web server). Communication between client and server
is translated from Python method calls into JSON request and response.


= Complete gencli, the PyPy CLI backend =

Student: Antonio Cuni 

Mentor: Armin Rigo 

gencli is the PyPy backend targeting the Common Language
Infrastructure (CLI) virtual machine, i.e. .NET.

Once gencli will be complete it will be possible to translate the
Standard Interpreter in order to produce a .NET executable of the
Python interpreter (we could call it PyPy.NET).

The result will be in some way similar to the existing IronPython,
with the difference that IronPython is a compiler (though most of the
job is done by the runtime environment), while PyPy.NET will be an
interpreter.

= Improving the Python debugger =

Student: Matthew J Fleming 

Mentor: Robert L. Bernstein 

Many people have voiced their concern that the Python debugger could be improved in a number of ways. This project aims to incorporate these suggestions into an improved version of Pdb.

= Base multidimensional array type for Python core =

Student: Karol Marek Langner 

Mentor: Travis E. Oliphant 

The goal is to prepare a simple, generic multidimensional array interface that can be readily placed in the Python core as a new built-in base type (called, for instance, 'dimarray'), and possibly included in a future Python distribution (maybe 2.6?). This new base type will have the same C-structure as the current array implementation in numpy and will be based on a interface recently formulated by Travis Oliphant within a Python Enhancement Proposal (http://svn.scipy.org/svn/PEP/). After preparing a 'ready to insert' version of the array interface, it will be applied to numpy and several other packages that work with multidimensional data, and possibly modified in order to work out an optimal scope.


= SciPy Vector Machine support =

Student: Albert Strasheim 

Mentor: David Kammeyer 

= Soya3D Collision API : Improving ODE integration in the core =

Student: David Pierre-Yves 

Mentor: Lamy 

Soya lacks some very useful tools such as a
collision API or a properly integrated physics engine.

I am applying to Summer of Code 2006 in order to fix these deficiencies by
improving support for the Open Dynamics Engine (ode.org), which is barely working and too low-level in the last release of Soya, and provide a similar collision detection system to
all objects whether ODE is in use or not.



= Coder: An extensible web-based programming tutor =

Student: Johannes Woolard 

Mentor: André Roberge 

I propose a system that serves web-pages locally over the loopback address – this could maybe be extended later to work remotely if “restricted python” is revived.

Tutorials are really the most important part of this application: not only must they be simple to create, they must also be fun for the students. I am proposing a system whereby tutorials are encapsulated in XML and contain not only the raw tutorial (which will be pretty-printed to XHTML using XSLT, which in turn could be personalised with CSS), but also unit tests written in python that must be satisfied for the student to advance to the next stage. Not only will I write an IDE for programming, I will also write a WYSIWYG editor for tutorials.

= Improving Mailman's User Experience =

Student: Ethan Fremen 

Mentor: Barry Warsaw 

I propose to port Mailman's web interface to one implemented with Kid in order to improve the UI and enable better handling of i18n.


= Shed Skin project =

Student: Zheng Siyao 

Mentor: Mark Dufour 

I will extend the Shed Skin compiler, so that memory management of
generated code and hence performance is improved.



= Decimal module in C. =

Student: Mateusz Rukowicz 

Mentor: Facundo Batista 

Adding C implementation of decimal module, which eventually would replace current implementation, with no side effects to applications using this module. 

= Rewrite of the zipfile module. =

Student: Nilton Sergio Volpato Filho 

Mentor: Ilya Etingof 

The project  is to write a new and updated version of the
zipfile module for dealing with ZIP files with much more features that
are not supported by ``zipfile`` module currently.

Some of these features would include, highly efficient manipulation of
files (including large files). Currently the ``zipfile`` module reads
compressed files as one string containing all the compressed file
contents, this is very inefficient when the file size is large. I
propose to add a more friendly interface, that works much like
builtin function like ``open`` and can read chunks at a time.

I also propose to add efficient file deletion support for the
``zipfile`` module. This feature is very important for dealing with
compressed files inside ZIP just like any other files in the
filesystem. This would benefit many other projects that may want to
distribute their softwares as just one ZIP file, and may want to
access and modify resources, files, configuration files, etc.

= Soya3D exporting/importing tools for Blender =

Student: Palle Raabjerg 

Mentor: Buddha Michael Dylan Buck 

Currently, no Soya3D importers exist for Blender. This means you cannot import any Soya3D or Cal3D models into Blender. This can be inconvenient for both the game developer, as he needs to publish the .blend files to allow people to modify models, and for a gamer community surrounding a project, as they can't modify models unless the developer publishes the .blend files. (Note: This might be a perfectly okay and even preferable situation for some proprietary game developers, but Soya3D is built on a philosophy of openness and freedom, making this a more important feature.)

The Soya3D exporter tools basically consists of the blender2soya and blender2cal3d scripts. blender2soya is currently used for static (non-animated) models, and blender2cal3d is used for exporting animated skeletal models to the Cal3D format, which can also be used with Soya.
These two scripts lack many features, however, and still contain known flaws.

If I am assigned to this project, I will create Soya3D and Cal3D importers for Blender, and I will work on both exporter scripts

= YAML parser and emitter =

Student: Kyrylo Simonov 

Mentor: Clark C. Evans 

I have developed a pure Python YAML parser, which is, as for now, the
only existing YAML parser that fully adheres the current YAML 1.1
specification.  I would like to apply to the Google Summer of Code
program in order to continue my work on implementing a YAML parser and
emitter.

My proposal is to write a C library for processing YAML and Python
bindings to it.  While existing PyYAML parser is stable and robust,
being a pure Python code, it is slow and not suitable for processing
large amounts of data.  Additionally, having a C library will allow
bindings for other languages as well, which will increase
compatibility between various implementations and serve the goal of
YAML: to be a language-independent format for serializing data.

I also plan to progress on another YAML-related project: Writing a
reference YAML parser and emitter, alternative grammar rules for YAML
that matches the way the parser works and a set of guidelines for
parser writers.  The language of implementation of the reference
parser should be Python without using its advanced language-specific
features.  This will ensure that a proficient programmer can write a
YAML parser and emitter in her language of choice and will greatly
increase the adoption of YAML.  I do not expect to complete the
reference parser during the period of SoC though.



= Web-based administration interface for DrProject =

Student: Gregory Lapouchnian 

Mentor: Greg Wilson 

Currently the administration of a DrProject installation has to be done 
through a command line script. This works well in certain situations 
where a professor is able (or willing) to write scripts to make use 
DrProject's API in order to execute batch operations. However a 
web-based administration interface would greatly simplify course 
management by providing a central location for common tasks such as 
removing a student from a course or moving them from one project to 
another. A web-based console will also make it possible to present to 
the instructors some general statistics for the groups and students in 
their course in a convenient format.

= Cheesecake enhancements and its integration with PyPI. =

Student: [http://joker.linuxstuff.pl/ Michał Kwiatkowski]

Mentor: [http://agiletesting.blogspot.com Grig Gheorghiu]

[http://pycheesecake.org Cheesecake] is an application designed to evaluate and estimate the overall quality (or so called 'kwalitee') of a given software package written in Python. It emphasizes a need for well-written documentation and unit tests, encouraging good programming practices and penalizing sloppy design and careless distribution. Using Cheesecake to check your code gives you confidence that your software doesn't merely run, but is usable and easy to test and modify as well.

Because Python is very easy to learn and use there exists a vast variety of software written in it, most of which was scattered until [http://python.org/pypi PyPI] was created. Now, when new packages are being indexed on Cheese Shop every day, an effort can be made to spread the spirit of good software design and code reuse among the Python community. This can be achieved by combining the power of Cheesecake and Cheese Shop. Everytime a new version of a package would be uploaded to Cheese Shop, its cheesecake index will be calculated and published on web. Having a way to measure a quality of a package with accordance to other existing packages will be of invaluable help for all developers. It will promote well built packages and in the long run raise the overall quality of Python software.

Adding Cheesecake functionality to PyPI has been already [http://mail.python.org/pipermail/catalog-sig/2006-April/000825.html mentioned] by Phillip J. Eby on the catalog-sig mailing list. Together with Cheesecake maintainer Grig Gheorghiu we've discussed modifications needed to be done to Cheesecake code to be reliable enough so it could be incorporated into PyPI service. A [http://pycheesecake.org/wiki/SummerOfCode06 working copy of our ideas] is accessible on the project wiki. It includes enhancing Cheesecake code scoring techniques to take into account unit tests of a package, running tests in secure environment, extending supported archive formats and fixing all known bugs. Development of Cheesecake will adhere to best practices such as unit testing, continuous integration (via buildbot), pylint verification, etc.

The next part of this project will include collaboration with Richard Jones, PyPI maintainer, and merging Cheesecake into PyPI service. Upon completion all PyPI uploads will be automatically scored by Cheesecake. It will be possible to browse packages archive by cheesecake index, sorting results by installability, documentation and code kwalitee index. Statistics in numeric and graphical form will also be made available. This part of a project will involve writing server-side code, with emphasis on security and robustness.

The remaining time will be spent on resolving all problems that would occur during usage of Cheesecake and PyPI. Along with fixing bugs, I will develop a simple Hello world package that can be taken as an example of good development practices for all Python developers. It should also score 100% in the Cheesecake test of course. ;-) It will be what [http://savannah.gnu.org/projects/hello/ hello] is for GNU Project. 

= Enhancements to mathtext (part of matplotlib) - a Python package for typesetting =

Student: Edin Salkovic 

Mentor: John D Hunter 

After a discussion at the scipy user list, and the comments of the possible
mentor (John Hunter, creator/maintainer of matplotlib), I decided to work 
on improving mathtext, which is part of matplotlib. So, for this summer of
code I could work on the following (roughly in order of importance/realization):

 * replace the existing bakoma truetype fonts with a set of good,
 comprehensive, math fonts, eg, STIX (http://www.stixfonts.org/).
 The STIX fonts should be available by the begining of June. Also,
 the code should be refactored so that unicode names for symbols can
 be used. This will allow plugging in any font that supports unicode
 (STIX fonts already support unicode). Currently mathtext hardcodea
 the mapping from TeX symbol name to a (font_file, glyph_index) tuple,
 which ties mathtext to a given set of fonts (eg, the Bakoma fonts).

 * incorporate some of Knuth's layout algorithms into the mathtext
 layout engine.

 * refactor mathtext into a stand-alone module


 * add support for kerning - the current bakoma fonts do not have kerning
 info in them.

 * improve the parser to handle more TeX

 * add support for fractions (\frac), arrays etc.

I plan to continue the work on mathtext after SoC.

= PyCells: Port of CLOS Cells extension =

Student: Ryan Forsythe 

Mentor: James Tauber 

Summary: Python port of Kenny Tilton's Cells extension to CLOS

Cells is a framework which, rather than defining a class as a set of
methods and attributes, instead defines it as a set of interdependent
slots, each of whose values are determined by formulas. It is
analogous to a spreadsheet. While it is similar to Python's idea of
properties, elements of a class which act like values but which are
generated by a method, cells build in an automemoization function so
their results are recalculated only when needed. My task for Summer of
Code would be to build a package which implemented Cells in Python,
built regression testing for the package, and translate CLOS Cell's
demo applications into PyCell.

= Python interface for writing Mozilla (NPAPI) plugins =

Student: Marcin Pertek 

Mentor: Mark Hammond 

Writing plugins with the NPAPI requires using the cumbersome and error-prone C or C++. I propose a thin binding of the interface to Python, by the means of a plugin embedding a Python interpreter and exposing inside it the NPAPI. It does not imply executing Python code from webpages, simply a way to write plugins in Python instead of C.

In addition to ease the creation of plugins, I would make bindings to readily enable the use of wxPython, PyGTK, PyGame and Soya3D. These bindings would enable those libraries to handle the in-browser window and associated events.

= Neural Nets in SciPy =

Student: Frederic Mailhot 

Mentor: Robert Kern 

SciPy is a collection of open-source tools for researchers who use Python for scientific programming. Although SciPy includes modules for a wide variety of scientific and mathematical domains (e.g. optimization, linear algebra, genetic algorithms), it has no built-in support for the simulation of artifical neural networks, a commonly-used modeling and data analysis paradigm in many scientific domains.

The goal of this project is to extend SciPy's functionality by adding modules for the design, training and use of a variety of neural network architectures, including standard feedforward and recurrent networks, among others. As a guide I intend to work from the modules in the Netlab[1] toolkit, as well as from my own experience implementing recurrent networks.

= PyPy Proposal - Write and port modules from CPython with ctypes =

Student: Tenitope Lawrence Oluyede 

Mentor: Christian Tismer 

I'd like to make PyPy ready for encrypted communications adding SSL support in the
ongoing and in-development socket module. The other modules I'll port are: bz2, 
fcntl, mmap and time (very fundamental). 
If there's time I'd like to start working on 'os' and 'select' modules also.

= Logging Usage in the Standard Library (PEP 337) =

Student: Jackilyn Hoxworth 

Mentor: James Joseph Jewett

Implement PEP 337, possibly updating the PEP to take account of any new issues that arise.
