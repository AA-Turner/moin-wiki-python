Vi (and its popular variant ViImproved) is a small text editor which does a few things, mostly relating to editing text.  If small editors with a single purpose and enough features to satisfy most text editing needs appeal to you, then you might want to consider using this editor.

EmacsEditor is a large text editor which does quite a lot of things, not all of which are related to editing text.  If you find yourself interested in an application which does many things, but may require more learning to explore its potential, then you might find this editor to be of interest to you.

Both of these editors support many fundamental virtues of text editors such as extensive syntax highlighting, collapsible functions, spell checking, macros, undo-redo, multiple document editing, and a large support community.  They are both free, Open Source, mature software.  Try them both and choose the one that best suits you.

Among technically inclined UNIX/Linux users ''vi''/''vim'' tends to be preferred more by sysadmins
while ''emacs''/''xemacs'' tends to be favored by programmers.  Comparing the typical usage patterns of these classes of users to the relative merits of the two editors this should not be surprising.

Commonly, systems administrators are working on many different machines, in varying states of installation, configuration and repair.  They are making relatively quick edits to many different files.  An editor with a quick load time, blazing keyboard efficiency (with the right expertise) and and few library or other dependencies is essential.  Preferably it will be the editor that virtually every version of UNIX includes by default.  It is even, occasionally, handy that the editor be able to fallback on an old fashioned line editing mode when even the terminal emulation subsystem is non-functional.

Programmers, on the other hand, tend to work extensively on large complex sets of related files.  However they tend to have all of them located on one single machine (usually checked out of a version control system ''en masse'').  For programmers the overhead of starting a larger, slower,
more complex editor is amortized over their usage.  They may have the same instance of the editor up for weeks or months at a time, closing and opening buffers as necessary.  Having and editor support a full programming language internally is important to many programmers, as they need IDE (integrated development environment features) and tools like ''ediff'' and ''emerge'' (for comparing and merging different versions of a file, for example).

Of course this generalization can fail us.  Many programmers started as, or spent stints as systems administrators and developed a preference for ''vi'' over ''emacs.''  A modern version of ''vim'' can support almost any of the features one would expect of ''emacs.''

Conversely many people are uncomfortable with ''vi's'' notorious "modal" paradigm.  They never become accustomed to "command" vs. "insert" or "replace" modes and often consider the very notion to be atavistic.

Some tips:

  * In emacs and xemacs one can access the vi keybindings using the command: '''M-x viper''' (That's [Alt]+[x]viper[Enter] or [Esc][x]viper[Enter] --- either should work, but the latter will work on terminals/keyboards that don't have an [Alt] key).
  * In ''vim'' use the ''ex''-mode command ''':syntax on''' to enable syntax highlighting (which is often configured to be off by default.
  * To learn the basics of ''vim'' very quickly run the command ''vimtutor'' (it's a set of macro files that run in ''vim'' and teach one how to use it)
  * To learn the rudiments of ''emacs'' use: '''C-h, t'' (from inside the editor of course). (That's [Ctrl]+[h] and then [t]).  This will start the tutorial system that's written in emacs' "elisp" version of the LiSP programming language.

Ultimately the choice of a text editor is a highly personal one, so flame wars on the topic of vi vs. emacs are little more than a past-time for those who have already made up their minds.

----
CategoryEditors CategoryEditors
