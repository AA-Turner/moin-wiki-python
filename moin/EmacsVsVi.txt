EMACS and vi used to be the most popular families of text editors. There are several implementations of each. 

The user interface of EMACS is mostly modeless.  The user interface of
vi traditionally has a '''command mode''' and an '''insert mode'''.  Each
character has a different meaning depending on which mode '''vi''' is in.
Commands in EMACS are traditionally given by modifier keys like {{{Ctrl}}},
{{{Alt}}} and so on.

In earlier times EMACS became ''famous'' for its size and memory consumption
(EMACS = Eight Megabytes And Constantly Swapping ;) ).  With today's computers this
is no longer a problem.

Good Python language support is available for both editors, and modern implementations such as GnuEmacs and ViImproved are extensible in Python.

Which editor suits your personal needs better is a matter of taste.
Since both are OpenSource, free and mature, try both and choose one. :)

It should be noted that one can have the BestOfBothWorlds by running ViperMode in EMACS.  Simply run meta-x "viper-mode", and blammo, you get vi keybindings.  EMACS is a wonderful operating sytem.  Now it has a decent editor... :)

----
'''Discussion:'''

Emacs has evolved into an application framework, I see many simple applications turning into application frameworks, Emacs, Netbeans, Mozilla !!!!
When I see this happen I think those project must have really lacked strategic management...
yep software makers need to realize the importance of management and strategic management, if you are
going to make a software that you want to see being used and improving after 5+ years you need to sit down
and read about strategic management, set a vision for you project, a mission, objectives and goals
else you will start by building a text editor and end up with one of the worst application frameworks available, Emacs is just another software project that lacked a clear good and sound vision and mission
and that is why I think we should all use Vim, because Vim knows what it is (mission), and what it wants to be (vision)

  Emacs was pretty much always ''intended'' to be an applications framework.  Its macro language is a full-featured programming language (Lisp), so you cam build anything with it.  It's also far more customizable than vi and clones, and has features that make it a full-fledged IDE.  You can extend it with Lisp and now with Python (see pymacs).
----
''Emacs is just another software project that lacked a clear good and sound vision and mission and that is why I think we should all use Vim, because Vim knows what it is (mission), and what it wants to be (vision)''

You seem to make a number of different points: you claim that a vision/mission is needed for a software project to be used and improved after 5+ years. Python doesn't have a real mission/vision. It's still in use, after 12 years. According to you Emacs doesn't have a mission either. It's still being used and improved after ca. 25 years.

I'm not sure if Emacs is one of the worst application frameworks available, I've never developed any substantial programs, but I like it for (extensive) customization. Why do you claim Emacs is a bad application framework?
----
''Python doesn't have a real mission/vision''
then it should, maybe that would help the developers, understand more where python want to go
what it want to be, visions, missions and goals shoul not be too rigid they can change over time
and from time to time.
Remember this famous quote:"Plans are nothing; Planning is everything."-Dwight D. Eisenhower
The motive behind having a Vision and Mission, is providing basis for the planning of the projects
and a basis to decide on goals and objectives. Planning for a project is serious issues.
Don't think hey after 12 years without a mission we are still here! yes lucky we are!! others are not.
Ask after 12 years from now, where would we want to be? and make that mission or vision or whatever
I think Guido Van Rossum always has a vision and a mission, but he never explicitly said it, like when
he says he wants python to be used in education, or to be the best programming languages for education.
This implies his vision, and according to python, explicit is better then implicit!!!
So why not make a vision statement
All those statements should not be taken lightly they can be used to construct a vision and a mission
and most developer interested in improving python should have em in mind!! And I think most of them already do, they just dont know what to call it!!!
I see lots of programming problems being solved are technical issues, when all they need is few lessons
from the management schools. And many projects fail!!!
You could be right, a good product sells itself!!! You won't be the only one who believes so.
Few planning statements definitly won't slow the progress of any project.

As for Emacs, maybe I used the wrong word to describe it, I should have used application platform!
have you seen any application that uses Emacs, ERC for example!
What advantages does it have!!! Nothing
Apps done for Gnome/Kde look better, feel better, it's easier to switch between apps on Gnome/kde
I say it's bad cause it is!
I read somewhere a really nice comment on Emacs vs Vim, it's that most ppl who uses Emacs don't use
the shortcut or the overwhelming features. In vim do use and learn most of it features, probably because they easier to reach for, zz is my friend! :set linebreak , :set nu 
I won't even try to look how those can be done in Emacs, they are too easy to do in Vim
Plus I can open x-chat, k-mail, Vim, Eclipse...all in Kde and switch between em usinf (alt-tab)

Where is Emacs after 25, well, it definitly doesn't look like 25 worth of work!!!
Is it because it didn't have a Vision and a Mission, no... because I bet RMS had something in mind
he never explictly said, and not one was able to discuss that with him, because no one can read your mind!!!

So I am not saying a Vision or a Mission as an end, but a mean to a better end!
I hope my vision is clearer this time --systems :)
