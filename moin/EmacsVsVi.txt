EMACS and vi used to be the most popular families of text editors. There are several implementations of each. 

The user interface of EMACS is mostly modeless.  The user interface of
vi traditionally has a '''command mode''' and an '''insert mode'''.  Each
character has a different meaning depending on which mode '''vi''' is in.
Commands in EMACS are traditionally given by modifier keys like {{{Ctrl}}},
{{{Alt}}} and so on.

In earlier times EMACS became ''famous'' for its size and memory consumption
(EMACS = Eight Megabytes And Constantly Swapping ;) ).  With today's computers this
is no longer a problem.

Good Python language support is available for both editors, and modern implementations such as GnuEmacs and ViImproved are extensible in Python.

Which editor suits your personal needs better is a matter of taste.
Since both are OpenSource, free and mature, try both and choose one. :)

It should be noted that one can have the BestOfBothWorlds by running ViperMode in EMACS.  Simply run meta-x "viper-mode", and blammo, you get vi keybindings.  EMACS is a wonderful operating sytem.  Now it has a decent editor... :)

----
'''Discussion:'''

has evolved into an application framework, I see many simple applications turning into application frameworks, Emacs, Netbeans, Mozilla !!!!
When I see this happen I think those project must have really lacked strategic management...
yep software makers need to realize the importance of management and strategic management, if you are
going to make a software that you want to see being used and improving after 5+ years you need to sit down
and read about strategic management, set a vision for you project, a mission, objectives and goals
else you will start by building a text editor and end up with one of the worst application frameworks available, Emacs is just another software project that lacked a clear good and sound vision and mission
and that is why I think we should all use Vim, because Vim knows what is it (mission), and what it wants to be (vision)

  Emacs was pretty much always ''intended'' to be an applications framework.  Its macro language is a full-featured programming language (Lisp), so you cam build anything with it.  It's also far more customizable than vi and clones, and has features that make it a full-fledged IDE.  You can extend it with Lisp and now with Python (see pymacs). ''vi'' is a crutch for those who can't handle ''emacs''!
