As it stands, Guido van Rossum has suggested that lambda forms will disappear in ["Python3.0"].  This started a number of threads on comp.lang.python suggesting alternate syntaxes for lambda in the hopes that one of them might be more amenable to GvR's tastes.  This pages summarizes these suggestions:

== Current Syntax ==

{{{#!python
lambda a, b, c:f(a) + o(b) - o(c)
lambda x: x * x
lambda : x
lambda *a, **k: x.bar(*a, **k)
((lambda x=x, a=a, k=k: x(*a, **k)) for x, a, k in funcs_and_args_list)
}}}

== New Syntaxes ==

=== Args Before Expression ===

Nick Coghlan: def-to syntax [[#a 1]]
{{{#!python
(def (a, b, c) to f(a) + o(b) - o(c))
(def (x) to x * x)
(def () to x)
(def (*a, **k) to x.bar(*a, **k))
((def (x=x, a=a, k=k) to x(*a, **k)) for x, a, k in funcs_and_args_list)
}}}

Nick Coghlan: def-arrow syntax [[#a 1]]
{{{#!python
(def (a, b, c) -> f(a) + o(b) - o(c))
(def (x) -> x * x)
(def () -> x)
(def (*a, **k) -> x.bar(*a, **k))
((def (x=x, a=a, k=k) -> x(*a, **k)) for x, a, k in funcs_and_args_list)
}}}

Alex Martelli: def-as syntax [[#b 2]]
{{{#!python
(def (a, b, c) as f(a) + o(b) - o(c))
(def (x) as x * x)
(def () as x)
(def (*a, **k) as x.bar(*a, **k))
((def (x=x, a=a, k=k) as x(*a, **k)) for x, a, k in funcs_and_args_list)
}}}

Dave Benjamin: fun syntax [[#g 7]]
{{{#!python
(fun(a, b, c): f(a) + o(b) - o(c))
(fun(x): x * x)
(fun(): x)
(fun(*a, **k): x.bar(*a, **k))
((fun(x=x, a=a, k=k): x(*a, **k)) for x, a, k in funcs_and_args_list)
}}}

Roman Suzi: quote-colon syntax [[#i 9]]
{{{#!python
` a, b, c:f(a) + o(b) - o(c)
` x: x * x
` : x
` *a, **k: x.bar(*a, **k)
((` x=x, a=a, k=k: x(*a, **k)) for x, a, k in funcs_and_args_list)
}}}

=== Expression Before Args ===

Nick Coghlan: for syntax [[#f 6]]
{{{#!python
(f(a) + o(b) - o(c) for (a, b, c))
(x * x for (x))
(x for ())
(x.bar(*a, **k) for (*a, **k))
((x(*a, **k) for (x=x, a=a, k=k)) for x, a, k in funcs_and_args_list)
}}}

Robert Brewer: for (no-parens) syntax [[#c 3]]
{{{#!python
(f(a) + o(b) - o(c) for a, b, c)
(x * x for x)
(x for ())
(x.bar(*a, **k) for *a, **k)
((x(*a, **k) for (x=x, a=a, k=k)) for x, a, k in funcs_and_args_list)
}}}

Nick Coghlan: def-from syntax [[#d 4]]
{{{#!python
(def f(a) + o(b) - o(c) from (a, b, c))
(def x * x from (x))
(def x from ())
(def x.bar(*a, **k) from (*a, **k))
((def x(*a, **k) from (x=x, a=a, k=k)) for x, a, k in funcs_and_args_list)
}}}

Nick Coghlan: from syntax (posted to clp, no reference handy)
{{{#!python
(f(a) + o(b) - o(c) from (a, b, c))
(x * x from (x))
(x from ())
(x.bar(*a, **k) from (*a, **k))
((x(*a, **k) from (x=x, a=a, k=k)) for x, a, k in funcs_and_args_list)
}}}

Michael Spencer: from-args syntax [[#e 5]]
{{{#!python
(f(a) + o(b) - o(c) from args(a, b, c))
(x * x from args(x))
(x from args())
(x.bar(*a, **k) from args(*a, **k))
((x(*a, **k) from args(x=x, a=a, k=k)) for x, a, k in funcs_and_args_list)
}}}

Michael Spencer: for-args syntax [[#e 5]]
{{{#!python
(f(a) + o(b) - o(c) for args(a, b, c))
(x * x for args(x))
(x for args())
(x.bar(*a, **k) for args(*a, **k))
((x(*a, **k) for args()) for x, a, k in funcs_and_args_list)
}}}

Bengt Richter: colon-function-application syntax [[#h 8]]
{{{#!python
(:f(a) + o(b) - o(c))(a, b, c)
(:x*x)(X)
(:x)()
(:x.bar(*a, **k))(*a, **k)
((:x(*a, **k))(x=x, a=a, k=k) for x, a, k in funcs_and_args_list)
}}}

=== Real Closures ===

Real closures subsume the functionality of lambda plus allow for multi-line statements.

----

Curly braces for single-line and anonymous def for multi-line (from [[#h 10]], boo [[#h 11]], and this is also very similar to how Ruby does it):
{{{#!python
#single-line (similar to ruby syntax)
{a,b,c | return f(a) + o(b) - o(c)}
{x | return x*x}
{return x}
{*a, **k | return x.bar(*a, **k)}

#multi-line
x = def (a,b,c):
    return f(a) + o(b) - o(c)
}}}

----

Perhaps anonymous def for single line, anonymous def for single-line?

{{{
foo.addCallback(def (result): result + 1)
foo.addCallback(def (result, myExtra, args):
                     print 'hi!'
                     result += 1
                     return result
                , extra, args=here)
}}}


== References ==
 * [[Anchor(a)]] [1] http://mail.python.org/pipermail/python-list/2004-December/256859.html
 * [[Anchor(b)]] [2] http://mail.python.org/pipermail/python-list/2004-December/256881.html
 * [[Anchor(c)]] [3] http://mail.python.org/pipermail/python-list/2004-December/257023.html
 * [[Anchor(d)]] [4] http://boredomandlaziness.skystorm.net/2004/12/anonymous-functions-in-python.html
 * [[Anchor(e)]] [5] http://mail.python.org/pipermail/python-list/2004-December/257893.html
 * [[Anchor(f)]] [6] http://mail.python.org/pipermail/python-list/2004-December/257977.html
 * [[Anchor(g)]] [7] http://mail.python.org/pipermail/python-list/2005-January/258441.html
 * [[Anchor(h)]] [8] http://mail.python.org/pipermail/python-list/2005-January/258578.html
 * [[Anchor(i)]] [9] http://mail.python.org/pipermail/python-list/2005-January/258581.html
 * [[Anchor(i)]] [10] http://mail.python.org/pipermail/python-list/2005-January/258113.html
 * [[Anchor(i)]] [11] http://boo.codehaus.org/Closures
