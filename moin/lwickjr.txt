Welcome to my page.

I have a few questions that I've been unable to find answer for.

All the documentation I've seen seems to assume that someone wanting to publish Python modules has -- and knows how to use -- a 24/7 file server available to use.

This is not always the case.

Further, I have found the documentation on distributing Python modules to be strong on the mechanicals of how to PACKAGE modules [somewhat over-kill, I think, for simple drop-in single-file modules], and nearly non-existant on how to PUBLISH them.

Could someone __please__ write a page on ["How to publish Python modules"] that is understandable by someone with significant *computer* experience but minimal *internet* experience?

== Links  ==

SkipMontanaro

----

Hi Iwick, before I answer some of your questions, I'd like you to consider Wiki:RealNamesPlease. It is one of our WikiGuidelines, and it has worked well for us so far.

I'm not completely sure what you mean by publishing Python modules. If you need a space to upload your Python modules, you might want to consider StarshipPython. It used to be free for PSA members, but the PSA has ceased to exist, so I guess a small donation to the PythonSoftwareFoundation will do now. Would that solve your problem?

-- JohannesGijsbers

["lwickjr"]: Possibly. I've written a few useful-to-me modules that I think others might also find useful. I'd like to share them, but I am NOT on-line 24/7, and would like someone to host them for downloading. As for WikiNames, would LWickJr do? If so, how do I change it?

----

My more-interesting modules [by the way, how do I link to a Wiki page with text that doesn't match the destination page's name?] include "Alias", "Edit", and "UT". I'll add others to this page as I have opportunity [the machine I'm typing this on isn't my home system].

General outlines:

 * Alias
   * Provides a mechanism whereby arbitrary callables are *effectively* converted to commands in interactive Python, but not in modules. To do this, Alias splits off the first word of the command line, attempts to evaluate it, and iff it is callable, the tail of the command is also evaluated and passed to the callable as an argument tuple. This allows the manual use of "dir", "reload", et al, as statements without requiring that parentheses be typed. Parentheses are still required in module source, however, and in any function calls in the tail of the command line.
   * Provides a mechanism whereby arbitrary one-word names may be assigned to callable objects for use with the preceding mechanism. This allows one to dispense with the requirement to type fully-quaqlified long.nested.module.names for selected callables, and is where the module gets its name.
   * Provides a mechanism for allowing modules to be imported through a bare reference to the module name.
   * Provides a mechanism whereby modules imported by the preceding mechanism may auto-register aliases of their own choosing. Entering the name of a module that has already been imported does not re-import the module; rather it re-updates whatever auto-alias associations might exist in that module at the time the name is re-entered.
   * Provides its own list of aliases, available via the preceding mechanism, for managing the alias dictionary.

 * Edit
 * UT
----
CategoryHomepage
