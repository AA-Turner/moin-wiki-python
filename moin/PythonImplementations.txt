<<TableOfContents>>

= Python Implementations =
An "implementation" of Python should be taken to mean a program or environment which provides support for the execution of programs written in the Python language, as represented by the [[CPython]] reference implementation.

There have been and are several distinct software packages providing of what we all recognize as Python, although some of those are more like distributions or variants of some existing implementation than a completely new implementation of the language.

== CPython Variants ==
These are implementations based on the [[CPython]] runtime core (the de-facto reference Python implementation), but with extended behaviour or features in some aspects.

 * [[http://crosstwine.com/linker/python.html|CrossTwine Linker]] - a combination of CPython and an add-on library offering improved performance (currently proprietary)
 * [[StacklessPython|Stackless Python]] - CPython with an emphasis on concurrency using tasklets and channels (used by [[https://www.develer.com/trac/dspython/|dspython]] for the Nintendo DS)
 * [[http://code.google.com/p/unladen-swallow/|unladen-swallow]] - "an optimization branch of CPython, intended to be fully compatible and significantly faster", originally considered for merging with CPython subject to [[PEP:3146|PEP 3146]], but now unmaintained
 * [[http://code.google.com/p/wpython/|wpython]] - a re-implementation of CPython using "wordcode" instead of bytecode

Also look at the sections on Python compilers and extensions below, some of which would qualify as CPython variants.

== Other Implementations ==
These are re-implementations of the Python language that do not depend on (or necessarily interact with) the [[CPython]] runtime core. Many of them reuse (a large part of) the standard library implementation.

Note that most of these projects have not yet achieved language compliance. However, many of these have goals and features or run in certain environments that make them interesting in their own regard. The only implementations that are known to be compatible with a given version of the language are IronPython, [[Jython]] and PyPy.

=== Working Implementations ===
The following implementations may be comprehensive or even complete, but at the very least can be said to be working in that you can run typical programs with them already:

 * [[http://www.brython.info/|Brython]] - a way to run Python in the browser through translation to JavaScript
 * [[CLPython]] - Python in Common Lisp
 * [[http://www.dcs.gla.ac.uk/~marks/|HotPy]] - a virtual machine for Python supporting bytecode optimisation and translation (to native code) using type information gathered at run-time
 * IronPython - Python in C# for the Common Language Runtime (CLR/.NET) and the [[http://fepy.sourceforge.net/|FePy]] project's IronPython Community Edition (IPCE)
 * [[Jython]] - Python in Java for the Java platform
 * [[http://pyjs.org/|pyjs]] - (formally Pyjamas) a Python to JavaScript compiler plus Web/GUI framework
 * PyMite - Python for embedded devices
 * PyPy - Python in Python, targeting several environments
 * [[http://students.ceid.upatras.gr/~sxanth/pyvm-2.0/|pyvm]] - a Python-related virtual machine and software suite providing a nearly self-contained "userspace" system
 * [[https://github.com/atsepkov/RapydScript|RapydScript]] - a Python-like language that compiles to JavaScript
 * [[http://www.synapse-wireless.com/documents/whte_paper/SNAP_WP_102108.pdf|SNAPpy]] - "a subset of the Python language that has been optimized for use in low-power embedded devices" (apparently proprietary)
 * [[http://www.tinypy.org/|tinypy]] - a minimalist implementation of Python in 64K of code

=== Tentative Implementations ===
The following implementations are apparent works in progress; they may not be able to run typical programs:

 * [[http://wiki.github.com/bjpop/berp/|Berp]] - an implementation of Python 3 in Haskell, providing an interactive environment as well as a compiler
 * [[http://sourceforge.net/projects/phpython/|phpython]] - a Python interpreter written in PHP
 * [[http://pyjaco.org/|Pyjaco]] - a Python to JavaScript compiler similar to Pyjs but lighterweight
 * [[http://code.google.com/p/pystachio/|Pystacho]] is, like Skulpt, Python in JavaScript
 * [[http://www.twistedmatrix.com/users/z3p/files/pyvm2.py|pyvm2.py]] - a CPython bytecode interpreter written in Python, [[http://mail.python.org/pipermail/pypy-dev/2003-January/000048.html|mentioned on the PyPy mailing list in 2003]]
 * [[http://www.skulpt.org/|Skulpt]] - Python in JavaScript
 * [[https://github.com/vic/typhon|Typhon]] - a [[http://rubini.us/|Rubinius]]-based implementation of Python

== Extensions ==
These are typically part of CPython (or some other implementation) but change the implementation's behaviour:

 * [[http://psyco.sf.net|Psyco]] - a just-in-time specialising compiler for CPython

== Compilers ==
These compilers usually implement something close to Python, although some compilers may impose restrictions that alter the nature of the language:

 * [[http://code.google.com/p/2c-python/|2c-python]] - a static Python-to-C compiler, apparently translating CPython bytecode to C
 * [[http://www.grant-olson.net/python/compyler|Compyler]] - an attempt to "transliterate the bytecode into x86 assembly" (now abandoned)
 * [[http://cython.org/|Cython]] - a widely used optimising Python-to-C compiler, CPython extension module generator, and wrapper language for binding external libraries. Interacts with CPython runtime and supports embedding CPython in stand-alone binaries.
 * [[http://gcc.gnu.org/wiki/PythonFrontEnd|GCC Python Front-End]] - an in-progress effort to compile Python code within the GCC infrastructure
 * [[http://nuitka.net/|Nuitka]] - a Python-to-C++ compiler using libpython at run-time, attempting some compile-time and run-time optimisations. Interacts with CPython runtime.
 * [[http://sourceforge.net/projects/pyc/|Pyc]] - performs static analysis in order to compile Python programs, uses similar techniques to Shed Skin
 * [[http://code.google.com/p/shedskin/|Shed Skin]] - a Python-to-C++ compiler, restricted to an implicitly statically typed subset of the language for which it can automatically infer efficient types through whole program analysis
 * [[http://code.google.com/p/unpython/|unPython]] - a Python to C compiler using type annotations

== Numerical Accelerators ==
 * [[http://copperhead.github.com/|Copperhead]] - purely functional data-parallel Python, compiles to multi-core and GPU backends
 * [[http://numba.pydata.org|Numba]] - NumPy-aware optimizing runtime compiler for Python
 * [[http://https://github.com/iskandr/parakeet|Parakeet]] - runtime compiler for a numerical subset of Python

== Similar but Distinct Languages ==
These languages don't attempt to be directly compatible even with a subset of Python, choosing to provide their own set of features:

 * [[http://www.alorelang.org/|Alore]] - a compilable language with optional typing and Python/Ruby inspired syntax; an Alore-Python bridge is planned; development effort has been transferred to mypy (see below)
 * [[http://boo.codehaus.org/|Boo]]
 * [[Cobra]]
 * [[http://convergepl.org/|Converge]] - inspired by Python, Haskell, Icon and Smalltalk, provides macros which can be evaluated at compile-time
 * [[http://delight.sourceforge.net/|Delight]] - based on the D programming language
 * [[http://live.gnome.org/Genie|Genie]] - based on the same foundations (Gtk+, GNOME) as the Vala programming language, supposedly inspired by Boo
 * [[http://www.mypy-lang.org/|mypy]] - Python with optional static typing and some local type inference
 * [[http://mython.org/|Mython]] - an extensible variant of the Python programming language, apparently a front-end for CPython
 * [[http://nimrod-lang.org/|Nimrod]] - statically typed, compiles to C, features parameterised types, macros, and so on
 * [[http://www.pythonect.org/|Pythonect]] - a dataflow-oriented language adopting the basic Python expression syntax, implemented in Python and integrated with the Python environment
 * [[http://code.google.com/p/rsl-interpreter/|Roket Secured Language]] - an interpreter for a Python-like language for applications where "restricted Python" execution is desired
 * [[http://serpent.sourceforge.net/|Serpent]] - inspired by Python, supporting real-time garbage collection and multiple virtual machines in separate threads [[https://www.cs.cmu.edu/~music/aura/serpent-info.htm|(more information)]]
 * [[http://somefancy.com/trylon/|Trylon]] - inspired heavily by Smalltalk
 * [[http://mathias-kettner.de/wirbel.html|Wirbel]] - a compilable language with similar restrictions to Shed Skin (statically typed names, lists cannot mix elements of different types), no longer actively developed as of 2011-07-21

Comparisons:

 * Comparisons of [[http://jamiemcc.livejournal.com/12009.html?thread=225769#t225769|Genie and Wirbel]] and [[http://bkhome.org/genie/|Genie and Python]] by the lead developer of the Puppy Linux distribution
 * Some [[http://code.valaide.org/category/tags/genie|Genie code samples]] indicating the differences between that language and other Python variants

== Topic Guides ==
 * EmbeddedPython
 * PythonDistributions

== (Fun) Python Preprocessors ==
There are even some tongue-in-cheek dialects of Python which you might find fun.

 * [[http://www.staringispolite.com/likepython/|Like, Python]]
 * [[http://www.dalkescientific.com/writings/diary/archive/2007/06/01/lolpython.html|LOLPython]]

== Academic Projects ==
Python implementations and compilers have been the topic of various papers and theses. Those that have not apparently been developed further are listed here:

 * [[http://www.duo.uio.no/sok/work.html?WORKID=23058&lang=en|QGen : A Python to Qt/C++ translator]] - a simple translator described in a master's thesis from 2004
 * [[http://mike.salib.com/writings/thesis/|Starkiller]] - a Python to C++ translator described, along with a review of contemporary tools, in a master's thesis from 2004 ([[http://mike.salib.com/|author's site]])

----
This page aims to replace one formerly maintained as "[[http://phaseit.net/claird/comp.lang.python/python_varieties.html|Cameron Laird's personal notes on varieties of Python implementation]]". Also of interest will be IntegratingPythonWithOtherLanguages, which, among other variants, mentions ''embeddings'' of Python in other languages.

----
CategoryImplementations
