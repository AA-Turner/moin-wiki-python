= ODBC =

[[WikiPedia:ODBC]] stands for ''Open Database Connectivity'', the industry standard for database C APIs.

Most databases ship with ODBC drivers, so chances are high that you can use one of these drivers together with a Python ODBC interface to connect your Python application with any database on the market.

----

== DB API 2.0 Drivers ==

=== mxODBC ===

 URL::
 http://www.egenix.com/products/python/mxODBC/

 License:: eGenix Commercial License 1.3.0
 Platforms:: Windows 32/64-bit, Linux 32/64-bit, MacOS X 10.4-10.6 32/64-bit, FreeBSD 32/64-bit, Solaris, AIX
 Python versions:: 2.3 - 2.7

Commercially supported ODBC database interface from eGenix.com; actively maintained since 1997.

Supports Windows, Mac OS X, iODBC, unixODBC and !DataDirect ODBC driver managers. Is known to work with these ODBC drivers: MS SQL Server Native Client, MS SQL Server ODBC Driver, FreeTDS ODBC Driver, Oracle Instant Client ODBC Driver, IBM DB2 ODBC Driver, Sybase ASE ODBC Driver, Netezza ODBC Driver, Teradata ODBC Driver, PostgreSQL ODBC Driver, MySQL ODBC Driver, .MaxDB ODBC Driver as well as the ODBC driver sets of !EasySoft, !DataDirect, !OpenLink, Actual Technologies.

=== pyodbc ===

 URL::
 http://code.google.com/p/pyodbc

 License:: MIT
 Platforms:: Windows, Linux, MacOS X, FreeBSD, Solaris, Any (source provided)
 Python versions:: 2.4 - 3.2

Actively maintained Open Source project.

Precompiled binaries are available for Windows. RedHat Enterprise Linux, Centos, and Fedora have precompiled RPMs available in their Extras repositories.

=== ceODBC ===

 URL::
 http://ceodbc.sourceforge.net

 License::
 Platforms:: Windows
 Python versions::

=== mxODBC Connect ===

 URL::
 http://www.egenix.com/products/python/mxODBCConnect/

 License:: eGenix Commercial License 1.3.0
 Platforms:: Windows, Linux, MacOS X, FreeBSD, Solaris, AIX
 Python versions:: 2.5 - 2.7

mxODBC Connect is a commercial client-server product that allows connecting Python to ODBC compatible databases running on remote servers without requiring an ODBC driver on the client side. The product uses mxODBC on the server side and provides a highly portable Python library for the client side. As such it supports all database backend that mxODBC supports, but allows connecting to these from many different Python-supported platforms.

For ODBC drivers supported on the server side, please see the mxODBC entry.

The 2.0 release also supports asynchronous query execution via the popular [[http://www.gevent.org/|gevent package]].

=== ODBTPAPI ===

 URL::
 http://benjiyork.com/odbtp.html

 License::
 Platforms::
 Python versions::

=== PyPyODBC ===

 URL::
 http://code.google.com/p/pypyodbc

 License:: MIT
 Platforms:: Windows, Linux
 Python versions:: 2.4 - 3.3

[[http://code.google.com/p/pypyodbc/wiki/A_HelloWorld_sample_to_access_mssql_with_python|A Hello World script of pypyodbc database programing]]

[[http://code.google.com/p/pypyodbc/wiki/pypyodbc_for_access_mdb_file|Built-in Access MDB file creation and compression functions on Windows.]]

[[http://code.google.com/p/pypyodbc/wiki/Enable_SQLAlchemy_on_IronPython|A DBI 2.0 SQLAlchemy enabler driver for IronPython]]

One pure Python script, runs on CPython / IronPython / PyPy , Version 2.4 / 2.5 / 2.6 / 2.7 / 3.2 / 3.3, Win / Linux , 32 / 64 bit.

Almost totally same usage as pyodbc ( can be seen as a re-implementation of pyodbc in pure Python ).

Simple - the whole module is implemented in a single python script with less than 3000 lines.


----

== DB API 1.0 Drivers ==

=== win32 odbc module (part of pywin32 package) ===

 URL::
 http://python.net/crew/mhammond/win32/

 License:: PSF and others
 platforms:: Windows
 Python versions:: 2.3 - 3.2

This interface is rather old, mostly unmaintained and only provides an DB-API 1.0 interface, but listed here since it started the Python DB-API specification development back in 1996.
