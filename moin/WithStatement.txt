This page is dedicated to the public discussion of [http://www.python.org/peps/pep-0343.html PEP 343]: Anonymous Block Redux and Generator Enhancements.

I think this is a good one; I hope people agree. Its acceptance will
obsolete about 4 other PEPs! (A sign that it fulfills a need and that
the proposed solution is powerful.)

Please read the PEP; then add your comments here.  Please sign your comments with your name.  ["GvR" Guido van Rossum]

----

I feel like PEP 343 and PEP 342 work together in some important way, but it's not clear what that is.  Does one depend on the other?  What kind of things are possible if both are accepted (vs. just one of them)?  I think this is important to understanding where PEP 343 is leading; some discussion of this would be appreciated.  -- IanBicking

  No, they are quite independent.  PEP 342 is for making generators into real coroutines.  Maybe thow() can help a tiny bit there but I think it's not essential.  PEP 342 adds argument-less yield to PEP 343 which is a very minor improvement (no "yield None").  ["GvR"]

----

The optional extension mentioned would not need to lead to mistakes if the __exit__ call would distinguish between 'with X' and 'with X as Y'. -- ''Eric Nieuwland''

  Please explain.  ["GvR"]

----

next_throw() is easier to grep with next(). ''Niki Spahiev''

----

I've tuned out the recent conversation on these PEPs quite religiously, because I never thought they would result in anything even vaguely useful.  Fortunately, I was dead wrong.  PEP-343 is simple, elegant, and feels very Pythonic to me.  I need to catch up now and think through the implications and corner-cases, but I can give a provisional +1 to the concept.  Thanks to all those that didn't tune out and worked to get us to this point.  -- ''Kevin Jacobs''
