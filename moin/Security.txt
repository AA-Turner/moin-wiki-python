Notes about Python Security.

== Taint mode ==

Nicole King (cats-muvva.net) wrote a taint mode for CPython 3.0: http://www.cats-muvva.net/software/

Problems:
 * amaury: ''The patch is indeed huge!''
 * fijall: ''it seems that every function that returns a PyObject must be modified''
 * fijall: ''need to patch (...) all places that might modify anything. (All side effects)''

=> ncoghlan: ''PyPy is still a *much* better platform for that kind of experimentation than CPython''

See also the presentation: [http://us.pycon.org/common/talkdata/PyCon2007/062/PyCon_2007.pdf Securing Python: Controling the abilities of the interpreter], PyCon US 2007, Brett Cannon and Eric Wohlstadter

== Python Security Response Team ==

Some members:
 * Brett Cannon

Email: security AT python.org

== Controlling Access to Resources Within The Python Interpreter ==

 * URL: http://sayspy.blogspot.com/2007/04/python-security-paper-online.html
 * Paper: [http://www.cs.ubc.ca/~drifty/papers/python_security.pdf Controlling Access to Resources Within The Python Interpreter], Brett Cannon and Eric Wohlstadter, University of British Columbia

== Sandboxing ==

See PyPy project: [http://codespeak.net/pypy/dist/pypy/doc/sandbox.html PyPy's sandboxing features].

== Unsafe modules ==

 * os.kill(), os.chown(), os.unlink(), ...
 * imageop: many bugs
   * [http://bugs.python.org/issue1179 [CVE-2007-4965] Integer overflow in imageop module] (2007-09 .. 2008-08)
