= UDP Communication =

[[TableOfContents()]]

== Sending ==

Here's simple code to post a note by UDP in Python:

{{{
#!python
import socket

UDP_IP="127.0.0.1"
UDP_PORT=5005
MESSAGE="Hello, World!"

print "UDP target IP:", UDP_IP
print "UDP target port:", UDP_PORT
print "message:", MESSAGE

sock = socket.socket( socket.AF_INET, # Internet
                      socket.SOCK_DGRAM ) # UDP
sock.sendto( MESSAGE, (UDP_IP, UDP_PORT) )
}}}

== Receiving ==

Here's simple code to receive UDP messages in Python:

{{{
#!python
import socket

UDP_IP="127.0.0.1"
UDP_PORT=5005

sock = socket.socket( socket.AF_INET, # Internet
                      socket.SOCK_DGRAM ) # UDP
sock.bind( (UDP_IP,UDP_PORT) )

while True:
    data, addr = sock.recvfrom( 1024 ) # buffer size is 1024 bytes
    print "received message:", data
}}}

== Discussion ==

I have two questions:
 * What is the 1024 in recvfrom?
   It is the buffer size.[[BR]]
   >>> help (sock.recvfrom)
 * How do you subscribe to a WikiPedia:Multicast_address ?

It seems that just setting UDP_IP to "224.0.0.250" (say) isn't quite good enough.

*
It would seem easy to extend this to a simple means to open a file on the sender side, send datagrams to the receiver side, and write those packets to a file there - I just wonder about synchronisation issues regarding the buffer...Anyone smart care to put something down, say as a simple practical extension of what is already here?  (And if you do it pls delete this message)
*
