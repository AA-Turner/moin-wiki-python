This page is primarily about tools that help, specifically, in generating '''documentation for software written in Python''', 
i.e., tools that can use language-specific features to automate at least a part of the code documentation work for you.
The last section also lists general documentation tools with no specific support for Python (though some of them are themselves written in Python).

Tools that support auto-documentation of code can be broadly classified into tools that:

 * import the code to generate documentation based on runtime introspection
 
 * parse and analyze the code statically (without running it)
 
See [[API Extraction|here]] for a longer explanation of the two concepts.

Tools that generate documentation from user-provided input typically use plain text markup formats such as
[[reStructuredText]] (reST, the markup used for writing the official Python documentation) or
[[http://daringfireball.net/projects/markdown/|Markdown]].


== Python docstrings ==

Python modules are usually documented using docstrings. You can read a module's docstrings from the Python interactive prompt with the `help()` function. For example:
{{{
import distutils
help(distutils)
}}}
The `help()` function uses Python's standard pydoc module, as does the `pydoc` command that comes with Python.


== Automatic Python API documentation generation tools ==

 * autosummary, an extension for the Sphinx documentation tool: http://sphinx.pocoo.org/ext/autosummary.html
 * [[http://sphinx.pocoo.org/ext/autodoc.html|autodoc]], a Sphinx-based processor that processes/allows reST doc strings,
 * [[https://pdoc3.github.io/pdoc|pdoc]], a simple command-line tool and library to auto-generate API documentation for Python modules. Designed to replace epydoc. Since 0.5.0 works with Python 3 only. Includes support for Numpydoc and Google-style docstrings, cross-linking across modules, documentation for variables and namedtuples, and a built-in HTTP server to view documentation of local packages.
 * PyDoc, http://pydoc.org/ documentation browser (in HTML) and/or an off-line reference manual.  Also in the standard library as [[http://docs.python.org/lib/module-pydoc.html|pydoc]]
 * pydoctor, https://launchpad.net/pydoctor replacement for now inactive Epydoc, pydoctor was born for the needs of Twisted project
 * Doxygen < http://www.doxygen.org > can create documentation in various formats (HTML, LaTeX, PDF, ...) and you can include formulas in your documentation (great for technical/mathematical software). Together with Graphviz < http://www.research.att.com/sw/tools/graphviz/ > it can create diagrams of your code (inhertance diagram, call graph, ...). Another benefit is that it handles not only Python, but also several other programming languages like C, C++, Java, etc.

= No longer under development =

 * Another PythonDoc - uses JavaDoc-style comments, and produces HTML and XML output.  Can also be used as a library, producing ElementTree descriptions of your source code. http://effbot.org/zone/pythondoc.htm
 * EpyDoc, http://epydoc.sourceforge.net/
 * [[https://svn.enthought.com/enthought/wiki/EndoHowTo|Endo]] from Enthought Tool Suite - generates HTML API documentation from docstrings and from plain comments that immediately precede variable assignments.
 * [[http://pudge.lesscode.org/|Pudge]] (defunct)
 * [[http://happydoc.sourceforge.net/|HappyDoc]] ([[http://sourceforge.net/projects/happydoc/forums/forum/30132/topic/3563472?message=8100340|not supported]]) - documentation extraction tool that uses the parse tree for a module to derive the information used in its output, rather that importing the module directly.
 * EasyDoc - uses an HTML-like markup language, similar to the language used by Wiki:JavaDoc; and produces HTML output (http://htmltmpl.sourceforge.net/easydoc.html)
 * PythonDoc - uses StructuredText input format (''not'' reST), and can produce HTML and XML output. It uses XML as an intermediate representation, to simplify the addition of new output formats.  http://starship.python.net/crew/danilo/pythondoc/
 * Apydia, http://apydia.ematia.de/

== Documentation processing tools ==

 * DocUtils, http://docutils.sourceforge.net/ [[reStructuredText]] processing engine
 * [[Sphinx]], http://sphinx.pocoo.org/ - converts reStructuredText documentation into various formats

== Other projects that can be used to produce API documentation ==

 * [[http://www.livinglogic.de/Python/xist/index.html|XIST]] - an XML based extensible HTML generator written in Python.
 * [[http://starship.python.net/crew/friedrich/HTMLgen/html/main.html|HtmlGen]] - a Python library for generating HTML documents.

== Other documentation processing tools ==

 * [[http://johnmacfarlane.net/pandoc/|Pandoc]] -- written in Haskell, this tool can read and write a number of formats (including reST).
 * [[http://www.unexpected-vortices.com/sw/rippledoc/|Rippledoc]] (formerly known as Gouda) -- a command-line tool written in Clojure (using Pandoc under the hood) to generate multi-chapter html documents from Markdown text files.

----
CategoryDocumentation
