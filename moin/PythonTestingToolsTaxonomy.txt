<<TableOfContents>>

Join the [[http://lists.idyll.org/listinfo/testing-in-python| Testing In Python (TIP)]] mailing list for Python testing tools discussions!


(!) This wiki page is originated from  [[http://pycheesecake.org/wiki/PythonTestingToolsTaxonomy | PyCheeseCake]] and it was originally created by [[http://agiletesting.blogspot.com/2011/08/new-location-for-python-testing-tools.html | Grig Gheorghiu]]

=== Unit Testing Tools ===

|| '''Tool''' || '''Category''' || '''Author''' || '''Part of''' || '''Claim to fame''' ||
|| [[http://pyunit.sourceforge.net/pyunit.html| unittest]] || unit testing || [[http://www.pythonconsulting.com/| Steve Purcell]] || [[http://docs.python.org/lib/module-unittest.html| Python standard lib]] || first unit test framework to be included in Python standard library; easy to use by people familiar with the xUnit frameworks; strong support for test organization and reuse via test suites ||
|| [[http://docs.python.org/lib/module-doctest.html| doctest]] || unit testing || [[http://www.python.org/peps/pep-0020.html| Tim Peters]] || [[http://docs.python.org/lib/module-doctest.html| Python standard lib]] || copy and paste output from shell session; [[http://agiletesting.blogspot.com/2005/02/agile-documentation-with-doctest-and.html| Agile Documentation]]: unit tests themselves can serve as documentation when combined with epydoc; also see [[http://agiletesting.blogspot.com/2005/08/agile-documentation-in-django-project.html| Django's approach]] ||
|| [[http://codespeak.net/py/current/doc/test.html| py.test]] || unit testing || [[http://codespeak.net/| Holger Krekel]] || [[http://codespeak.net/py/current/doc/home.html| py lib]] || no API!;automatic collection of tests; simple asserts; strong support for test fixture/state management via setup/teardown hooks; strong debugging support via customized traceback ||
|| [[http://somethingaboutorange.com/mrl/projects/nose/| nose]] || unittest extensions || [[http://somethingaboutorange.com/mrl/| Jason Pellerin]] ||  || unit test framework, used most notably by [[http://www.turbogears.org/| TurboGears]] and [[http://pylonshq.com/| Pylons]]; provides an alternate test discovery and running process for unittest, one that is intended to mimic the behavior of py.test as much as is reasonably possible without resorting to too much magic. More friendly with unittest.TestCase-based tests than py.test. There are also many [[http://nose-plugins.jottit.com/| plugins]] available. ||
|| [[https://github.com/Yelp/Testify/| testify]] || unittest extensions || [[http://engineeringblog.yelp.com/2010/10/now-testify.html#more| Yelp team]] ||  || unit test framework,  provides Enhanced test fixture setup, Split test suites into buckets for easy parallelization, PEP8 naming conventions & Fancy color test runner with lots of logging / reporting option. ||
|| [[http://twistedmatrix.com/trac/wiki/TwistedTrial| Trial]] || unittest extensions || [[http://mumak.net/| Jonathan Lange]] || [[http://www.twistedmatrix.com/| Twisted]] || Extension of unittest to support writing asynchronous unit tests using Deferreds and new result types ('skip' and 'todo'). Includes a command-line program that does test discovery and integrates with doctest and coverage. ||
|| [[https://launchpad.net/subunit| subunit]] || unittest extensions || [[https://launchpad.net/~lifeless| Robert Collins]] ||  || Transparently adds support for running unittest test cases/suites in a separate process : prevents system wide changes by a test destabilising the test runner. It also allows reporting from tests in another process into the unittest framework, giving a single integrated test environment. ||
|| [[https://launchpad.net/testresources| testresources]] || unittest extensions || [[https://launchpad.net/~lifeless| Robert Collins]] ||  || Provides a mechanism for managing 'resources' - expensive bits of infrastructure - that are needed by multiple tests. Resources are constructed and free on demand, but with an optional [[http://pycheesecake.org/wiki/TestSuite| TestSuite?]], the test run order is optimised to reduce the number of resource constructions and releases needed. Compatible with unittest. ||
|| [[https://launchpad.net/testtools| testtools]] || unittest extensions || [[http://mumak.net/wiki| Jonathan Lange]] ||  || Useful extensions to unittest derived from custom extensions by projects such as Twisted and Bazaar. ||
|| [[http://www.mems-exchange.org/software/DurusWorks/| Sancho]] || unit testing || [[http://www.mems-exchange.org/| MEMS and Nanotechnology Exchange]] || [[http://www.mems-exchange.org/software/| MEMS Exchange tools]] || Sancho 2.1 runs tests, and provides output for tests that fail; Sancho 2.1 does not count tests passed or failed; targets projects that do not maintain failing tests ||
|| [[http://cheeseshop.python.org/pypi/zope.testing| zope.testing]] || unit testing || Zope3 community ||  || Powerful test runner that includes support for post-mortem debugging of test failures. Also includes profiling and coverage reporting. This is a standalone package that has no dependencies on Zope and works just fine with projects that don't use Zope. ||
|| [[http://pypi.python.org/pypi/pry| pry]] || unit testing || [[http://corte.si/| Aldo Cortesi]] ||  || Elegant unit testing framework with built-in coverage analysis, profiling, micro-benchmarking and a powerful command-line interface. ||
|| [[http://pythoscope.org/| pythoscope]] || unit testing || [[http://joker.linuxstuff.pl/| Michal Kwiatkowski]] ||  || Tool that will automatically, or semi-automatically, generate unit tests for legacy systems written in Python. ||
|| [[http://www.logilab.org/project/logilab-common/| testlib]] || unittest extensions || [[http://www.logilab.fr/| Logilab]] || logilab-common || Gives more power to standard unittest. More assert* methods; support for module level setup/teardown; skip test feature... ||
|| [[http://www.logilab.org/project/logilab-common/| pytest]] || tests runner || [[http://www.logilab.fr/| Logilab]] || logilab-common || Tests finder / runner. Selectivly run tests; Stop on first failure; Run pdb on failed tests; Colorized reports; Run tests with coverage / profile enabled... ||
|| [[http://pypi.python.org/pypi/dutest| dutest]] || unittest extensions || [[http://simelo-en.blogspot.com/| Olemis Lang]] || [[http://flioops.sf.net/| PyOOP package]] (distributed separately too) || An object oriented interface to retrieve unittest test cases out of doctests. Hides initialization from doctests by allowing setUp and tearDown for each interactive example. Allows control over all the options provided by doctest. Specialized classes allow selective test discovery across a package hierarchy. ||

The following tools are not currently being developed or maintained as far as we can see. They are here for completeness, with last activity date and an indication of what documentation there is. If you know better, please edit.

|| '''Tool''' || '''Last Activity''' || ''' Category ''' || '''Author''' || '''Claim to fame''' ||
|| [[http://testoob.sourceforge.net/| TestOOB]] || 2009 || unittest extensions || [[http://freshmeat.net/%7Eoripel/| Ori Peleg]] || unittest enhancements; test filtering via regex/glob patterns; reporting in XML/HTML; colorized output; runs pdb on failing tests; run in parallel in threads/processes; verbose asserts; report failures immediately; and a little more; ||
|| [[http://sourceforge.net/projects/pyunitperf| pyUnitPerf]] || 2009 ||performance-based unit testing || [[http://agiletesting.blogspot.com/| Grig Gheorghiu]] || port of [[http://www.clarkware.com/software/JUnitPerf.html| JUnitPerf]]; transparently adds [[http://agiletesting.blogspot.com/2004/12/performance-testing-with-pyunitperf.html| performance testing capabilities]] to existing unitttest-based test suites ||
|| [[https://github.com/darius/peckcheck| Peckcheck]] || 2008 ||specification-based unit testing || [[http://wry.me/blog/| Darius Bacon]] || like the unittest module, except that test methods may take arguments; you declare each argument with a default value which names a test-data generator and the peckcheck module will peck at your test methods with a bunch of generated values ||
|| [[http://code.google.com/p/testosterone/| testosterone]] || 2008 || unit testing || [[http://www.zetadev.com/| Chad Whitacre]] || A manly test runner; command-line and curses(3) interfaces; the iPod of test runners. (More seriously, makes it easier to browse and inspect your test failures) ||
|| [[http://freshmeat.net/projects/qunittest/| qunittest]] || 2004 ||unit testing || [[http://www.edgewall.com/| Edgewall]] || Easy-to-use (PyQt) GUI framework and application for use with the Python unit testing framework. It can be used to conveniently execute unit tests and suites, and then display the results in a useful fashion. ||


=== Mock Testing Tools ===

See also [[http://garybernhardt.github.com/python-mock-comparison|here]] for a side-by-side syntax comparison between some of the more popular tools in this space.

|| '''Tool''' || '''Category''' || '''Author''' || '''Claim to fame''' ||
|| [[http://github.com/nsigustavo/ludibrio/| Ludibrio]] || mocks, stubs, spy, and dummies || Gustavo Rezende || Elegant test doubles framework in Python (mocks, stubs, spy, and dummies) ||
|| [[http://python-mock.sourceforge.net/| Python Mock]] || mock testing || [[http://www.thedeveloperscoach.com/| Dave Kirby]] || Python Mock enables the easy creation of mock objects that can be used to emulate the behaviour of any class that the code under test depends on. You can set up expectations about the calls that are made to the mock object, and examine the history of calls made. This makes it easier to unit test classes in isolation. [[http://sourceforge.net/projects/python-mock/| Download it here.]] ||
|| [[http://theblobshop.com/pymock| PyMock]] || mock testing || [[http://theblobshop.com/| Jeff Younker]] || PyMock is based on the Java [[http://www.easymock.org/| easymock]] package. It uses a recording and replay model rather than using a specification language. Easymock lives up to its name compared to other mocking packages. PyMock takes advantage of python's dynamic nature for futher improvements. ||
|| [[http://www.voidspace.org.uk/python/mock.html| mock]] || mock testing || Michael Foord aka [[http://www.voidspace.org.uk/python/weblog/index.shtml| Fuzzyman]] || Provides "action -&gt; assertion" mocking patter, instead of standard "record -&gt; replay" pattern ||
|| [[http://pmock.sourceforge.net/| pMock]] || mock testing || Graham Carlyle || Inspired by the Java [[http://www.jmock.org/| jMock]] library, pMock makes the writing of unit tests using mock object techniques easier. Development of pmock has long since stopped and so it can be considered dead. ||
|| [[http://blog.ianbicking.org/minimock.html| minimock]] || mock testing || [[http://blog.ianbicking.org/| Ian Bicking]] || Embeds mock testing constructs inside doctest tests. ||
|| [[http://oakwinter.com/code/svnmock/| svnmock]] || mock testing || [[http://oakwinter.com/code/| Collin Winter]] || enables easier testing of Python programs that make use of [[http://subversion.tigris.org/| Subversion's]] Python bindings ||
|| [[http://labix.org/mocker| Mocker]] || mock testing || [[http://blog.labix.org/| Gustavo Niemeyer]] || Graceful platform for test doubles in Python (mocks, stubs, fakes, and dummies). Well-documented and fairly feature-complete. ||
|| [[http://www.reahl.org/project?name=stubble| Stubble]] || stub testing || [[http://www.reahl.org/| Iwan Vosloo]] || Stubble allows you to write arbitrary classes for use as stubs instead of read classes while testing. Stubble lets you link a stub class loosely to the real class which it is a stub for. This information is then used to ensure that tests will break if there is a discrepancy between the interface supported by your stub class and that of the real class it stands in for. ||
|| [[http://code.google.com/p/pymox/| Mox]] || mock testing || smiddlek, dglasser || Mox is based on EasyMock, a Java mock object framework. Mox will make mock objects for you, so you don't have to create your own! It mocks the public/protected interfaces of Python objects. You set up your mock objects expected behavior using a domain specific language (DSL), which makes it easy to use, understand, and refactor! ||
|| [[http://github.com/gfxmonk/mocktest/tree/master| MockTest]] || mock testing || Tim Cuthbertson (gfxmonk) || Mocktest allows you to mock / stub objects and make expectations about the methods you expect to be called as well as the arguments they should be called with. Expectations are very readable and expressive, and checked automatically. Any stubbed methods are reverted after each test case. Still under development, so subject to change ||
|| [[http://farmdev.com/projects/fudge/| Fudge]] || mock and stub testing || [[http://farmdev.com/| Kumar McMillan]] || A module for using fake objects (mocks, stubs, etc) to test real ones. Uses a declrative syntax like jMock whereby you set up expectations for how an object should be used. An error will raise if an expectation is not met. ||
|| [[http://code.google.com/p/mockito/wiki/MockitoForPython| Mockito for Python]] || mock and stub testing || [[http://monkeyisland.pl/| Szczepan Faber]] || A port of the [[http://code.google.com/p/mockito/| Mockito]] mocking framework to Python. (Technically speaking, Mockito is a Test Spy framework.) ||
|| [[http://www.texttest.org/index.php?page=capturemock| CaptureMock]] || mock testing || Geoff Bache || True record-replay approach to mocking. Requires no coding, just telling it which modules/attributes you want to mock. Then stores the behaviour in an external file, which can be used to test the code without those modules installed. ||

=== Fuzz Testing Tools ===

According to Wikipedia, [[http://en.wikipedia.org/wiki/Fuzz_testing| "fuzz testing" (or "fuzzing")]] is a software testing technique whose basic idea is to attach the inputs of a program to a source of random data ("fuzz"). If the program fails (for example, by crashing, or by failing built-in code assertions), then there are defects to correct. The great advantage of fuzz testing is that the test design is extremely simple, and free of preconceptions about system behavior.

|| '''Tool''' || '''Author''' || '''Claim to fame''' ||
|| [[http://jester.sourceforge.net/| Pester]] || Ivan Moore || Tests your tests by mutating source code and finding tests that don't fail! ||
|| [[http://peachfuzz.sourceforge.net/| Peach Fuzzer Framework]] || Michael Eddington || Peach can fuzz just about anything from .NET, COM/ActiveX, SQL, shared libraries/DLL's, network applications, web, you name it. ||
|| [[http://antiparser.sourceforge.net/| antiparser]] || dmckinney || The purpose of antiparser is to provide an API that can be used to model network protocols and file formats by their composite data types. Once a model has been created, the antiparser has various methods for creating random sets of data that deviates in ways that will ideally trigger software bugs or security vulnerabilities. ||
|| [[http://sourceforge.net/projects/taof| Taof (The Art Of Fuzzing)]] || rodrigomarcos || Taof is a GUI cross-platform Python generic network protocol fuzzer. It has been designed for minimizing set-up time during fuzzing sessions and it is specially useful for fast testing of proprietary or undocumented protocols. ||
|| [[http://fusil.hachoir.org/trac| Fusil (Fusil the fuzzer)]] || [[http://www.haypocalc.com/wiki/Victor_Stinner| Victor Stinner]] || It helps to start process with a prepared environment (limit memory, environment variables, redirect stdout, etc.), start network client or server, and create mangled files. Fusil has many probes to detect program crash: watch process exit code, watch process stdout and syslog for text patterns (eg. "segmentation fault"), watch session duration, watch cpu usage (process and system load), etc. ||

=== Web Testing Tools ===

First, let's define some categories of Web testing tools:

  * '''Browser simulation''' tools: simulate browsers by implementing the HTTP request/response protocol and by parsing the resulting HTML
  * '''Browser automation''' tools: automate browsers by driving them for example via COM calls in the case of Internet Explorer, or XPCOM in the case of Mozilla
  * '''In-process''' or unit-test-type tools ([[http://bit.ly/n42I1X| courtesy of Ian Bicking]]): call an application in the same process, instead of generating an HTTP request; so an exception in the application would go all the way up to the command runner (py.test, unittest, etc).


|| '''Tool''' || '''Category''' || '''Author''' || '''Part of''' || '''Claim to fame''' ||
|| [[http://twill.idyll.org/| twill]] || Browser simulation &amp; In-process || [[http://www.advogato.org/person/titus/| Titus Brown]] ||  || offers simple commands for navigating Web pages, posting forms and asserting conditions; can be used as shell script or Python module; can be used for [[http://www.idyll.org/%7Et/www-tools/twill.html#unit-testing| unit-testing your own Web app]]; stress-test functionality; port of [[http://pbp.berlios.de/| PBP]]; uses John J. Lee's [[http://wwwsearch.sf.net/| mechanize]] ||
|| [[http://mechanicalcat.net/tech/webunit/| webunit]] || Browser simulation || [[http://www.mechanicalcat.net/richard/log| Richard Jones]] ||  || HTTP, HTTPS, GET, POST, basic auth all handled; control over expected status codes; uses unittest as the underlying framework ||
|| [[http://funkload.nuxeo.org/| FunkLoad]] || Browser simulation || Benoit Delbosc / [[http://www.nuxeo.com/| Nuxeo]] ||  || functional/performance/load/stress testing for Web applications; easy test creation using [[http://hathawaymix.org/Software/TCPWatch/| TCPWatch]] as proxy recorder; reporting capabilities; based on [[http://mechanicalcat.net/tech/webunit/| webunit]] ||
|| [[http://cheeseshop.python.org/pypi?:action=display&name=zope.testbrowser| zope.testbrowser]] || Browser simulation || [[http://www.benjiyork.com/| Benji York]] || [[http://www.zope.org/DevHome/Wikis/DevSite/Projects/ComponentArchitecture/FrontPage| Zope 3]] || designed to be used in doctests that mirror user actions (see the README.txt for [[http://svn.zope.org/*checkout*/Zope3/trunk/src/zope/testbrowser/README.txt| examples]]); can also be used as standalone Web testing tool outside of Zope 3 ||
|| [[http://www.cherrypy.org/file/trunk/cherrypy/test/webtest.py| webtest]] || Browser simulation || [[http://www.aminus.org/blogs/index.php/fumanchu| Robert Brewer]] || [[http://www.cherrypy.org/| CherryPy]] || extensions to unittest for web frameworks; uses http://docs.python.org/lib/module-httplib.html httplib] ||
|| [[http://pamie.sourceforge.net/| PAMIE]] || Browser automation || Robert Marchetti ||  || automates Internet Explorer by manipulating IE's Document Object Model via COM ||
|| [[http://kb.mozillazine.org/PyXPCOM| PyXPCOM]] || Browser automation || [[http://starship.python.net/crew/mhammond/| Mark Hammond]] ||  || provides Python XPCOM bindings for automating Mozilla browsers ||
|| [[http://pythonpaste.org/testing-applications.html| paste.test.fixture]] || In-process || [[http://blog.ianbicking.org/| Ian Bicking]] || [[http://pythonpaste.org/| Paste]] || lets you test your [[http://www.python.org/peps/pep-0333.html| WSGI]] applications without a server; similar in feel to zope.testbrowser ||
|| [[http://simon.bofh.ms/cgi-bin/trac-django-projects.cgi/wiki/DjangoTesting| DjangoTesting]] || In-process || [[http://hugo.muensterland.org/| Georg Bauer]] || [[http://simon.bofh.ms/cgi-bin/trac-django-projects.cgi/wiki/DjangoStuff| DjangoStuff]] || very simple and small testing framework for [[http://www.djangoproject.com/| Django]] applications, based on the ideas of the [[http://www.rubyonrails.org/| Ruby on Rails]] testing framework; fully based on unittest, so you don't need anything beside Django and Python to make use of it ||
|| [[http://ibofobi.dk/blog/archive/2005/11/django-doctest/| ibofobi.utils.test]] || In-process || [[http://ibofobi.dk/blog/| Sune Kirkeby]] ||  || testing framwework for [[http://www.djangoproject.com/| Django]] applications; built on top of doctest instead of unittest; fixtures are written in YAML not Python code; implemented simple request/response tests on top of [[http://www.crummy.com/software/BeautifulSoup/| Beautiful Soup]] ||
|| [[http://code.google.com/p/wsgi-intercept/| wsgi-intercept]] || In-process || [[http://code.google.com/u/kumar.mcmillan/| Kumar McMillan]] ||  || This library lets you intercept calls to any specific host/port combination and redirect them into a WSGI application ||
|| [[http://www.getwindmill.com/| windmill]] || Browser Automation || [[http://www.getwindmill.com/| Windmill Community]] ||  || Cross-Platform and Cross-Browser web automation tool, supports Firefox, Safari, Chrome and IE on Mac, Linux and Windows. Written in Python, test authoring libraries in Python and JavaScript. Active community, #windmill on irc.freenode.org ||
|| [[http://pypi.python.org/pypi/selenium|Selenium]] || Browser Automation || [[http://seleniumhq.org| Selenium Community]] ||  || Cross-Platform and Cross-Browser web automation tool, supports Firefox, Safari, Chrome and IE on Mac, Linux and Windows. Written in Java with Python bindings. Active community, #selenium on irc.freenode.org [[http://readthedocs.org/docs/selenium-python/en/latest/|Documentation]]||

=== Acceptance/Business Logic Testing Tools ===

|| '''Tool''' || '''Author''' || '''Claim to fame''' ||
|| [[http://fitnesse.org/FitServers.PythonFit| PyFIT]] || John Roth || port of [[http://fit.c2.com/| FIT]]; supports both FIT and [[http://fitnesse.org/| FitNesse]]; acceptance tests for business logic written as HTML or Wiki tables ||
|| [[http://texttest.org/| TextTest]] || Geoff Bache || works by comparing plain text logged by programs with a previous 'gold standard' version of that text; the tool itself is written in Python but it can be used to test programs written in any language; comes with extensive self tests which serve as examples of how to use it. Plugins for testing GUIs (see PyUseCase)||
|| [[http://lettuce.it/| Lettuce]] || Gabriel Falcão || port of [[Cucumber| http://cukes.info/]] supporting acceptance tests in Cucumber format, including tabular feature files and JUnit xml output.  ||
|| [[http://svn.colorstudy.com/FitLoader/trunk/| FitLoader]] || Ian Bicking || A (rather alpha-ish) library for loading tests from Excel or CSV f
