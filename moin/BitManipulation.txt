I'm looking for information on Python bit manipulation, binary manipulation.

It seems that there are no modules for performing Python bit manipulation.

I personally want to be able to:
 * Turn "11011000111101..." into bytes, (padded left or right, 0 or 1,) and vice versa.
 * Slice ranges of bits
 * Rotate bits, addressed by the bit. That is, say: "rotate bits 13-17, wrapping around the edges," or, "rotate bits 13-17, lose bits on the one side, set all new bits to 0."
 * Similarly, revert regions of bits, apply logic to regions of bits, etc.,.
 * Switch Endianness, with different block sizes.
 * Apply operations in block groupings: ex: apply XOR 10101 (5 bits) repeatedly across a field.

The closest thing I've found is [[http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/113799|ASPN: bit-field manipulation.]]

I imagine that there are many more manipulations people would like to do with bits.

== Manipulations ==

To integer.

{{{
#!python
>>> print int('00100001', 2)
33
}}}

To hex string. Note that you don't need to use x8 bits.

{{{
#!python
>>> print "0x%x" % int('11111111', 2)
0xff
>>> print "0x%x" % int('0110110110', 2)
0x1b6
>>> print "0x%x" % int('0010101110101100111010101101010111110101010101', 2)
0xaeb3ab57d55
}}}

To character. 8 bits max.

{{{
#!python
>>> chr(int('111011', 2))
';'
>>> chr(int('1110110', 2))
'v'
>>> chr(int('11101101', 2))
'\xed'
}}}

Characters to integers, but not to strings of 1's and 0's.

{{{
#!python
>>> int('01110101', 2)
117
>>> chr(int('01110101', 2))
'u'
>>> ord('u')
117
}}}

Individual bits.

{{{
#!python
>>> 1 << 0
1
>>> 1 << 1
2
>>> 1 << 2
4
>>> 1 << 3
8
>>> 1 << 4
16
>>> 1 << 5
32
>>> 1 << 6
64
>>> 1 << 7
128
}}}

== Transformations Summary ==

Strings to Integers:
 * {{{"1011101101"}}}: {{{int(str, 2)}}}
 * {{{"m"}}}: {{{ord(str)}}}
 * {{{"0xdecafbad"}}}: {{{int(str, 16)}}} (known to work in Python 2.4)
 * {{{"decafbad"}}}: {{{int(str, 16)}}} (known to work in Python 2.4)

Integers to Strings:
 * {{{"1011101101"}}}: '''built-in to Python 3''' (see below)
 * {{{"m"}}}: {{{chr(str)}}}
 * {{{"0xdecafbad"}}}: {{{hex(val)}}}
 * {{{"decafbad"}}}: {{{"%x" % val}}}

We are still left without a technique for producing binary strings, and decyphering hex strings.

== Hex String to Integer ==

The simplest approach is to use the int type with the ``base`` argument.
{{{
#!python
>>> int('0xff',16)
255
>>> int('d484fa894e',16)
912764078414
}}}



Another approach to decyphering "0xdecafbad" style hex strings, is to use eval:

{{{
#!python
>>> eval("0xdecafbad ")
3737844653L
}}}

However, this could be dangerous, depending on where you're getting your data from.

Here's a function that is safer:

{{{
#!python
def hex_to_integer(h):
    """Convert a hex string to an integer.

    The hex string can be any length. It can start with an 0x, or not.
    Unrecognized characters will raise a ValueError.

    This function released into the public domain by it's author, Lion
    Kimbro.
    """
    num = 0  # Resulting integer
    h = h.lower()  # Hex string
    if h[:2] == "0x":
        h = h[2:]
    for c in h:  # Hex character
        num = num * 16
        if "0" <= c <= "9":
            num = num + (ord(c) - ord("0"))
        elif "a" <= c <= "f":
            num = num + (ord(c) - ord("a"))
            num = num + 10
        else:
            raise ValueError(c)
    return num
}}}

== Integer to Bin String ==

Python 3 supports binary literals (e.g. 0b10011000) and has a bin() function. For older versions:

{{{
#!python
>>> def bin(a):
	s=''
	t={'0':'000','1':'001','2':'010','3':'011',
           '4':'100','5':'101','6':'110','7':'111'}
	for c in oct(a)[1:]:
		s+=t[c]
	return s
}}}

== Research Links ==

this is the sort of thing we're looking for:
 * [[http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/113799|ASPN: bit-field manipulation]]

related modules:
 * [[http://www.python.org/doc/current/lib/module-array.html|array module]] -- (issued with Python)
 * [[http://www.python.org/doc/current/lib/module-struct.html|struct module]] -- (issued with Python)
 * [[http://www.python.org/doc/current/lib/module-binascii.html|binascii module]] -- (issued with Python)
 * [[http://pyserial.sourceforge.net/|pySerial module]] -- access the serial port

see also: BitwiseOperators
