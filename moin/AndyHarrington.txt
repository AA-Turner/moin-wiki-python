I am fairly new to Python, but I have been teaching Programming at the university level for 20+ years, in the classroom and some online.  

I taught a fairly standard CS0 (breadth first CS introduction with the briefest programming introduction in C or Java) for a number of semesters and found it unsatisfying in many ways.  It is important to see CS as a lot more than programming, but programming is important in the overall view!  The typical CS0 assumption is that it is a lot harder to teach programming than to do pseudocode, so there are lots of pseudocode algorithms, and little more than a description of basic syntax for a high level language.  

Last year I really rethought this and designed a course with a lot of Python in it (using Zelle's text):  algorithms you could run!  I am in my second semester of teaching the new approach.  Since Python was so easy, I also emphasized how much an average college student could use this stuff to help with todays digital data overload, and how much fun they could have with graphics and with dynamic web pages.  

I think Python is also excellent for a CS1, but because of my personal responsibilities I am interested in how to use it best for a modified CS0.  I also do more standard CS0 things:  history, ethical and social issues, the lower level abstractions in the machine.  I have brought Python to some extent into other parts of the course.  The assembler simulator we use was written by me in Python, and uses the simple graphics package of Zelle.

- - - 
- - -

The first Python program I wrote was an easy-to-use and basic program to generate static picture galleries.  I discussed it at Pycon 2005.  The GUI is since improved:  http://webpages.cs.luc.edu/~anh/gallery

anh@cs.luc.edu
Loyola University Chicago
Computer Science
