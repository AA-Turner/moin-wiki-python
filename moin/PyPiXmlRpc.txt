PyPI's XML-RPC methods
----------------------

This is an initial list of proposed methods for PyPI to support:

package_releases(package_name):
     Returns list of release versions, as strings, e.g., ['0.1', '0.2b',
     '0.2'], in chronological order.

package_stable_version(package_name):
     Returns packages.stable_version; the current stable version of the
     package.  E.g., the string '0.3'

package_urls(package_name, version):
     A list of {'url': url, 'packagetype': packagetype}, like [{'url':
     'http://svn.pythonpaste.org/Paste/trunk', 'packagetype':
     'svn_trunk'}, {'url': 'http://pythonpaste.org/Paste-0.1.tar.gz',
     'packagetype': 'sdist'}]

package_data(package_name, version):
     A dictionary that summarizes the releases table, plus
     release_classifiers.  E.g.: { { {

         {'name': 'OpenRelease',
          'version': '0.1.2',
          'author': 'Richard Harris',
          'author_email': 'goosequill@users.sourceforge.net',
          'maintainer': '',
          'maintainer_email': '',
          'homepage': 'http://open-release.sourceforge.net',
          'download_url':
'http://prdownloads.sourceforge.net/projects/open-release/OpenRelease-0.1.2.tar.gz',
          'description': """OpenRelease is a Python module which 
automates the packaging, release and announcement of Open Source 
software. The pack class creates packages, which are defined by packer 
classes, manages versioning, and brings up your notes and changelog in 
an editor. The release class uploads the package to SourceForge, 
releases it through QRS, announces it on freshmeat and (if appropriate) 
on pypi.""",
          'license': 'GNU General Public License',
          'platform': 'any',
          'classifiers': [
              'Development Status :: 4 - Beta',
              'Environment :: Console',
              'Intended Audience :: Developers',
              'License :: OSI Approved :: GNU General Public License (GPL)',
              'Natural Language :: English',
              'Operating System :: OS Independent',
              'Programming Language :: Python',
              'Topic :: Software Development'],
          'summary': '',
          'description_html': '',
          'keywords': '',
          }

} } }

     All keys are required.  None/NULL is translated to ''.  Open
     issues: will emails be obscured?  Is keywords turned into a list?

search(field_specifiers, [operator='and']):
     field_specifiers is a dictionary of {fieldname: searchvalue}.
     Returns a list like [(name, version)] of matching non-hidden
     records.  The search values are case-insensitive and match any
     substring.  The second argument indicates if all the field
     specifiers are ANDed or ORed together.  The value defaults to
     'and' and is case-insensitive.
