#format rst

===========================
 Library of Video Lectures
===========================

A collection of video lectures suitable for projection at fledgling usergroup meetings to supply initial presentation material.

The video should be of high quality - readable on a large screen with audible sound, and given by a speaker who knows his stuff and presents well.  Flash-based video, as found on youtube.com, is often of low resolution.  Use the downloadable video formats for presentation.

You can find a list of audio-only presentations  
on the `PythonAudioMaterial <http://wiki.python.org/moin/PythonAudioMaterial>`__ page.

----

 * `Python Design Patterns, Part 1`_ by Alex Martelli, March 2007  *(58 min 47 sec)*

   Design Patterns must be studied in the context on the language
   in which they'll get implemented (the Gang of Four made that
   point very strongly in their book, though almost everybody else
   seems not to have noticed :-). This talk explores several
   categories of classic "elementary" DPs in a Python context --
   Creational, Masquerading, Adaptation, and Template.

 * `Python Design Patterns, Part 2`_ by Alex Martelli, April 2007  *(44 min 28 sec)*

 * `Better, faster, smarter: Python yesterday, today ... and tomorrow`_ by Alex Martelli, October 2007  *(1 hr 2 min 35 sec)* - Oct 12, 2006

   A presentation to the Bay Area Python Interest Group, giving
   some historical introduction on Python 2.x and how it is
   developed, and then moving on to the features of Python 2.5.

 * `Advanced Python or Understanding Python`_ by Thomas Wouters, February 2007  *(1 hr 15 min 43 sec)*

   The Python language, while object-oriented, is fundamentally
   different from both C++ and Java.  The dynamic and introspective
   nature of Python allow for language mechanics unlike that of
   static languages.  This talk aims to enlighten programmers new
   to Python about these fundamentals, the language mechanics that
   flow from them and how to effectively put those to use.  Among
   the topics covered are duck-typing, interfaces, descriptors,
   decorators, metaclasses, reference-counting and the cyclic-garbage
   collector, the divide between C/C++ data and Python objects and
   the CPython implementation in general.

 * `Python 3000`_ by Guido van Rossum, July 2006  *(1 hr 6 min 41 sec)*

   The next major version of Python, nicknamed Python 3000 (or more
   prosaically Python 3.0), has been anticipated for a long time.
   For years I have been collecting and exploring ideas that were
   too radical for Python 2.x, and it's time to stop dreaming and
   start coding. In this talk I will present the community process
   that will be used to complete the specification for Python 3000,
   as well as some of the major changes to the language and the
   remaining challenges.

 * `Iterators, Generators, and Descriptors`_ by Guido van Rossum, October 2003.

   This is a "What's New in Python 2.3" talk delivered to the EE380
   course at Stanford that contains 
   a lengthy discussion of iterators and generators, followed by a
   somewhat shorter discussion of descriptors. 

 * `Introducing Python`_ by Arlington Career Center Multimedia and Yorktown High School,  November 2006  *(23 min 50 sec)*

   A light-hearted introductory activity for a computer science
   course, this video contains interviews with luminaries from the
   Python community interspersed with A Python Love Story.

   A joint, interdisciplinary project between Arlington Career
   Center Multimedia and Yorktown High School Drama and Computing,
   the Python Project builds on the successful use of Python as a
   teaching tool in Yorktown's Computer Science Program. It was
   shown at the 9th and 10th International Python Conferences.

.. _`Advanced Python or Understanding Python`: http://video.google.com/videoplay?docid=7760178035196894549&hl=en
.. _`Better, faster, smarter: Python yesterday, today ... and tomorrow`: http://video.google.com/videoplay?docid=4539942226071440048&hl=en
.. _`Python 3000`: http://video.google.com/videoplay?docid=-6459339159268485356&q=python+programming
.. _`Python Design Patterns, Part 1`: http://video.google.com/videoplay?docid=-3035093035748181693&q=python+programming
.. _`Python Design Patterns, Part 2`: http://video.google.com/videoplay?docid=-288473283307306160&q=python+programming
.. _`Introducing Python`: http://video.google.com/videoplay?docid=9023849479319414382&q=python+programming
.. _`Iterators, Generators, and Descriptors`: http://stanford-online.stanford.edu/courses/ee380/031029-ee380-100.asx
