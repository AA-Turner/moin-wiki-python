Small discussion and evaluation of different parsers.

(!) Please keep wiki links as wiki links, use external links only if there is no existing page for the tool.
||Name ||Grammar ||Module ||Python ||Comment ||
||[[http://docs.python.org/lib/module-shlex.html|shlex]]|| || C || ||included in the main Python distribution ||
||[[http://reparse.readthedocs.org/en/latest/|reparse]] || ||Python/Regex|| 2.x || Combines Regular Expressions ||
||[[http://packages.python.org/plex/|Plex]] || ||C || ||lexical analysis module for Python, foundation for [[Pyrex]] and [[http://cython.org|Cython]]. Plex 2.0.0 is Python 2 only, the version embedded in Cython works in Python 3.x. There is also an [[https://github.com/uogbuji/plex3|experimental port to Python 3 (tested on Python 3.3)]] ||
||[[http://pages.cpsc.ucalgary.ca/~aycock/spark/|Spark]] ||GLR ||Python || || ||
||[[Yapps]] ||LL(1) ||Python ||1-any, 2-1.5+ || ||
||[[http://starship.python.net/crew/scott/PyLR.html|PyLR - (broken link)]] ||LR(1) LALR(1) ||C || || ||
||[[http://gadfly.sourceforge.net/kwParsing.html|kwParsing]] || || || || ||
||PyBison || ||C || ||bison grammar with python code actions ||
||[[http://www.ercim.org/publication/Ercim_News/enw36/ernst.html|Trap]] ||LR || ||1.5.1+ || ||
||[[http://www.dabeaz.com/ply/|PLY]] ||SLR LALR(1) ||Python || ||Python Lex-Yacc ||
||[[http://christophe.delord.free.fr/tpg/index.html|ToyParserGenerator]] || || ||2.2+ || ||
||[[http://dparser.sourceforge.net/|DParser]] ||GLR ||C ||2.2+ ||grammar in doc strings ||
||[[http://www.lava.net/~newsham/pyggy/|PyGgy - (broken link)]] ||GLR ||Python ||2.2.1 || ||
||[[http://fdik.org/pyPEG|pyPEG]] ||PEG ||Python ||2.5+ || ||
||[[http://simpleparse.sourceforge.net/|SimpleParse]] ||- || ||2.0+ ||requires mxTextTools ||
||[[http://www.biopython.org/DIST/docs/api/public/Martel-module.html|Martel]] || ||Python ||2.0+ ||requires mxTextTools ||
||[[http://www.lemburg.com/files/python/mxTextTools.html|mxTextTools]] ||- ||C || ||is not exactly a parser like we're used to, but it is a fast text-processing engine ||
||[[http://pyparsing.wikispaces.com/|pyparsing]] || ||Python ||2.2+ || ||
||[[http://me.opengroove.org/2011/06/parcon-new-parser-combinator-library.html|parcon]] || ||Python ||2.6+ ||Parser combinator library, similar to pyparsing ||
||[[http://www.antlr.org/|ANTLR]] ||LL1+ ||Python || ||stand-alone tool in Java. Latest version can produce Python code ||
||[[http://www.ncc.up.pt/FAdo/Yappy|Yappy]] ||LR(0) LR(1) SLR LALR(1) ||Python ||2.2+ || ||
||[[http://pypi.python.org/pypi/ZestyParser|ZestyParser]] || ||Python || ||Object-oriented, Pythonic parsing ||
||[[http://www.canonware.com/Parsing/|Parsing]] ||LR(1) ||Python ||2.5+ || ||
||[[http://msdl.cs.mcgill.ca/people/eposse/projects/aperiot|aperiot]] ||LL(1) ||Python || ||uses separate grammar files ||
||[[http://bitbucket.org/namenlos/yeanpypa|yeanpypa]] || ||Python || ||inspired by pyparsing and boost::spirit ||
||[[http://seehuhn.de/pages/wisent|Wisent]] ||LR(1) ||Python ||2.4+ ||has separate parser input file, parser output is a parse tree ||
||[[http://lparis45.free.fr/rp.html|RP]] ||na ||Python ||2.6+ ||Simple parser using rule defined in BNF format ||
||[[http://www.acooke.org/lepl/|LEPL]] ||Any ||Python ||2.6+,3+ ||Recursive descent with full backtracking and optional memoisation (which can handle left recursive grammars). So equivalent to GLR, but based on LL(k) core. ||
||[[http://pypi.python.org/pypi/modgrammar|modgrammar]] ||GLR ||Python ||3.1+ ||Recursive descent parser with full backtracking. Grammar elements and results are defined as Python classes, so are fully customizable. Supports ambiguous grammars. ||
||[[http://code.google.com/p/funcparserlib/|funcparserlib]] ||LL(*) ||Python ||2.4+ ||Recursive descent parsing library for Python based on functional combinators ||
||[[http://pydsl.org|pydsl]] ||- ||Python ||2.7+ 3+ || ||
||[[http://pypi.python.org/pypi/lrparsing|lrparsing]] ||LR(1) ||Python ||2.6+ ||A fast parser, lexer combination with a concise Pythonic interface.  Lots of documentation, include example parsers for SQL and Lua. ||




For faster performance, one may use other parser generator systems and plug them in as modules.

For example:

 * [[Spirit]] (http://spirit.sourceforge.net/) framework for writing EBNF as C++ code
 * FlexBisonModule (http://www.crsr.net/Software/FBModule.html)
 * [[http://groups.google.com/groups?hl=en&amp;lr=&amp;ie=UTF-8&amp;selm=61g0ff$39g$1@vishnu.jussieu.fr|cocktail compiler tools]] approach

Example of such usage is SeeGramWrap available from Edward C. Jones [[http://members.tripod.com/~edcjones/pycode.html|Python page]], which is a heavily revised and upgraded version of the ANTLR C parser that is in [[http://members.tripod.com/~edcjones/cgram.tar.gz|cgram]] (broken link). The lastest verson has been refactored to move some of the complexity from ANTLR to Python.

Martin von Loewis presented a paper at Python10, titled [[http://www.python.org/sigs/parser-sig/towards-standard.html|"Towards a Standard Parser Generator"]] that surveyed the available parser generators for Python.

Ned Batchelder maintains additional information on these and other parsers at [[http://nedbatchelder.com/text/python-parsers.html|Python Parsing Tools]].

== Books ==
 * Complete online textbook, titled [[http://dickgrune.com/Books/PTAPG_1st_Edition/|"Parsing: A Practical Guide"]].
