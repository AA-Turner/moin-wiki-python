Small discussion and evaluation of different parsers.

  * ["shlex"] (http://www.python.org/doc/current/lib/module-shlex.html)
  * ["Plex"] (http://www.cosc.canterbury.ac.nz/~greg/python/Plex)
  * SimpleParse (http://members.rogers.com/mcfletch/programming/simpleparse/simpleparse.html)
  * ["Spark"] (http://pages.cpsc.ucalgary.ca/~aycock/spark/)
  * ["Yapps"] (http://theory.stanford.edu/~amitp/Yapps/)
  * ["PyLR"] (http://starship.python.net/crew/scott/PyLR.html)
  * ["kwParsing"] (http://www.pythonpros.com/arw/kwParsing/kwParsing.html)
  * PyBison (http://www-db.stanford.edu/~hassan/Python/pybison.tar.gz)
  * ["mcf.parse"] (http://starship.python.net/crew/mcfletch/)
  * ["Trap"] (http://www.first.gmd.de/smile/trap/)
  * ["PLY"] (http://systems.cs.uchicago.edu/ply/)
  * ToyParserGenerator (http://christophe.delord.free.fr/en/tpg/)

["TextUtils"] by Marc-Andr√© Lemburg ("mx") is not exactly a parser like we're used to, but it's a parser: http://www.lemburg.com/files/python/mxTextTools.html

Also see Python ParserSig @ http://www.python.org/sigs/parser-sig/ to discuss and select a standard parser generator for Python.


For some speed up one may use other parser generator systems and plug them in as modules.

For example:
  * ["ANTLR"] (http://www.antlr.org/) C++ output (an older version with C output also available)
