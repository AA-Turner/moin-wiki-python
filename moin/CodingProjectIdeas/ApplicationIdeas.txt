## page was renamed from CodingProjectIdeas/Applications
== Applications in, of or with Python ==

This page lists application-related ideas.

 * Research how to get python support into all the cheap webhosts.
 * Write a new and useful application in Python.
 * Improve an existing Python application (e.g. [http://wiki.list.org/display/DEV/Summer+of+Code Mailman], BitTorrent, Zope). Some Python-based projects are SoC mentoring organizations in their own right, so you might end up being mentored by them, not the PSF. (You should probably contact a current developer on the project first, to ensure that your plans mesh with theirs. JimJJewett offers to help if you want to work on [http://www.plkr.org plucker], which lets you read web pages on a disconnected palm pilot.)
 * [http://pyxides.stani.be/ PyxIDE] has several potential projects related to IDEs in Python. Real-time code analysis would be a good project (which could in turn be used to build auto-completion and other tools).
 * Improve the Eclipse IDE's support for Python: http://pydev.sf.net
 * Improved python code generation support in umbrello [http://uml.sourceforge.net/index.php] or alternatively a pure python implementation to parse umbrello files and generate python code.
 * Bring [http://www.enthought.com/enthought/wiki/MayaVi MayaVi 2's] feature set up to the level of [http://mayavi.sourceforge.net MayaVi 1.5] ([mailto:robert.kern@enthought.com contact]).
 * integrate Bayesian Filtering with MoinMoin. see: [http://gauss.ffii.org/BayesWiki full proposal]
  * isn't this better under the MoinMoin mentors? see below..
 * [http://pywinauto.pbwiki.com/ pywinauto]
   * Create tool to allow macro recording (possibly using pyAA or pyHook - or other tools).
   * Research how one pywinauto script can work on any number of (spoken) languages.
 * [http://regal.sdsu.edu/stars Stars]
   * Space Time Analysis of Regional Systems
   *  Assist with the refactoring of this program... Tasks include, visualization, interaction and data structures.
 * Improve [http://grac.sourceforge.net/ GRAC], a GRAmmar Checker based on learning algorithms.
 * Improve [http://mark.dufour.googlepages.com/ Shed Skin], an optimizing Python-to-C++ compiler, that typically results in code that is 2-40 times faster than when using Psyco. A nice SoC topic would be to add memory optimizations (such as transforming heap allocation into stack- and static preallocation), to bring the performance of generated code even closer to that of manually written C++.
