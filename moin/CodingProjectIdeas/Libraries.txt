
 * Add EPS import to ReportLab PDF library
     http://article.gmane.org/gmane.comp.python.reportlab.user/4052
 * make [http://www.spread.org/ Spread] Python Binding compile with Python 2.4 on win32 (and possibly other major platforms)
 * Revive the code or idea from [http://www.cosc.canterbury.ac.nz/~greg/python_gui/ PyGUI] or [http://anygui.sourceforge.net/ Anygui]
     These are Python-level cross-toolkit compatibility libraries for GUI work. Currently there is a "live" project called [http://developer.berlios.de/projects/cimarron/ Cimarron] along these lines. (PyGUI is not a dead project, however Anygui is)
 * NotebookInterfaceForIpython
 * ../PygameOnCtypes
* Develop the Visual Designer and help update the documentation of [http://dabodev.com/ Dabo].
     Dabo is a framework for creating 3-tier desktop applications. The UI tier is a wrapper around [http://www.wxpython.org/ wxPython] that greatly streamlines and simplifies the wxPython API, and the Designer is a RAD tool for visually developing UI interfaces.

-----

Less fleshed-out ideas:
 * An educational programming environment similar to [http://dewey.soe.berkeley.edu/boxer.html/index.html Boxer] for Python
     Kind of a visual programming environment, where blocks are translated into "boxes" (along with a few other select ideas).  One of the more conservative visual programming environments, and it seems very translatable to Python.  Or maybe work on a decent programming environment for [http://pylogo.org PyLogo].  ''Boxer isn't a programming environment.  I think this idea isn't fleshed out enough.''

      Having something similar to Simulink would be VERY useful in regards to the visual programming environment.  

 * A more flushed out version of Modelica in Python would also be useful http://www.ercim.org/publication/Ercim_News/enw36/ernst.html or http://moncs.cs.mcgill.ca/people/ffan/report.dtml
