= Handling Exceptions =

The simplest way to handle exceptions is with a "try-except" block:

{{{
#!python
(x,y) = (5,0)
try:
  z = x/y
except ZeroDivisionError:
  print "divide by zero"
}}}

If you wanted to examine the exception from code, you could have:

{{{
#!python
(x,y) = (5,0)
try:
  z = x/y
except ZeroDivisionError, e:
  z = e # representation: "<exceptions.ZeroDivisionError instance at 0x817426c>"
print z # output: "integer division or modulo by zero"
}}}

This page previously used a catch-all exception clause:

{{{
#!python
(x,y) = (5,0)
try:
  z = x/y
except:
  print "divide by zero"
}}}

This is bad because you'll almost certainly catch too many errors. As a simple example, when the user presses Ctrl-C, thus generating a KeyboardInterrupt, it will be caught and the code above will print "divide by zero". Now that's confusing!

== To Write About... ==

Give example of IOError, and interpreting the IOError code.

Give example of multiple excepts. Handling multiple excepts in one line.

Show how to use "else" and "finally".

Show how to continue with a "raise".

= See Also: =

WritingExceptionClasses, TracebackModule, Wiki:CoupleLeapingWithLooking
