#pragma section-numbers off

= MySQL =

  URL:: http://www.mysql.com/
  license:: GPLv2
  platforms:: Unix, win32, win64, MacOS X, i5/OS

== Pros ==

 * Easy to install and administer
 * Support for many SQL Features (v5.0 and up):
  * Good compliance with SQL standards
  * Foreign Keys (using InnoDB)
  * Stored Routines
  * Views
  * Triggers
 * Subqueries (as of v4.1)
 * Partitioning (as of v5.1)
 * ACID compliant (InnoDB and NDB storage engines)
 * Character set support
 * Built-in Replication
 * Many administration tools from third parties
 * Widely deployed
 * Regarded as being fast
 * Modular storage engines and interesting clustering features

== Cons ==

 * Early versions (v4.1 and earlier) have the reputation for only basic SQL support (entry-level SQL 92) and deviations from the standards. Many interesting features (views, triggers,..) are included in the latest version (5 and above), but are missing in prior versions. Check [[http://dev.mysql.com/doc/refman/5.1/en/server-sql-mode.html|SQL Modes]] for making MySQL more strict.
 * Some [[http://sql-info.de/mysql/gotchas.html|gotchas]] for MySQL v4.1 and earlier.

----

== DB API 2.0 Drivers ==

=== MySQL for Python ===

  URL:: http://sourceforge.net/projects/mysql-python
  License:: GNU General Public License (GPL), Python License (CNRI Python License), Zope Public License
  Platforms:: OS Independent
  Python versions:: 2.3 - 2.6

[[http://dev.mysql.com/downloads/python.html|MySQL on-line documentation, additional forums]] (maintainer does not currently read these)

=== PyMySQL ===

  URL:: http://www.pymysql.org/
  License:: MIT
  Platforms:: OS Independent, CPython 2.x and 3.x, PyPy, Jython, IronPython
  Python versions:: 2.4 - 3.2


 * Pure-Python focused on simplicity and compatibility
 * Virtually 100% compatible with MySQLdb
 * Good performance

=== mxODBC ===

  URL:: http://www.egenix.com/products/python/mxODBC/
  License:: eGenix Commercial License
  Platforms:: Windows, Linux, MacOS X, FreeBSD, Solaris, AIX
  Python versions:: 2.4 - 2.7

mxODBC is compatible with the MySQL ODBC driver on Windows and Unix.

=== pyodbc ===

  URL:: http://code.google.com/p/pyodbc
  License:: MIT
  Platforms:: Windows, Linux, MacOS X, FreeBSD, Solaris, Any (source provided)
  Python versions:: 2.4+

Actively maintained Open Source project.

Precompiled binaries are available for Windows.  Red Hat Enterprise Linux, Centos, and Fedora have precompiled RPMs available in their Extras repositories.

=== MySQL Connector/Python ===

  URL:: https://dev.mysql.com/downloads/connector/python/
  License:: GNU GPL v2 with [[http://www.mysql.com/about/legal/licensing/foss-exception.html|FOSS License Exception]]
  Platforms:: Any (presumably)
  Python versions:: v2.6, v2.7 and Python v3.1 to 3.3 (See [[http://dev.mysql.com/doc/connector-python/en/connector-python-versions.html|version overview]])

 * Implements the Python DB API 2.0 (PEP 249).
 * Pure Python implementation of the MySQL protocol.
 * Actively developed and maintained by Oracle.
 * Includes Django database backend.

=== mypysql ===

  URL:: http://sourceforge.net/projects/mypysql/
  License:: GNU GPL v3+
  Platforms:: Any (presumably)
  Python versions:: 3


 * This module provides (yet) incomplete PEP 249 functionality 
 * C implementation of MySQL database connector
 * A majority of the commands are implemented
 * Still experimental but actively developed


=== PyPyODBC (Pure Python ODBC) ===

 URL::
 http://code.google.com/p/pypyodbc

 License:: MIT
 Platforms:: Windows, Linux
 Python versions:: 2.4 - 3.3


[[https://code.google.com/p/pypyodbc/wiki/Enable_SQLAlchemy_on_PyPy| Run SQLAlchemy on PyPy]]

One pure Python script, runs on CPython / IronPython / PyPy , Version 3.3 / 3.2 / 3.1 / 2.4 / 2.5 / 2.6 / 2.7 , Win / Linux , 32 / 64 bit.

Similar usage as pyodbc ( can be seen as a re-implementation of pyodbc in pure Python ).

Simple - the whole module is implemented in a single python script with less than 3000 lines.






----

== Supported Python Applications ==

 * [[Zope]]
 * A MySQL driver exists for [[PyDO]] (Python Data Objects)
