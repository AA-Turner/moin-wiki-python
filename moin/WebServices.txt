= Web Services =

Web services can be generally regarded as functions or functionality of applications or systems exposed over the Web using standardised message formats and typically interfaced to other software using traditional APIs, although "message-centric" usage of such services is also possible and may be favoured by certain technologies.


== JSON-RPC ==

[[http://json-rpc.org/|JSON-RPC]] is an increasingly popular Web Services specification that uses the light-weight [[http://json.org/|JSON]] (JavaScript Object Notation) data-interchange format (in comparison to the protocols listed below, which all use XML).  JSON-RPC was created in 2004 and implementations exist in JavaScript, Java, PHP and Perl (among other languages) in addition to Python.

 * [[http://json-rpc.org/wiki/python-json-rpc|python-json-rpc]] The specification website includes a Python implementation.

 * [[http://pypi.python.org/pypi/JsonUtils/|JsonUtils]] is another library that supports JSON-RPC.

== JSON-WSP ==

[[http://en.wikipedia.org/wiki/Jsonwsp|JSON-WSP]] is another JSON based webservice protocol. It is inspired by JSON-RPC but designed with a JSON based description format (like WSDL in SOAP). For the time being there is only a Python based implementation, but a PHP implementation is in progress and will also be openly available.

 * [[http://pypi.python.org/pypi/ladon|Ladon]] Ladon is a multiprotocol approach to creating a webservice. Create one service and expose it to several service protocols including JSON-WSP. [[http://bazaar.launchpad.net/~jakob-simon-gaarde/ladon/trunk/download/head:/jsonwspclient.py-20110408073624-ovbp2zk003q5bvfp-1/jsonwsp.py|command-line]] and [[http://bazaar.launchpad.net/~jakob-simon-gaarde/ladon/trunk/download/head:/jsonclient.js-20110213221122-g9wj0q4yay8niipv-3/jsonwspclient.js|javascript]] clients are available that can parse JSON-WSP and deliver a dynamic interface to a service.

== SOAP ==

[[SOAP]] is a Web services technology favoured in certain environments. The following projects seek to support SOAP and related technologies such as WSDL:

 * [[http://sourceforge.net/projects/pywebsvcs|ZSI]] (Zolera Soap Infrastructure) - a version of the actively maintained [[http://sourceforge.net/projects/pywebsvcs|Python Web Services]] project; ZSI-2.0 Released on 2007-02-02 provides both client and server SOAP libraries.  Newly added was proper WSDL consumption of complex types into python classes.

 * [[http://www.python.org/pypi/soaplib|soaplib]] - Soaplib is an easy to use python library for writing and calling soap web services. Webservices written with soaplib are simple, lightweight, work well with other SOAP implementations, and can be deployed as WSGI applications.

 * [[https://fedorahosted.org/suds|suds]] - Suds is a lightweight SOAP python client that provides a service proxy for Web Services. 

 * [[http://code.google.com/p/pysimplesoap/|pysimplesoap]] - PySimpeSoap is a simple and functional client/server. It goals are: ease of use and flexibility (no classes, autogenerated code or xml is required), WSDL introspection and generation,  WS-I standard compliance,  compatibility (including Java AXIS, .NET and Jboss WS). It is included into Web2Py to enable full-stack solutions (complementing other supported protocols as XML_RPC, JSON, AMF-RPC, etc.).

 * [[http://pypi.python.org/pypi/ladon|Ladon]] Ladon is a multiprotocol approach to creating a webservice. Create one service and expose it to several service protocols including SOAP.

== SOAPjr ==

 * [[http://soapjr.org/]]
 * [[http://en.wikipedia.org/wiki/SOAPjr]]

== XML-RPC ==

The first popular and largely standardised Web services technology was [[XmlRpc|XML-RPC]], supported in Python by the following libraries:

 * xmlrpclib - found in the standard library

== XMPP ==

More in common with the message-centric usage of [[SOAP]], [[http://www.xmpp.org/|XMPP]] - an Internet standard which provides the foundation for the Jabber instant messaging technology - could be used as a Web services protocol. See [[PythonXml]] for details of suitable projects.

== Editorial Note ==

The above lists should be arranged in ascending alphabetical order - please respect this when adding new solutions. When specifying release dates please use the format YYYY-MM-DD.
