= Web Services =


Web services can be generally regarded as functions or functionality of applications or systems exposed over the Web using standardised message formats and typically interfaced to other software using traditional APIs, although "message-centric" usage of such services is also possible and may be favoured by certain technologies.


== JSON-RPC ==

[[http://json-rpc.org/|JSON-RPC]] is an increasingly popular Web Services specification that uses the light-weight [[http://json.org/|JSON]] ([[JavaScript|JavaScript]] Object Notation) data-interchange format (in comparison to the protocols listed below, which all use XML). JSON-RPC was created in 2004 and implementations exist in [[JavaScript|JavaScript]], Java, PHP and Perl (among other languages) in addition to Python.


 * [[http://json-rpc.org/wiki/python-json-rpc|python-json-rpc]] The specification website includes a Python implementation.
 * [[http://pypi.python.org/pypi/JsonUtils/|JsonUtils]] is another library that supports JSON-RPC.


== JSON-WSP ==

[[http://en.wikipedia.org/wiki/Jsonwsp|JSON-WSP]] is another JSON based webservice protocol. It is inspired by JSON-RPC but designed with a JSON based description format (like WSDL in SOAP). For the time being there is only a Python based implementation, but a PHP implementation is in progress and will also be openly available.

 * Ladon is a multiprotocol approach to creating a webservice. See below, in the SOAP section, for more information.
 * [[https://bitbucket.org/pfacka/jsonwsp|pfacka/jsonwsp]] is another JSON-WSP server and client implementation.

== SOAP ==

[[SOAP]] is a Web services technology favoured in certain environments. The following projects seek to support SOAP and related technologies such as WSDL:

 * [[https://github.com/mvantellingen/python-zeep|zeep]] ([[https://pypi.org/project/zeep/|on PyPi]]) - Zeep is a modern and high performant SOAP client build on top of lxml and requests. It's well maintained, and compatible with Python 2 and 3.
 * [[https://github.com/suds-community/suds|suds]] ([[https://pypi.org/project/suds-community/|on PyPi]]) - Suds is a lightweight SOAP python client that provides a service proxy for Web Services. This is the best maintained fork of the original Suds project by Jeff Ortel, and it's compatible with Python 2 and 3.
 * [[https://github.com/arskom/spyne|spyne]] ([[https://pypi.org/project/spyne/|on PyPi]]) - Spyne, formerly known as Soaplib, is transport and architecture agnostic RPC library that focuses on exposing services with a well-defined API using popular protocols, including SOAP.  It's well maintained, and compatible with Python 2 and mostly 3.
 * [[https://bitbucket.org/jakobsg/ladon/|ladon]] ([[https://pypi.org/project/ladon/|on PyPi]]) - Ladon is a framework for exposing python methods to several internet service protocols. It's compatible with Python 2 and 3.
 * [[https://github.com/pysimplesoap/pysimplesoap/|pysimplesoap]] ([[https://pypi.org/project/PySimpleSOAP/|on PyPi]]) - PySimpleSOAP is a simple and functional client/server. It's compatible with Python 2 and 3.
 * [[https://bitbucket.org/sboz/osa|osa]] - osa is a fast/slim easy to use SOAP python client library.
 * [[http://sourceforge.net/projects/pywebsvcs|Python Web Services]] and Zolera Soap Infrastructure (([[https://pypi.org/project/ZSI/|ZSI on PyPi]]) provides both client and server SOAP libraries. It was very popular, but it's a dead project (last release 2007) without any Python 3 support.


== SOAPjr ==


 * http://en.wikipedia.org/wiki/SOAPjr


== XML-RPC ==


The first popular and largely standardised Web services technology was [[XmlRpc|XML-RPC]], supported in Python by the following libraries:


 * xmlrpclib - found in the standard library


== XMPP ==


More in common with the message-centric usage of [[SOAP|SOAP]], [[http://www.xmpp.org/|XMPP]] - an Internet standard which provides the foundation for the Jabber instant messaging technology - could be used as a Web services protocol. See [[PythonXml|PythonXml]] for details of suitable projects.


== Editorial Note ==


The above lists should be arranged in ascending alphabetical order - please respect this when adding new solutions. When specifying release dates please use the format YYYY-MM-DD.
