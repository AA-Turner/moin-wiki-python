== Python for Non-Programmers ==


If you've never programmed before, the tutorials on this page are recommended for you; they don't assume that you have previous experience. If you have programming experience, also check out the [[BeginnersGuide/Programmers|BeginnersGuide/Programmers]] page.

Below are links to [[#Video_Tutorials|video tutorials]], [[#Graded_Introductory_Programming_Courses|online courses]] with programming exercises, [[#Websites_and_Books|websites, books]], and [[#For_Younger_Students|resources for younger students]].

== Graded Introductory Programming Courses ==

/* please keep this list alphabetized */

 * [[http://cscircles.ca/|Computer Science Circles]], aussi [[FrenchLanguage|en français]] (Python 3)
 * [[http://interactivepython.org/courselib/static/thinkcspy/index.html|How to Think Like a Computer Scientist: Interactive Edition (Python 3.x)]]
 * [[http://www.learnpython.org/|learnpython.org]] (Python 2)

 * [[http://www.codecademy.com/tracks/python|Python on Codecademy]] (Python 2)

== Websites and Books ==

/* please keep this list alphabetized */

 * [[http://www.afterhoursprogramming.com/tutorial/Python/Overview/|After Hours Programming Python 3 Tutorial]] (Python 3)
 * [[http://www.onlamp.com/pub/a/python/2002/10/17/biopython.html|Beginning Python for Bioinformatics]] by Patrick O'Brien. An introduction to Python aimed at biologists that introduces the [[PyCrust|PyCrust]] shell and Python's basic data types.
 * [[http://www.byteofpython.info/|Byte of Python]], by Swaroop C.H., is also an introductory text for people with no previous programming experience. (Python 2 and 3)
 * [[http://www.pentangle.net/python/handbook/|Handbook of the Physics Computing Course]] Also available in various forms at the author's [[http://www.pentangle.net/python/|Python in Education]] page, this is a preliminary course handbook for 1st-year university students with no computing experience. This course material is still preliminary and assumes some high school-level maths. It does not cover object-oriented programming or graphical applications. (Python 2)
 * [[http://openbookproject.net/thinkcs/python/english2e/|How to Think Like a Computer Scientist - 2nd edition]] Allen Downey's open source textbook has a Python version, written with Jeff Elkner. It's also available in book form. It was updated and current version is 2nd edition. (Python 2)
 * [[http://hetland.org/writing/instant-hacking.html|Instant Hacking]] A minimal crash course by Magnus Lie Hetland that's an excellent starting point. (Python 2)
 * [[http://inventwithpython.com|Invent Your Own Computer Games with Python, 2nd Ed]], by Al Sweigart is a free e-Book that teaches complete beginners how to program by making games. (Python 3)
 * [[http://learnpythonthehardway.org/book/|Learn Python The Hard Way]] The title is a misnomer. It would be better titled "Learn Python By Coding It." The author determined that learning python should be similar to learning an instrument. You don't get a book on scales, but you're taught a scale and practice it. The author teaches you how to code properly, how to think like a programmer, and develop quality problem solving skill through a set of 52 exercises that build on each other. (Python 2)
 * [[http://www.alan-g.me.uk|Learning to Program]] An introduction to programming for those who have never programmed before, by Alan Gauld. It introduces several programming languages but has a strong emphasis on Python. (Python 2 and 3)
 * [[http://learn-to-program.net/python|Learning Python (for the complete nOOb)]] by Derrick Wolters. A beginner's tutorial to learn how to program in Python. (Python 2)
 * [[http://inventwithpython.com/pygame|Making Games with Python & Pygame]], by Al Sweigart is a free e-Book that introduces the Pygame framework for novices and intermediate programmers to make graphical games. (Python 3)
 * Free Python video lectures are also available as a course titled [[Intro to programming with Python and Tkinter|Intro to programming with Python and Tkinter]], Unix users can view the video using mplayer once you have downloaded the files. Windows users will need to have a DivX player, available from http://www.divx.com/divx/windows/. (One user reports success viewing the videos on OS X 10.4 using the VLC player -- http://www.videolan.org/)
 * [[http://en.wikibooks.org/wiki/Non-Programmer's_Tutorial_for_Python_2.6|Non-Programmer's Tutorial for Python 2.6]] by Josh Cogliati.
 * [[http://en.wikibooks.org/wiki/Non-Programmer's_Tutorial_for_Python_3.0|Non-Programmer's Tutorial for Python 3]] on Wikibooks.
 * [[http://hkn.eecs.berkeley.edu/~dyoo/python/idle_intro/index.html|One Day of IDLE Toying]] A very gentle introduction to the IDLE development environment that comes with Python. This tutorial by Danny Yoo has been translated into nine different languages. (Python 2)
 * Pasteur Institute courses are aimed at biologists but are useful to anyone wanting to learn Python. Both tutorials are quite extensive, covering data types, object-oriented programming, files, and even design patterns.
  * [[http://www.pasteur.fr/formation/infobio/python/|Introduction to Programming using Python]] is for people completely new to programming.
  * [[http://www.pasteur.fr/recherche/unites/sis/formation/python/|Bioinformatics course in Python]] focuses on preparing people with some programming background for using the [[http://www.biopython.org|Biopython]] modules.
 * [[http://docs.python.org/tut/|Python Tutorial]] This tutorial is part of Python's documentation set and is updated with each new release. It's not written with non-programmers in mind, but skimming through it will give you an idea of the language's flavor and style. This is currently for Python 2, but there is also a [[http://docs.python.org/py3k/tutorial/|Python 3 Tutorial]].
 * [[http://nematodes.org/martin/teaching/introduction-to-python-for-biologists/|Python for biologists]] (Python 3)
 * [[http://programminghistorian.org|The Programming Historian 2]] From the "About This Book" page: "This book is a tutorial-style introduction to programming for practicing historians. We assume that you're starting out with no prior programming experience and only a basic understanding of computers. More experience, of course, won't hurt. Once you know how to program, you will find it relatively easy to learn new programming languages and techniques, and to apply what you know in unfamiliar situations." (Python 2)
 * The [[http://young-programmers.blogspot.com/search/label/python|Young Programmers Podcast]] contains video lessons on Python, Pygame, Jython, Scratch, Alice, Java and Scala.

== Video Tutorials ==

/* please keep this list alphabetized */

 * [[http://www.toonzcat.com/progart.html|Python 3 Beginner Video Tutorials]]
 * [[http://www.khanacademy.org/#computer-science|Khan Academy computer science]] (Python 2, not actively maintained)

== For Younger Students ==

/* please keep this list alphabetized */

 * [[http://www.livewires.org.uk/python/|LiveWires]] A set of Python lessons used during 1999, 2000, 2001 and 2002 children's summer camps in Britain by Richard Crook, Gareth [[McCaughan|McCaughan]], Mark White, and Rhodri James. Aimed at children 12-15 years old.
 * [[http://gvr.sourceforge.net|Guido van Robot]] A teaching tool in which students write simple programs using a Python-like language to control a simulated robot. Field-tested at Yorktown High School, the project includes a lesson plan.
 * [[http://pythonturtle.com|PythonTurtle]] A learning environment for Python suitable for beginners and children, inspired by Logo. Geared mainly towards children, but known to be successful with adults as well.
 * [[http://python.lycee.free.fr/|Débuter avec Python au lycée]] A french tutorial intended to secondary school pupils.
