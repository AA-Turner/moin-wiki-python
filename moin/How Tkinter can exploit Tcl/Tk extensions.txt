[[Tcl]]/[[Tk]] developers have constructed many interesting
widget sets which extend Tk's basic functionality.  A few of
these--[[Tix]], for example--are reasonably well known and
accessible to Tkinter users.  What about the rest?  When a
[[TkInter]] programmer sees a promising Tk extension, is it
likely to do him or her any good?

Briefly, yes.  First, it's important to make the distinction
between so-called "pure Tk" extensions and those that involve
(external) C-coded compilation.  Quite a few useful widgets
sets, most notably including [[BWidgets]] and [[tklib]], are
"pure Tk".  That means that Tcl/Tk programmers simply read
them in at run time, with no need for (re-)compilation, 
configuration, or other deployment complexities.

These extensions are nearly as easy for [[TkInter]] programmers
to use.  Here's an example:  

If you have a file of Tcl code in a file called foo.tcl
and you want to call the Tcl function foo_bar then
{{{
    import Tkinter
    root = Tkinter.Tk()
    root.tk.eval('source {foo.tcl}')
    root.tk.eval('foo_bar')
}}}

will load and execute foo_bar. To see the details of passing and
returing arguments, Use the Source Luke, and look at Lib/lib-tk/Tkinter.py.
For wrappers of other popular Tk widgets, look at the Python/ directory
of the Tixapps distribution http://tix.sourceforge.net/Tixapps/

On the other hand, [[Tix]] and [[BLT]] are popular Tk extensions which
require compilation. These days (since version 8.0 of Tk) most extensions
are compiled as dynamic loading packages, and are as easy to load into
Tkinter as pure Tk extensions using a Python expression like

{{{
    root.tk.eval('package require Ext')
}}}

For an example of this, see the Lib/lib-tk/Tix.py file in the standard
library that loads the [[Tix]] extension.

The trick here is to install the extension library directory in a place the
Tcl in [[TkInter]] will find it. The best place to try is as a subdirectory
of Tcl/ in the Python installation. If this does not work, look into
the file pkgIndex.tcl in the extension's library directory and try to
understand what it is doing to load the .dll or .so shared library.
To ask Tcl to consider a specific directory that contains a package, use

{{{
     root.tk.eval('lappend auto_path {%s}' % the_tcl_directory)
}}}


----
FredrikLundh has pages which he calls "work in progress", but
which readers are certain to find helpful:
http://effbot.org/zone/bwidgets.htm 
and
http://effbot.org/zone/tkinter-text-bind-insert-delete.htm
The latter explicitly extends Tkinter through use of Tcl.
Also, Gustavo Cordero is working in this same area; his work
is likely to show up in the Tcl-ers' Wiki for
[[http://wiki.tcl.tk/tkinter|Tkinter]].
