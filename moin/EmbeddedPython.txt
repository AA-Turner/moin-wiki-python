= Embedded Python =

Python can be used in embedded, small or minimal hardware devices, depending on how limiting the devices actually are.

== Devices capable of running CPython ==

Some modern embedded devices have enough memory and a fast enough CPU to run a typical Linux-based environment, for example, and running CPython on such devices is mostly a matter of compilation (or cross-compilation) and tuning.

Devices which could be considered as "embedded" by modern standards and which can run tuned versions of CPython include the following:

 * [http://www.gumstix.org/ Gumstix]
 * FIC [http://wiki.openmoko.org/wiki/Neo1973 Neo1973] and [http://wiki.openmoko.org/wiki/Neo_FreeRunner Neo FreeRunner] ([http://wiki.openmoko.org/wiki/Python Python on Openmoko])
 * [http://www.telit.com/en/products/python/why-python.php Telit GSM/GPRS modules]

See also ["PythonForArmLinux"] and ["OpenEmbedded"].

== Reduced or reworked Python implementations ==

Some devices may be more restrictive in that the typical memory footprint of CPython may exceed the amount of memory available on the device. In such cases, a re-engineered or adapted version of CPython, perhaps even to the point where it can be considered a new implementation of Python, might be appropriate.

Examples of such implementations include the following:

 * PyMite
 * ["Tiny Python"]

On yet another hand, one can start with a full build, and simply
remove unneeded modules--Tkinter, ...--to realize 
a reduced-size Python 
with little effort.

== Python-based tools for developing embedded applications ==

Sometimes the embedded environment is just too restrictive to support a Python virtual machine. In such cases, various Python tools can be employed for prototyping, with the eventual application or system code being generated and deployed on the device.

Tools which support this kind of development include the following:

 * [http://myhdl.jandecaluwe.com/ MyHDL]
 * [http://www.sticlete.com/whatos/ WhatOS]
