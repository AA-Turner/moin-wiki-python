#format wiki
#pragma section-numbers off

''(TextEdit.app terminology, generated from /Applications/TextEdit.app)''

|| '''Suites''' || [[#suite_Standard_Suite|Standard Suite]] [[#suite_Text_Suite|Text Suite]]  ||
|| '''Commands''' || [[#command_close|close]] [[#command_count|count]] [[#command_delete|delete]] [[#command_duplicate|duplicate]] [[#command_exists|exists]] [[#command_get|get]] [[#command_make|make]] [[#command_move|move]] [[#command_open|open]] [[#command_print_|print_]] [[#command_quit|quit]] [[#command_save|save]] [[#command_set|set]]  ||
|| '''Classes''' || [[#class_application|application]] [[#class_attachment|attachment]] [[#class_attribute_run|attribute_run]] [[#class_character|character]] [[#class_color|color]] [[#class_document|document]] [[#class_item|item]] [[#class_paragraph|paragraph]] [[#class_text|text]] [[#class_window|window]] [[#class_word|word]]  ||


<<Anchor(suite_Standard_Suite)>>
== Standard Suite  ==
Common classes and commands for most applications.

=== Commands ===

 <<Anchor(command_get)>>'''reference.get()'''  -- Get the data for an object.<<BR>>
  Result: ''Anything''  -- the reply for the command   

 <<Anchor(command_save)>>'''reference.save(...)'''  -- Save an object.<<BR>>
  ['''as'''=''UnicodeText''] -- The file type in which to save the data.<<BR>>
  ['''in_'''=''Alias''] -- The file in which to save the object.<<BR>>
  Result: ''None''    

 <<Anchor(command_set)>>'''reference.set(...)'''  -- Set an object's data.<<BR>>
  '''to'''=''Anything'' -- The new value.<<BR>>
  Result: ''None''    

 <<Anchor(command_print_)>>'''application.print_(...)'''  -- Print an object.<<BR>>
  [''Alias''] -- The file(s) or document(s) to be printed.<<BR>>
  Result: ''None''    

 <<Anchor(command_duplicate)>>'''reference.duplicate(...)'''  -- Copy object(s) and put the copies at a new location.<<BR>>
  '''to'''=''InsertionLoc'' -- The location for the new object(s).<<BR>>
  ['''with_properties'''=''AERecord''] -- Properties to be set in the new duplicated object(s).<<BR>>
  Result: ''None''    

 <<Anchor(command_exists)>>'''reference.exists()'''  -- Verify if an object exists.<<BR>>
  Result: ''Boolean''  -- the reply for the command   

 <<Anchor(command_delete)>>'''reference.delete()'''  -- Delete an object.<<BR>>
  Result: ''None''    

 <<Anchor(command_make)>>'''application.make(...)'''  -- Make a new object.<<BR>>
  ['''with_properties'''=''AERecord''] -- The initial values for properties of the object.<<BR>>
  '''new'''=''Type'' -- The class of the new object.<<BR>>
  ['''with_data'''=''Anything''] -- The initial data for the object.<<BR>>
  ['''at'''=''InsertionLoc''] -- The location at which to insert the object.<<BR>>
  Result: ''ObjectSpecifier''  -- the reply for the command   

 <<Anchor(command_open)>>'''application.open(...)'''  -- Open an object.<<BR>>
  [''Alias''] -- The file(s) to be opened.<<BR>>
  Result: ''None''    

 <<Anchor(command_close)>>'''reference.close(...)'''  -- Close an object.<<BR>>
  ['''saving'''=''k.yes | k.no | k.ask''] -- Specifies whether changes should be saved before closing.<<BR>>
  ['''saving_in'''=''Alias''] -- The file in which to save the object.<<BR>>
  Result: ''None''    

 <<Anchor(command_count)>>'''reference.count(...)'''  -- Return the number of elements of a particular class within an object.<<BR>>
  ['''each'''=''Type''] -- The class of objects to be counted.<<BR>>
  Result: ''SInt32''  -- the reply for the command   

 <<Anchor(command_move)>>'''reference.move(...)'''  -- Move object(s) to a new location.<<BR>>
  '''to'''=''InsertionLoc'' -- The new location for the object(s).<<BR>>
  Result: ''None''    

 <<Anchor(command_quit)>>'''reference.quit(...)'''  -- Quit an application.<<BR>>
  ['''saving'''=''k.yes | k.no | k.ask''] -- Specifies whether changes should be saved before quitting.<<BR>>
  Result: ''None''    


=== Classes ===

 <<Anchor(class_document)>>'''document'''  -- A /TextEdit document.
  Parent:
   ''[[#class_item|item]]'' 
  
  
  Properties:
   
   '''modified''' (r/o) ''Boolean'' -- Has the document been modified since the last save?<<BR>>
   '''path'''  ''UnicodeText'' -- The document's path.<<BR>>
   '''name'''  ''UnicodeText'' -- The document's name.<<BR>>
   '''text'''  ''[[#class_text|k.text]]'' -- The text of the document.<<BR>>
   
  
 
 <<Anchor(class_item)>>'''item'''  -- A scriptable object.
  
  Children:
   ''[[#class_character|character]]'' ''[[#class_paragraph|paragraph]]'' ''[[#class_application|application]]'' ''[[#class_color|color]]'' ''[[#class_document|document]]'' ''[[#class_attribute_run|attribute_run]]'' ''[[#class_window|window]]'' ''[[#class_word|word]]'' ''[[#class_text|text]]'' 
  
  Properties:
   
   '''class_''' (r/o) ''Type'' -- The class of the object.<<BR>>
   '''properties'''  ''AERecord'' -- All of the object's properties.<<BR>>
   
  
 
 <<Anchor(class_window)>>'''window'''  -- A window.
  Parent:
   ''[[#class_item|item]]'' 
  
  
  Properties:
   
   '''zoomed'''  ''Boolean'' -- Whether the window is currently zoomed.<<BR>>
   '''miniaturized'''  ''Boolean'' -- Whether the window is currently miniaturized.<<BR>>
   '''name'''  ''UnicodeText'' -- The full title of the window.<<BR>>
   '''floating''' (r/o) ''Boolean'' -- Whether the window floats.<<BR>>
   '''modal''' (r/o) ''Boolean'' -- Whether the window is the application's current modal window.<<BR>>
   '''miniaturizable''' (r/o) ''Boolean'' -- Whether the window can be miniaturized.<<BR>>
   '''visible'''  ''Boolean'' -- Whether the window is currently visible.<<BR>>
   '''closeable''' (r/o) ''Boolean'' -- Whether the window has a close box.<<BR>>
   '''resizable''' (r/o) ''Boolean'' -- Whether the window can be resized.<<BR>>
   '''zoomable''' (r/o) ''Boolean'' -- Whether the window can be zoomed.<<BR>>
   '''id''' (r/o) ''SInt32'' -- The unique identifier of the window.<<BR>>
   '''bounds'''  ''QDRectangle'' -- The bounding rectangle of the window.<<BR>>
   '''titled''' (r/o) ''Boolean'' -- Whether the window has a title bar.<<BR>>
   '''index'''  ''SInt32'' -- The index of the window in the back-to-front window ordering.<<BR>>
   '''document''' (r/o) ''[[#class_document|k.document]]'' -- The document whose contents are being displayed in the window.<<BR>>
   
  
 
 <<Anchor(class_application)>>'''application'''  -- TextEdit's top level scripting object.
  Parent:
   ''[[#class_item|item]]'' 
  
  
  Properties:
   
   '''version''' (r/o) ''UnicodeText'' -- The version of the application.<<BR>>
   '''frontmost''' (r/o) ''Boolean'' -- Is this the frontmost (active) application?<<BR>>
   '''name''' (r/o) ''UnicodeText'' -- The name of the application.<<BR>>
   
  Elements:
   
   '''[[#class_window|windows]]''' -- '' name | index | relative | range | test | id''<<BR>>
   '''[[#class_document|documents]]''' -- '' name | index | relative | range | test''<<BR>>
   
 
 <<Anchor(class_color)>>'''color'''  -- A color.
  Parent:
   ''[[#class_item|item]]'' 
  
  
  
  
 


<<Anchor(suite_Text_Suite)>>
== Text Suite  ==
A set of basic classes for text processing.


=== Classes ===

 <<Anchor(class_attachment)>>'''attachment'''  -- Represents an inline text attachment.  This class is used mainly for make commands.
  Parent:
   ''[[#class_text|text]]'' 
  
  
  Properties:
   
   '''file_name'''  ''UnicodeText'' -- The path to the file for the attachment<<BR>>
   
  
 
 <<Anchor(class_text)>>'''text'''  -- Rich (styled) text
  Parent:
   ''[[#class_item|item]]'' 
  
  Children:
   ''[[#class_attachment|attachment]]'' 
  
  Properties:
   
   '''size'''  ''SInt32'' -- The size in points of the first character.<<BR>>
   '''font'''  ''UnicodeText'' -- The name of the font of the first character.<<BR>>
   '''color'''  ''[[#class_color|k.color]]'' -- The color of the first character.<<BR>>
   
  Elements:
   
   '''[[#class_character|characters]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_attribute_run|attribute_runs]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_attachment|attachment]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_word|words]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_paragraph|paragraphs]]''' -- '' index | relative | range | test''<<BR>>
   
 
 <<Anchor(class_attribute_run)>>'''attribute_run'''  -- This subdivides the text into chunks that all have the same attributes.
  Parent:
   ''[[#class_item|item]]'' 
  
  
  Properties:
   
   '''size'''  ''SInt32'' -- The size in points of the first character.<<BR>>
   '''font'''  ''UnicodeText'' -- The name of the font of the first character.<<BR>>
   '''color'''  ''[[#class_color|k.color]]'' -- The color of the first character.<<BR>>
   
  Elements:
   
   '''[[#class_character|characters]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_attribute_run|attribute_runs]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_attachment|attachment]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_word|words]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_paragraph|paragraphs]]''' -- '' index | relative | range | test''<<BR>>
   
 
 <<Anchor(class_character)>>'''character'''  -- This subdivides the text into characters.
  Parent:
   ''[[#class_item|item]]'' 
  
  
  Properties:
   
   '''size'''  ''SInt32'' -- The size in points of the first character.<<BR>>
   '''font'''  ''UnicodeText'' -- The name of the font of the first character.<<BR>>
   '''color'''  ''[[#class_color|k.color]]'' -- The color of the first character.<<BR>>
   
  Elements:
   
   '''[[#class_character|characters]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_attribute_run|attribute_runs]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_attachment|attachment]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_word|words]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_paragraph|paragraphs]]''' -- '' index | relative | range | test''<<BR>>
   
 
 <<Anchor(class_word)>>'''word'''  -- This subdivides the text into words.
  Parent:
   ''[[#class_item|item]]'' 
  
  
  Properties:
   
   '''size'''  ''SInt32'' -- The size in points of the first character.<<BR>>
   '''font'''  ''UnicodeText'' -- The name of the font of the first character.<<BR>>
   '''color'''  ''[[#class_color|k.color]]'' -- The color of the first character.<<BR>>
   
  Elements:
   
   '''[[#class_character|characters]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_attribute_run|attribute_runs]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_attachment|attachment]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_word|words]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_paragraph|paragraphs]]''' -- '' index | relative | range | test''<<BR>>
   
 
 <<Anchor(class_paragraph)>>'''paragraph'''  -- This subdivides the text into paragraphs.
  Parent:
   ''[[#class_item|item]]'' 
  
  
  Properties:
   
   '''size'''  ''SInt32'' -- The size in points of the first character.<<BR>>
   '''font'''  ''UnicodeText'' -- The name of the font of the first character.<<BR>>
   '''color'''  ''[[#class_color|k.color]]'' -- The color of the first character.<<BR>>
   
  Elements:
   
   '''[[#class_character|characters]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_attribute_run|attribute_runs]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_attachment|attachment]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_word|words]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_paragraph|paragraphs]]''' -- '' index | relative | range | test''<<BR>>
