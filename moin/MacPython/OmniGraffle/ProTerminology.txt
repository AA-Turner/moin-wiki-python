#format wiki
#pragma section-numbers off

''(OmniGraffle Professional.app terminology, generated from /Applications/Graphisme/OmniGraffle Professional.app)''

|| '''Suites''' || [[#suite_Standard_Suite|Standard Suite]] [[#suite_Text_Suite|Text Suite]] [[#suite_Extended_Text_Suite|Extended Text Suite]] [[#suite_OmniFoundation_Scripting|/OmniFoundation Scripting]] [[#suite_OmniGraffle|OmniGraffle]]  ||
|| '''Commands''' || [[#command_add|add]] [[#command_assemble|assemble]] [[#command_bold|bold]] [[#command_close|close]] [[#command_connect|connect]] [[#command_count|count]] [[#command_delete|delete]] [[#command_duplicate|duplicate]] [[#command_exists|exists]] [[#command_flip|flip]] [[#command_get|get]] [[#command_italicize|italicize]] [[#command_layout|layout]] [[#command_make|make]] [[#command_move|move]] [[#command_open|open]] [[#command_page_adjust|page_adjust]] [[#command_print_|print_]] [[#command_quit|quit]] [[#command_remove|remove]] [[#command_replace|replace]] [[#command_save|save]] [[#command_set|set]] [[#command_slide|slide]] [[#command_unbold|unbold]] [[#command_underline|underline]] [[#command_unitalicize|unitalicize]] [[#command_ununderline|ununderline]]  ||
|| '''Classes''' || [[#class_application|application]] [[#class_attribute_run|attribute_run]] [[#class_character|character]] [[#class_color|color]] [[#class_document|document]] [[#class_graphic|graphic]] [[#class_grid|grid]] [[#class_group|group]] [[#class_incoming_line|incoming_line]] [[#class_item|item]] [[#class_label|label]] [[#class_layer|layer]] [[#class_layout_info|layout_info]] [[#class_line|line]] [[#class_outgoing_line|outgoing_line]] [[#class_page|page]] [[#class_paragraph|paragraph]] [[#class_point|point]] [[#class_polygon|polygon]] [[#class_record|record]] [[#class_section|section]] [[#class_shape|shape]] [[#class_solid|solid]] [[#class_text|text]] [[#class_text_attachment|text_attachment]] [[#class_window|window]] [[#class_word|word]]  ||


<<Anchor(suite_Standard_Suite)>>
== Standard Suite  ==
Common classes and commands for most applications.

=== Commands ===

 <<Anchor(command_get)>>'''reference.get()'''  -- Get the data for an object.<<BR>>
  Result: ''Anything''  -- the reply for the command   

 <<Anchor(command_save)>>'''reference.save(...)'''  -- Save an object.<<BR>>
  ['''as'''=''UnicodeText''] -- The file type in which to save the data.<<BR>>
  ['''in_'''=''Alias''] -- The file in which to save the object.<<BR>>
  Result: ''None''    

 <<Anchor(command_set)>>'''reference.set(...)'''  -- Set an object's data.<<BR>>
  '''to'''=''Anything'' -- The new value.<<BR>>
  Result: ''None''    

 <<Anchor(command_print_)>>'''application.print_(...)'''  -- Print an object.<<BR>>
  [''Alias''] -- The file(s) or document(s) to be printed.<<BR>>
  Result: ''None''    

 <<Anchor(command_duplicate)>>'''reference.duplicate(...)'''  -- Copy object(s) and put the copies at a new location.<<BR>>
  '''to'''=''InsertionLoc'' -- The location for the new object(s).<<BR>>
  ['''with_properties'''=''AERecord''] -- Properties to be set in the new duplicated object(s).<<BR>>
  Result: ''None''    

 <<Anchor(command_exists)>>'''reference.exists()'''  -- Verify if an object exists.<<BR>>
  Result: ''Boolean''  -- the reply for the command   

 <<Anchor(command_delete)>>'''reference.delete()'''  -- Delete an object.<<BR>>
  Result: ''None''    

 <<Anchor(command_make)>>'''application.make(...)'''  -- Make a new object.<<BR>>
  ['''with_properties'''=''AERecord''] -- The initial values for properties of the object.<<BR>>
  '''new'''=''Type'' -- The class of the new object.<<BR>>
  ['''with_data'''=''Anything''] -- The initial data for the object.<<BR>>
  ['''at'''=''InsertionLoc''] -- The location at which to insert the object.<<BR>>
  Result: ''ObjectSpecifier''  -- the reply for the command   

 <<Anchor(command_open)>>'''application.open(...)'''  -- Open an object.<<BR>>
  [''Alias''] -- The file(s) to be opened.<<BR>>
  Result: ''None''    

 <<Anchor(command_close)>>'''reference.close(...)'''  -- Close an object.<<BR>>
  ['''saving'''=''k.yes | k.no | k.ask''] -- Specifies whether changes should be saved before closing.<<BR>>
  ['''saving_in'''=''Alias''] -- The file in which to save the object.<<BR>>
  Result: ''None''    

 <<Anchor(command_count)>>'''reference.count(...)'''  -- Return the number of elements of a particular class within an object.<<BR>>
  ['''each'''=''Type''] -- The class of objects to be counted.<<BR>>
  Result: ''SInt32''  -- the reply for the command   

 <<Anchor(command_move)>>'''reference.move(...)'''  -- Move object(s) to a new location.<<BR>>
  '''to'''=''InsertionLoc'' -- The new location for the object(s).<<BR>>
  Result: ''None''    

 <<Anchor(command_quit)>>'''reference.quit(...)'''  -- Quit an application.<<BR>>
  ['''saving'''=''k.yes | k.no | k.ask''] -- Specifies whether changes should be saved before quitting.<<BR>>
  Result: ''None''    


=== Classes ===

 <<Anchor(class_document)>>'''document'''  -- An /OmniGraffle document
  Parent:
   ''[[#class_item|item]]'' 
  
  
  Properties:
   
   '''modified''' (r/o) ''Boolean'' -- Has the document been modified since the last save?<<BR>>
   '''path'''  ''UnicodeText'' -- The document's path.<<BR>>
   '''name'''  ''UnicodeText'' -- The document's name.<<BR>>
   '''links_visible'''  ''Boolean'' -- Whether link indicators are visible<<BR>>
   '''alignment_guides_enabled'''  ''Boolean'' -- Whether smart alignment guides are enabled<<BR>>
   '''distance_guides_enabled'''  ''Boolean'' -- Whether smart distance guides are enabled<<BR>>
   '''show_guides'''  ''Boolean'' -- Whether manually set guides are visible<<BR>>
   '''page_breaks_visible'''  ''Boolean'' -- Whether page breaks are visible<<BR>>
   '''magnets_visible'''  ''Boolean'' -- Whether magnets are visible<<BR>>
   
  Elements:
   
   '''[[#class_page|pages]]''' -- '' name | index | relative | range | test''<<BR>>
   
 
 <<Anchor(class_item)>>'''item'''  -- A scriptable object.
  
  Children:
   ''[[#class_color|color]]'' ''[[#class_label|label]]'' ''[[#class_section|section]]'' ''[[#class_window|window]]'' ''[[#class_layout_info|layout_info]]'' ''[[#class_point|point]]'' ''[[#class_grid|grid]]'' ''[[#class_word|word]]'' ''[[#class_page|page]]'' ''[[#class_attribute_run|attribute_run]]'' ''[[#class_layer|layer]]'' ''[[#class_character|character]]'' ''[[#class_paragraph|paragraph]]'' ''[[#class_application|application]]'' ''[[#class_document|document]]'' ''[[#class_graphic|graphic]]'' ''[[#class_text|text]]'' 
  
  Properties:
   
   '''class_''' (r/o) ''Type'' -- The class of the object.<<BR>>
   '''properties'''  ''AERecord'' -- All of the object's properties.<<BR>>
   
  
 
 <<Anchor(class_window)>>'''window'''  -- An /OmniGraffle window
  Parent:
   ''[[#class_item|item]]'' 
  
  
  Properties:
   
   '''zoomed'''  ''Boolean'' -- Whether the window is currently zoomed.<<BR>>
   '''miniaturized'''  ''Boolean'' -- Whether the window is currently miniaturized.<<BR>>
   '''name'''  ''UnicodeText'' -- The full title of the window.<<BR>>
   '''floating''' (r/o) ''Boolean'' -- Whether the window floats.<<BR>>
   '''modal''' (r/o) ''Boolean'' -- Whether the window is the application's current modal window.<<BR>>
   '''miniaturizable''' (r/o) ''Boolean'' -- Whether the window can be miniaturized.<<BR>>
   '''visible'''  ''Boolean'' -- Whether the window is currently visible.<<BR>>
   '''closeable''' (r/o) ''Boolean'' -- Whether the window has a close box.<<BR>>
   '''resizable''' (r/o) ''Boolean'' -- Whether the window can be resized.<<BR>>
   '''zoomable''' (r/o) ''Boolean'' -- Whether the window can be zoomed.<<BR>>
   '''id''' (r/o) ''SInt32'' -- The unique identifier of the window.<<BR>>
   '''bounds'''  ''QDRectangle'' -- The bounding rectangle of the window.<<BR>>
   '''titled''' (r/o) ''Boolean'' -- Whether the window has a title bar.<<BR>>
   '''index'''  ''SInt32'' -- The index of the window in the back-to-front window ordering.<<BR>>
   '''document''' (r/o) ''[[#class_document|k.document]]'' -- The document whose contents are being displayed in the window.<<BR>>
   '''zoom'''  ''ShortFloat'' -- Current zoom setting for this window<<BR>>
   '''page'''  ''[[#class_page|k.page]]'' -- Current page this window is viewing<<BR>>
   '''selection'''  ''AEList'' -- Selected graphics<<BR>>
   
  
 
 <<Anchor(class_application)>>'''application'''  -- /OmniGraffle
  Parent:
   ''[[#class_item|item]]'' 
  
  
  Properties:
   
   '''version''' (r/o) ''UnicodeText'' -- The version of the application.<<BR>>
   '''frontmost''' (r/o) ''Boolean'' -- Is this the frontmost (active) application?<<BR>>
   '''name''' (r/o) ''UnicodeText'' -- The name of the application.<<BR>>
   '''self''' (r/o) ''[[#class_graphic|k.graphic]]'' -- Graphic clicked to start this script<<BR>>
   '''professional''' (r/o) ''Boolean'' -- Whether this application is /OmniGraffle or /OmniGraffle Professional<<BR>>
   '''demo''' (r/o) ''Boolean'' -- Is this the demo version of the application<<BR>>
   
  Elements:
   
   '''[[#class_window|windows]]''' -- '' name | index | relative | range | test | id''<<BR>>
   '''[[#class_document|documents]]''' -- '' name | index | relative | range | test''<<BR>>
   
 
 <<Anchor(class_color)>>'''color'''  -- A color.
  Parent:
   ''[[#class_item|item]]'' 
  
  
  
  
 


<<Anchor(suite_Text_Suite)>>
== Text Suite  ==
A set of basic classes for text processing.


=== Classes ===

 <<Anchor(class_text_attachment)>>'''text_attachment'''  -- Represents an inline text attachment.  This class is used mainly for make commands.
  Parent:
   ''[[#class_text|text]]'' 
  
  
  Properties:
   
   '''file_name'''  ''UnicodeText'' -- The path to the file for the attachment<<BR>>
   
  
 
 <<Anchor(class_text)>>'''text'''  -- Rich (styled) text
  Parent:
   ''[[#class_item|item]]'' 
  
  Children:
   ''[[#class_text_attachment|text_attachment]]'' 
  
  Properties:
   
   '''size'''  ''SInt32'' -- The size in points of the first character.<<BR>>
   '''underlined'''  ''Boolean'' -- Is the first character underlined?<<BR>>
   '''baseline_offset'''  ''ShortFloat'' -- Number of pixels shifted above or below the normal baseline.<<BR>>
   '''font'''  ''UnicodeText'' -- The name of the font of the first character.<<BR>>
   '''superscript'''  ''SInt32'' -- The superscript level of the text.<<BR>>
   '''alignment'''  ''k.justified | k.right | k.left | k.natural | k.center'' -- Alignment of the text.<<BR>>
   '''text'''  ''UnicodeText'' -- The actual text content.<<BR>>
   '''color'''  ''[[#class_color|k.color]]'' -- The color of the first character.<<BR>>
   
  Elements:
   
   '''[[#class_text_attachment|text_attachments]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_character|characters]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_attribute_run|attribute_runs]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_word|words]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_paragraph|paragraphs]]''' -- '' index | relative | range | test''<<BR>>
   
 
 <<Anchor(class_attribute_run)>>'''attribute_run'''  -- This subdivides the text into chunks that all have the same attributes.
  Parent:
   ''[[#class_item|item]]'' 
  
  
  Properties:
   
   '''size'''  ''SInt32'' -- The size in points of the first character.<<BR>>
   '''underlined'''  ''Boolean'' -- Is the first character underlined?<<BR>>
   '''baseline_offset'''  ''ShortFloat'' -- Number of pixels shifted above or below the normal baseline.<<BR>>
   '''font'''  ''UnicodeText'' -- The name of the font of the first character.<<BR>>
   '''superscript'''  ''SInt32'' -- The superscript level of the text.<<BR>>
   '''alignment'''  ''k.justified | k.right | k.left | k.natural | k.center'' -- Alignment of the text.<<BR>>
   '''text'''  ''UnicodeText'' -- The actual text content.<<BR>>
   '''color'''  ''[[#class_color|k.color]]'' -- The color of the first character.<<BR>>
   
  Elements:
   
   '''[[#class_text_attachment|text_attachments]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_character|characters]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_attribute_run|attribute_runs]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_word|words]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_paragraph|paragraphs]]''' -- '' index | relative | range | test''<<BR>>
   
 
 <<Anchor(class_character)>>'''character'''  -- This subdivides the text into characters.
  Parent:
   ''[[#class_item|item]]'' 
  
  
  Properties:
   
   '''size'''  ''SInt32'' -- The size in points of the first character.<<BR>>
   '''underlined'''  ''Boolean'' -- Is the first character underlined?<<BR>>
   '''baseline_offset'''  ''ShortFloat'' -- Number of pixels shifted above or below the normal baseline.<<BR>>
   '''font'''  ''UnicodeText'' -- The name of the font of the first character.<<BR>>
   '''superscript'''  ''SInt32'' -- The superscript level of the text.<<BR>>
   '''alignment'''  ''k.justified | k.right | k.left | k.natural | k.center'' -- Alignment of the text.<<BR>>
   '''text'''  ''UnicodeText'' -- The actual text content.<<BR>>
   '''color'''  ''[[#class_color|k.color]]'' -- The color of the first character.<<BR>>
   
  Elements:
   
   '''[[#class_text_attachment|text_attachments]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_character|characters]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_attribute_run|attribute_runs]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_word|words]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_paragraph|paragraphs]]''' -- '' index | relative | range | test''<<BR>>
   
 
 <<Anchor(class_word)>>'''word'''  -- This subdivides the text into words.
  Parent:
   ''[[#class_item|item]]'' 
  
  
  Properties:
   
   '''size'''  ''SInt32'' -- The size in points of the first character.<<BR>>
   '''underlined'''  ''Boolean'' -- Is the first character underlined?<<BR>>
   '''baseline_offset'''  ''ShortFloat'' -- Number of pixels shifted above or below the normal baseline.<<BR>>
   '''font'''  ''UnicodeText'' -- The name of the font of the first character.<<BR>>
   '''superscript'''  ''SInt32'' -- The superscript level of the text.<<BR>>
   '''alignment'''  ''k.justified | k.right | k.left | k.natural | k.center'' -- Alignment of the text.<<BR>>
   '''text'''  ''UnicodeText'' -- The actual text content.<<BR>>
   '''color'''  ''[[#class_color|k.color]]'' -- The color of the first character.<<BR>>
   
  Elements:
   
   '''[[#class_text_attachment|text_attachments]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_character|characters]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_attribute_run|attribute_runs]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_word|words]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_paragraph|paragraphs]]''' -- '' index | relative | range | test''<<BR>>
   
 
 <<Anchor(class_paragraph)>>'''paragraph'''  -- This subdivides the text into paragraphs.
  Parent:
   ''[[#class_item|item]]'' 
  
  
  Properties:
   
   '''size'''  ''SInt32'' -- The size in points of the first character.<<BR>>
   '''underlined'''  ''Boolean'' -- Is the first character underlined?<<BR>>
   '''baseline_offset'''  ''ShortFloat'' -- Number of pixels shifted above or below the normal baseline.<<BR>>
   '''font'''  ''UnicodeText'' -- The name of the font of the first character.<<BR>>
   '''superscript'''  ''SInt32'' -- The superscript level of the text.<<BR>>
   '''alignment'''  ''k.justified | k.right | k.left | k.natural | k.center'' -- Alignment of the text.<<BR>>
   '''text'''  ''UnicodeText'' -- The actual text content.<<BR>>
   '''color'''  ''[[#class_color|k.color]]'' -- The color of the first character.<<BR>>
   
  Elements:
   
   '''[[#class_text_attachment|text_attachments]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_character|characters]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_attribute_run|attribute_runs]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_word|words]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_paragraph|paragraphs]]''' -- '' index | relative | range | test''<<BR>>
   
 


<<Anchor(suite_Extended_Text_Suite)>>
== Extended Text Suite  ==
Extended functionality for text.

=== Commands ===

 <<Anchor(command_underline)>>'''reference.underline()'''  -- Underline some text<<BR>>
  Result: ''None''    

 <<Anchor(command_unitalicize)>>'''reference.unitalicize()'''  -- Unitalicize some text<<BR>>
  Result: ''None''    

 <<Anchor(command_unbold)>>'''reference.unbold()'''  -- Unbold some text<<BR>>
  Result: ''None''    

 <<Anchor(command_ununderline)>>'''reference.ununderline()'''  -- Ununderline some text<<BR>>
  Result: ''None''    

 <<Anchor(command_replace)>>'''reference.replace(...)''' <<BR>>
  ['''regexp'''=''UnicodeText''] -- Regular expression to find<<BR>>
  ['''string'''=''UnicodeText''] -- String to find<<BR>>
  '''replacement'''=''UnicodeText'' -- Replacement string<<BR>>
  Result: ''None''    

 <<Anchor(command_italicize)>>'''reference.italicize()'''  -- Italicize some text<<BR>>
  Result: ''None''    

 <<Anchor(command_bold)>>'''reference.bold()'''  -- Bold some text<<BR>>
  Result: ''None''    




<<Anchor(suite_OmniFoundation_Scripting)>>
== /OmniFoundation Scripting  ==
OmniFoundation scripting support.

=== Commands ===

 <<Anchor(command_remove)>>'''reference.remove(...)'''  -- Remove the given object from the container.<<BR>>
  '''from_'''=''k.item'' -- The container from which to remove the object.<<BR>>
  Result: ''None''    

 <<Anchor(command_add)>>'''reference.add(...)'''  -- Add the given object to the container.<<BR>>
  '''to'''=''k.item'' -- The container to which to add the object.<<BR>>
  Result: ''None''    




<<Anchor(suite_OmniGraffle)>>
== /OmniGraffle  ==
Omni Graffle Script Suite

=== Commands ===

 <<Anchor(command_slide)>>'''reference.slide(...)'''  -- Slide graphics by a vector amount<<BR>>
  '''by'''=''k.point'' -- The x and y amounts to shift the graphics<<BR>>
  Result: ''None''    

 <<Anchor(command_layout)>>'''reference.layout()'''  -- Layout some graphics, or a whole document using the document's Layout Info.<<BR>>
  Result: ''None''    

 <<Anchor(command_assemble)>>'''reference.assemble()'''  -- Group graphics<<BR>>
  Result: ''k.group''  -- the reply for the command   

 <<Anchor(command_flip)>>'''reference.flip(...)'''  -- Flip graphics<<BR>>
  '''over'''=''k.vertically | k.horizontally'' -- Orientation to flip the graphic around<<BR>>
  Result: ''None''    

 <<Anchor(command_page_adjust)>>'''reference.page_adjust()'''  -- Change the number of pages to fit the current graphics<<BR>>
  Result: ''None''    

 <<Anchor(command_connect)>>'''reference.connect(...)'''  -- Draw a line between graphics<<BR>>
  ['''with_properties'''=''AERecord''] -- The initial values for properties of the line.<<BR>>
  '''to'''=''Anything'' -- Graphic or graphics to connect to.<<BR>>
  Result: ''k.line''  -- the reply for the command   


=== Classes ===

 <<Anchor(class_polygon)>>'''polygon'''  -- A polygon graphic
  Parent:
   ''[[#class_solid|solid]]'' 
  
  
  Properties:
   
   '''point_list'''  ''AEList'' -- A list containing all the vertexes of the polygon<<BR>>
   
  Elements:
   
   '''[[#class_point|points]]''' -- '' index | relative | range | test''<<BR>>
   
 
 <<Anchor(class_layer)>>'''layer'''  -- A layer
  Parent:
   ''[[#class_item|item]]'' 
  
  
  Properties:
   
   '''locked'''  ''Boolean'' -- are the layer's graphics locked?<<BR>>
   '''prints'''  ''Boolean'' -- do the layer's graphics print?<<BR>>
   '''visible'''  ''Boolean'' -- are the layer's graphics visible?<<BR>>
   '''name'''  ''UnicodeText'' -- name of the layer<<BR>>
   
  Elements:
   
   '''[[#class_polygon|polygons]]''' -- '' index | relative | range | test | id''<<BR>>
   '''[[#class_shape|shapes]]''' -- '' name | index | relative | range | test | id''<<BR>>
   '''[[#class_group|groups]]''' -- '' index | relative | range | test | id''<<BR>>
   '''[[#class_graphic|graphics]]''' -- '' index | relative | range | test | id''<<BR>>
   '''[[#class_solid|solids]]''' -- '' index | relative | range | test | id''<<BR>>
   '''[[#class_line|lines]]''' -- '' index | relative | range | test | id''<<BR>>
   
 
 <<Anchor(class_page)>>'''page'''  -- A page
  Parent:
   ''[[#class_item|item]]'' 
  
  
  Properties:
   
   '''page_size''' (r/o) ''[[#class_point|k.point]]'' -- Size of each page<<BR>>
   '''row_alignment'''  ''k.bottom | k.middle_ | k.top'' -- Row alignment<<BR>>
   '''grid'''  ''[[#class_grid|k.grid]]'' -- Settings for the grid<<BR>>
   '''column_spacing'''  ''ShortFloat'' -- Spacing between graphics in a column<<BR>>
   '''script_canvas_color'''  ''[[#class_color|k.color]]'' -- Canvas background color<<BR>>
   '''column_alignment'''  ''k.right | k.left | k.center'' -- Column alignment<<BR>>
   '''horizontal_pages'''  ''SInt32'' -- Horizontal pages<<BR>>
   '''name'''  ''UnicodeText'' -- Name of this page<<BR>>
   '''row_spacing'''  ''ShortFloat'' -- Spacing between graphics in a row<<BR>>
   '''vertical_pages'''  ''SInt32'' -- Vertical pages<<BR>>
   '''layout_info'''  ''[[#class_layout_info|k.layout_info]]'' -- Settings for automatic layout<<BR>>
   '''canvas_size'''  ''[[#class_point|k.point]]'' -- Size of the canvas (page size multiplied by number of pages)<<BR>>
   
  Elements:
   
   '''[[#class_polygon|polygons]]''' -- '' index | relative | range | test | id''<<BR>>
   '''[[#class_shape|shapes]]''' -- '' name | index | relative | range | test | id''<<BR>>
   '''[[#class_group|groups]]''' -- '' index | relative | range | test | id''<<BR>>
   '''[[#class_graphic|graphics]]''' -- '' index | relative | range | test | id''<<BR>>
   '''[[#class_solid|solids]]''' -- '' index | relative | range | test | id''<<BR>>
   '''[[#class_line|lines]]''' -- '' index | relative | range | test | id''<<BR>>
   '''[[#class_layer|layers]]''' -- '' name | index | relative | range | test''<<BR>>
   
 
 <<Anchor(class_shape)>>'''shape'''  -- A graphic with a shape
  Parent:
   ''[[#class_solid|solid]]'' 
  
  
  Properties:
   
   '''name'''  ''UnicodeText'' -- name of the shape ("Rectangle", "Circle", et cetera)<<BR>>
   
  
 
 <<Anchor(class_label)>>'''label'''  -- A line label
  Parent:
   ''[[#class_item|item]]'' 
  
  
  Properties:
   
   '''offset'''  ''ShortFloat'' -- Distance away from the line<<BR>>
   '''fill_color'''  ''[[#class_color|k.color]]'' -- Fill color<<BR>>
   '''filled'''  ''Boolean'' -- Is this label filled?<<BR>>
   '''orientation'''  ''k.vertical | k.parallel | k.perpendicular | k.horizontal'' -- Orientation of the text<<BR>>
   '''text'''  ''[[#class_text|k.text]]'' -- Label text<<BR>>
   '''id''' (r/o) ''SInt32'' -- Unique identifier<<BR>>
   '''position'''  ''ShortFloat'' -- Position along the line (0 is tail, 1 is head)<<BR>>
   
  
 
 <<Anchor(class_point)>>'''point'''  -- A point
  Parent:
   ''[[#class_item|item]]'' 
  
  
  Properties:
   
   '''x''' (r/o) ''ShortFloat'' -- x position<<BR>>
   '''y''' (r/o) ''ShortFloat'' -- y position<<BR>>
   
  
 
 <<Anchor(class_record)>>'''record'''  -- A record with multiple text fields
  Parent:
   ''[[#class_solid|solid]]'' 
  
  
  
  Elements:
   
   '''[[#class_section|sections]]''' -- '' index | relative | range | test''<<BR>>
   
 
 <<Anchor(class_layout_info)>>'''layout_info'''  -- Automated layout for a page
  Parent:
   ''[[#class_item|item]]'' 
  
  
  Properties:
   
   '''type'''  ''k.vertical_hierarchy | k.force_directed | k.horizontal_hierarchy'' -- Type of layout to perform<<BR>>
   '''adjusts_pages'''  ''Boolean'' -- Adjust number of pages automatically with hierarchical layout?<<BR>>
   '''shape_force'''  ''ShortFloat'' -- Repulsive force of shapes in force-directed layout<<BR>>
   '''edge_force'''  ''ShortFloat'' -- Repulsive force of canvas edge in force-directed layout<<BR>>
   '''random_start'''  ''Boolean'' -- Start force-directed layout with shapes in random locations?<<BR>>
   '''animates'''  ''Boolean'' -- Animate force-directed layout?<<BR>>
   '''line_force'''  ''ShortFloat'' -- Attractive force of lines in force-directed layout<<BR>>
   
  
 
 <<Anchor(class_line)>>'''line'''  -- A line
  Parent:
   ''[[#class_graphic|graphic]]'' 
  
  
  Properties:
   
   '''source'''  ''[[#class_graphic|k.graphic]]'' -- Graphic that the tail of the line is connected to.<<BR>>
   '''tail_magnet'''  ''SInt32'' -- Which magnet of the source graphic the line attaches to<<BR>>
   '''line_type'''  ''k.curved | k.orthogonal | k.straight'' -- Type of the line<<BR>>
   '''point_list'''  ''AEList'' -- A list containing all the points of the line.<<BR>>
   '''head_scale'''  ''ShortFloat'' -- Scale of line ending on the head of the line (1.0 being the normal size)<<BR>>
   '''weight'''  ''ShortFloat'' -- Weighting to give this line during automatic layout.<<BR>>
   '''head_magnet'''  ''SInt32'' -- Which magnet of the destination graphic the line attaches to<<BR>>
   '''destination'''  ''[[#class_graphic|k.graphic]]'' -- Graphic that the head of the line is connected to.<<BR>>
   '''head_type'''  ''UnicodeText'' -- Type of line ending on the head of the line<<BR>>
   '''tail_scale'''  ''ShortFloat'' -- Scale of line ending on the tail of the line (1.0 being the normal size)<<BR>>
   '''tail_type'''  ''UnicodeText'' -- Type of line ending on the tail of the line<<BR>>
   
  Elements:
   
   '''[[#class_label|labels]]''' -- '' index | relative | range | test | id''<<BR>>
   '''[[#class_point|points]]''' -- '' index | relative | range | test''<<BR>>
   
 
 <<Anchor(class_solid)>>'''solid'''  -- Any graphic which is solid instead of a line. Includes polygons and shapes.
  Parent:
   ''[[#class_graphic|graphic]]'' 
  
  Children:
   ''[[#class_record|record]]'' ''[[#class_polygon|polygon]]'' ''[[#class_shape|shape]]'' 
  
  Properties:
   
   '''text_placement'''  ''k.bottom | k.middle_ | k.top'' -- Placement of the text inside the solid<<BR>>
   '''gradient_color'''  ''[[#class_color|k.color]]'' -- For linear and radial fills, this is the ending color.<<BR>>
   '''fill_color'''  ''[[#class_color|k.color]]'' -- The fill color. For linear and radial gradient fills this is the starting color<<BR>>
   '''autosizing'''  ''k.vertically_only | k.clip | k.full | k.overflow'' -- Autosizing behavior of the solid around the text<<BR>>
   '''image_scale'''  ''ShortFloat'' -- For manual image fills, the scale of the image<<BR>>
   '''fill'''  ''k.linear_fill | k.no_fill | k.solid_fill | k.radial_fill'' -- The type of fill for this solid<<BR>>
   '''gradient_angle'''  ''ShortFloat'' -- Angle of a linear gradient fill.<<BR>>
   '''image_sizing'''  ''k.stretched | k.manual | k.tiled'' -- How to size and display the image fill.<<BR>>
   '''gradient_center'''  ''[[#class_point|k.point]]'' -- Starting point of a radial gradient fill. (In a square from {-1,-1} to {1,1} so {0,0} is the center of the solid.)<<BR>>
   '''text'''  ''[[#class_text|k.text]]'' -- The text inside the solid<<BR>>
   '''rotation'''  ''ShortFloat'' -- Rotation of the graphic in degrees<<BR>>
   '''image_offset'''  ''[[#class_point|k.point]]'' -- For manual image fills, the offset of the image in the solid<<BR>>
   '''image'''  ''UnicodeText'' -- Set to a file name to load an image fill.<<BR>>
   '''magnets'''  ''AEList'' -- List of magnet points. (In a square from {-1,-1} to {1,1}.<<BR>>
   
  
 
 <<Anchor(class_graphic)>>'''graphic'''  -- A graphic
  Parent:
   ''[[#class_item|item]]'' 
  
  Children:
   ''[[#class_outgoing_line|outgoing_line]]'' ''[[#class_incoming_line|incoming_line]]'' ''[[#class_line|line]]'' ''[[#class_solid|solid]]'' ''[[#class_group|group]]'' 
  
  Properties:
   
   '''draws_shadow'''  ''Boolean'' -- Does this graphic draw its shadow?<<BR>>
   '''id''' (r/o) ''SInt32'' -- Unique identifier<<BR>>
   '''url'''  ''UnicodeText'' -- Web link for this graphic<<BR>>
   '''origin'''  ''[[#class_point|k.point]]'' -- Origin of the graphic (position of the upper-left corner of the bounding rectangle)<<BR>>
   '''shadow_color'''  ''[[#class_color|k.color]]'' -- Color of the shadow<<BR>>
   '''stroke_join'''  ''k.miter | k.bevel | k.round'' -- Type of join between segments of the stroke<<BR>>
   '''size'''  ''[[#class_point|k.point]]'' -- Size of the graphic (width and height of the bounding rectangle)<<BR>>
   '''thickness'''  ''ShortFloat'' -- Thickness of the stroke<<BR>>
   '''page''' (r/o) ''[[#class_page|k.page]]'' -- Page that this graphic is on<<BR>>
   '''stroke_color'''  ''[[#class_color|k.color]]'' -- Color of the stroke<<BR>>
   '''allows_connections'''  ''Boolean'' -- Does this graphic allow connections to it?<<BR>>
   '''locked'''  ''Boolean'' -- Is this graphic locked?<<BR>>
   '''group''' (r/o) ''[[#class_group|k.group]]'' -- Which group (if any) this graphic is in<<BR>>
   '''draws_stroke'''  ''Boolean'' -- Does this graphic draw its stroke?<<BR>>
   '''stroke_pattern'''  ''SInt32'' -- Dash pattern of the stroke<<BR>>
   '''aligns_edges_to_grid'''  ''Boolean'' -- When snapped to the grid does this graphic align its edges to the grid? (The alternative is to align its center to the grid.)<<BR>>
   '''layer'''  ''[[#class_layer|k.layer]]'' -- Which layer this graphic is in<<BR>>
   '''jump'''  ''[[#class_page|k.page]]'' -- Destination page of jump action<<BR>>
   '''script'''  ''UnicodeText'' -- Source of attached AppleScript<<BR>>
   '''stroke_cap'''  ''k.square | k.butt | k.round'' -- Type of cap at ends of the stroke<<BR>>
   
  Elements:
   
   '''[[#class_line|lines]]''' -- '' index | relative | range | test | id''<<BR>>
   '''[[#class_incoming_line|incoming_lines]]''' -- '' index | relative | range | test | id''<<BR>>
   '''[[#class_outgoing_line|outgoing_lines]]''' -- '' index | relative | range | test | id''<<BR>>
   
 
 <<Anchor(class_group)>>'''group'''  -- A grouped set of graphics
  Parent:
   ''[[#class_graphic|graphic]]'' 
  
  
  
  Elements:
   
   '''[[#class_graphic|graphics]]''' -- '' index | relative | range | test | id''<<BR>>
   
 
 <<Anchor(class_grid)>>'''grid'''  -- The grid of a page
  Parent:
   ''[[#class_item|item]]'' 
  
  
  Properties:
   
   '''major'''  ''Boolean'' -- Does the grid have 'major' lines?<<BR>>
   '''visible'''  ''Boolean'' -- Is the grid visible?<<BR>>
   '''draws_in_front'''  ''Boolean'' -- Does the grid draw in front of all shapes?<<BR>>
   '''spacing'''  ''ShortFloat'' -- Number of pixels between minor grid lines<<BR>>
   '''snaps'''  ''Boolean'' -- Do points snap to the grid?<<BR>>
   '''script_major_grid_color'''  ''[[#class_color|k.color]]'' -- Color of major lines<<BR>>
   '''major_spacing'''  ''SInt32'' -- The number of minor grid lines for each major line<<BR>>
   '''script_grid_color'''  ''[[#class_color|k.color]]'' -- Color of the grid<<BR>>
   
  
 
 <<Anchor(class_section)>>'''section'''  -- One text area in a record
  Parent:
   ''[[#class_item|item]]'' 
  
  
  Properties:
   
   '''size'''  ''SInt32'' -- The size in points of the first character.<<BR>>
   '''underlined'''  ''Boolean'' -- Is the first character underlined?<<BR>>
   '''baseline_offset'''  ''ShortFloat'' -- Number of pixels shifted above or below the normal baseline.<<BR>>
   '''font'''  ''UnicodeText'' -- The name of the font of the first character.<<BR>>
   '''superscript'''  ''SInt32'' -- The superscript level of the text.<<BR>>
   '''alignment'''  ''k.justified | k.right | k.left | k.natural | k.center'' -- Alignment of the text.<<BR>>
   '''text'''  ''UnicodeText'' -- The actual text content.<<BR>>
   '''color'''  ''[[#class_color|k.color]]'' -- The color of the first character.<<BR>>
   
  Elements:
   
   '''[[#class_character|characters]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_attribute_run|attribute_runs]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_word|words]]''' -- '' index | relative | range | test''<<BR>>
   '''[[#class_paragraph|paragraphs]]''' -- '' index | relative | range | test''<<BR>>
   
 
 <<Anchor(class_outgoing_line)>>'''outgoing_line'''  -- Outgoing line
  Parent:
   ''[[#class_graphic|graphic]]'' 
  
  
  Properties:
   
   '''source'''  ''[[#class_graphic|k.graphic]]'' -- Graphic that the tail of the line is connected to.<<BR>>
   '''tail_magnet'''  ''SInt32'' -- Which magnet of the source graphic the line attaches to<<BR>>
   '''line_type'''  ''k.curved | k.orthogonal | k.straight'' -- Type of the line<<BR>>
   '''point_list'''  ''AEList'' -- A list containing all the points of the line.<<BR>>
   '''head_scale'''  ''ShortFloat'' -- Scale of line ending on the head of the line (1.0 being the normal size)<<BR>>
   '''weight'''  ''ShortFloat'' -- Weighting to give this line during automatic layout.<<BR>>
   '''head_magnet'''  ''SInt32'' -- Which magnet of the destination graphic the line attaches to<<BR>>
   '''destination'''  ''[[#class_graphic|k.graphic]]'' -- Graphic that the head of the line is connected to.<<BR>>
   '''head_type'''  ''UnicodeText'' -- Type of line ending on the head of the line<<BR>>
   '''tail_scale'''  ''ShortFloat'' -- Scale of line ending on the tail of the line (1.0 being the normal size)<<BR>>
   '''tail_type'''  ''UnicodeText'' -- Type of line ending on the tail of the line<<BR>>
   
  Elements:
   
   '''[[#class_label|labels]]''' -- '' index | relative | range | test | id''<<BR>>
   '''[[#class_point|points]]''' -- '' index | relative | range | test''<<BR>>
   
 
 <<Anchor(class_incoming_line)>>'''incoming_line'''  -- Incoming line
  Parent:
   ''[[#class_graphic|graphic]]'' 
  
  
  Properties:
   
   '''source'''  ''[[#class_graphic|k.graphic]]'' -- Graphic that the tail of the line is connected to.<<BR>>
   '''tail_magnet'''  ''SInt32'' -- Which magnet of the source graphic the line attaches to<<BR>>
   '''line_type'''  ''k.curved | k.orthogonal | k.straight'' -- Type of the line<<BR>>
   '''point_list'''  ''AEList'' -- A list containing all the points of the line.<<BR>>
   '''head_scale'''  ''ShortFloat'' -- Scale of line ending on the head of the line (1.0 being the normal size)<<BR>>
   '''weight'''  ''ShortFloat'' -- Weighting to give this line during automatic layout.<<BR>>
   '''head_magnet'''  ''SInt32'' -- Which magnet of the destination graphic the line attaches to<<BR>>
   '''destination'''  ''[[#class_graphic|k.graphic]]'' -- Graphic that the head of the line is connected to.<<BR>>
   '''head_type'''  ''UnicodeText'' -- Type of line ending on the head of the line<<BR>>
   '''tail_scale'''  ''ShortFloat'' -- Scale of line ending on the tail of the line (1.0 being the normal size)<<BR>>
   '''tail_type'''  ''UnicodeText'' -- Type of line ending on the tail of the line<<BR>>
   
  Elements:
   
   '''[[#class_label|labels]]''' -- '' index | relative | range | test | id''<<BR>>
   '''[[#class_point|points]]''' -- '' index | relative | range | test''<<BR>>
