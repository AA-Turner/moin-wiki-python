#pragma section-numbers off

= Templating in Python =

Templating, and in particular Web templating, involves the presentation of information in a form which is often (but not always) intended to be readable, even attractive, to a human audience. Frequently, templating solutions involve a document (the template) which may look somewhat like the final output but perhaps in a simplified or stylized form, along with some data which must be presented using that template; combining these two things produces the final output which in Web templating is usually (but not always) a Web page of some kind.

== Templating Engines ==

There are many, many different HTML/XML templating packages and modules for Python that provide different feature sets and syntaxes. These libraries usually assume that you know how to write HTML or XML.

The number of templating engines is so great because the mechanisms involved are pretty easy to write in Python, at least for a fairly basic template engine; [[http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/52305|this recipe from the Python Cookbook]] shows how easy it is.

=== Engines using Value Substitution ===

The simplest form of templating engine is that which merely substitutes values into a template in order to produce the final output.

    * [[http://docs.python.org/lib/node40.html|string.Template]] in the standard library
    * [[http://www.stringtemplate.org|stringtemplate]] - employs recursion in order to provide support for complicated templating whilst avoiding side-effects
    * [[http://mustache.github.com/|mustache]] - logic-less templates based on [[http://code.google.com/p/google-ctemplate/|CTemplate]] with implementation in many languages including Python

=== Engines Mixing Logic into Templates ===

A popular approach with templating engines is to embed logic or control-flow statements into the templates themselves in a way that can make the the final output appear rather different from the original template. For example:

{{{
<table>
  <%
  for item in items:
    %>
    <tr>
      <th>Name</th>
      <td><%= item.name %></td>
    </tr>
    <%
  %>
</table>
}}}

The introduction of such logic may also cause problems for some XML-based tools. Despite these shortcomings, such templating engines may be more applicable to non-Web templating problems or for situations where separating logic from content may actually make the solution harder to understand.

    * [[http://airspeed.pythonconsulting.com/|Airspeed]] - Velocity Templates for Python
    * [[Castalian]]
    * [[http://chameleon.repoze.org/|Chameleon]] - fast page template implementation which compiles markup templates into python byte code.  Used by Pyramid, Zope, Plone and Grok projects.
    * [[Cheetah]]
    * CubicTemp
    * [[http://www.djangoproject.com/documentation/templates/|Django template system]]
    * [[http://www.nthwave.net/elements/|Elements]] <<Anchor(Elements)>>
    * EmPy
    * [[http://evoque.gizmojo.org/|Evoque]] - managed eval-based full-featured templating engine, for Python 2.4, 2.5, 2.6 '''and 3.0''', with [[http://evoque.gizmojo.org/features/|state of the art features]] such as unicode, dynamic overlays, ''format-extensible'' automatic quoting, in-process sandbox, et cetera, while still remaining small, simple and extremely fast -- [[http://evoque.gizmojo.org/benchmark/|performance benchmarks]] show it to be more or less as fast as Mako, and faster on simpler templates.
    * [[http://www.aerojockey.com/software/hrl|HRL]] Powerful macro preprocessor for HTML; macros can embed arbitrary Python code
    * [[http://genshi.edgewall.org|Genshi]] - XML-based templating engine, used in the popular python tool [[trac]]. ''Performance tests show that it is the fastest of all xml based templating engines in Python.''
    * [[http://jinja.pocoo.org/2/|Jinja 2]] - an extensible, sandboxed text-based templating engine with Django-like syntax (but faster).
    * [[http://www.makotemplates.org/|Mako]] - a fast, non-xml, templating engine based on ideas from Myghty. 
    * [[https://github.com/etianen/moody-templates|moody-templates]] - A fast, extensible templating engine for Python 3 with Django-like syntax.
    * [[http://www.myghty.org/|Myghty]] inspired by Perl's Mason, replaced by Mako and [[http://www.python.org/pypi/MyghtyUtils|MyghtyUtils]].
    * [[http://www.mems-exchange.org/software/qpy/|Qpy]] provides a convenient mechanism for generating safely-quoted html text from python code. It does this by implementing a quoted-string data type and a modification of the python compiler. A [[http://evoque.gizmojo.org/benchmark/|lot faster]] than Mako.
    * [[http://codingrecipes.com/pml-a-python-template-engine|PML]] is a high performance template engine implemented in Python, it supports many advanced features such as template filters, output filters, and more.
    * [[http://www.simple-is-better.org/template/pyratemp.html|pyratemp]] - a very small (<500 LOC) but complete template-engine, using restricted python-expressions. There are also some [[http://www.simple-is-better.org/template/|benchmarks and comparisons]] of different template-engines.
    * [[Spyce]]
    * [[http://suitframework.com/|SUIT]] - powerful template engine that allows one to define their own syntax to transform templates by using rules.
    * [[http://pythonpaste.org/tempita|Tempita]] a fairly simple, small templating language with full Python expressions
    * [[http://www.kuwata-lab.com/tenjin/|Tenjin]] is a fast template engine implemented in pure Python. Some benchmarks have shown it to be about x2 faster than Mako, x3 than Cheetah, x9 than Django, x60 than Kid in some situations.
    * [[http://tt2.org/python/index.html|Template Toolkit]] - Python port of Perl template engine
    * [[http://www.joonis.de/content/TemplitePythonTemplatingEngine|Templite+]] - A light-weight, fully functional, general purpose templating engine
    * [[http://www.sourceforge.net/projects/the-next-please|thrases]] - format-free Python needing just needing a reserved string (default: ~~) for separating phrases. Template.__init__() analyses, which phrases are python and which not, building a python script for exec(). This script is containing only minimal overhead then - Template.render() is near to the theoretical maximum speed. Template.render() can also write directly on a file descriptor for improved performance.

=== Engines with Annotated Templates ===

The following engines feature template documents whose sections are marked using special attributes (or, less frequently, special elements or tags). For example:

{{{
<table annotation:element="items">
  <tr annotation:element="item">
    <th>Name</th>
    <td>{name}</td>
  </tr>
</table>
}}}

In some systems, the sections are then manipulated within program code; in others, the template structure indicates sections which are to be repeated, omitted, and so on, and the templating system then merges the template with some data structure provided by the program. Generally, the reason for annotating templates in this way (particularly through the use of attributes) is to better support the editing of such templates in XML-based tools which might otherwise complain about or damage template information if it were not included carefully in documents.

    * [[#ClearSilver]] - uses special elements/tags
    * [[http://py-templates.sourceforge.net|HTMLTemplate]] - special attributes denote HTML elements that can be manipulated as Python objects 
    * [[JonsPythonModules]] - uses special comment-like markers
    * [[http://www.plope.com/software/meld3/|meld3]] and [[http://www.entrian.com/PyMeld|PyMeld]] are very similar
    * [[http://code.google.com/p/pyxer/|Pyxer]] - based on Genshi parser engine. Optimized for work with Google App Enginge (GAE)
    * [[pso]]
    * [[http://pytan.com/public/sprite/|Sprite]] - uses special comment-like markers
    * [[teng]] - uses processing instruction-like markers
    * [[http://psilib.sf.net/webstring.html|webstring]] - uses attributes in XML/HTML templates and a specific character in text templates
    * [[http://www.python.org/pypi/XSLTools|XSLTools]] - uses special attributes (with XML documents providing the data)
    * [[http://gna.org/projects/pypa|PyPa]] - nested comment-delimited blocks that are accessible from Python code as objects.

In other systems, the annotations are actually evaluated in order to produce repeated sections to omit or to include sections, and so on:

    * [[http://genshi.edgewall.org/|Genshi]] - Template engine inspired by Kid, supports both [[http://genshi.edgewall.org/wiki/Documentation/xml-templates.html|XML]] and [[http://genshi.edgewall.org/wiki/Documentation/text-templates.html|plain-text]] templates
    * [[http://sourceforge.net/p/kajiki/home/|kajiki]] - Template engine inspired by Genshi
    * [[http://htmltmpl.sourceforge.net/|htmltmpl]] - uses HTML-like elements/tags and supports compilation
    * [[http://www.kid-templating.org/|Kid]] - XML based, compiling template engine
    * <<Anchor(SimpleTAL)>>[[http://www.owlfish.com/software/simpleTAL/|SimpleTAL]] - introduces a certain amount of logic but in an XML-compatible fashion
    * [[http://cherrytemplate.python-hosting.com/|CherryTemplate]]

== HTML Shorthand Processors ==

The libraries in this section implement simpler markup languages
that can be automatically converted to HTML.  This lets you avoid having to write HTML by hand.

    * [[http://www.methods.co.nz/asciidoc/|AsciiDoc]]
    * [[http://www.freewisdom.org/projects/python-markdown/|Markdown]]
    * PyTextile
    * ReStructuredText
    * [[http://txt2tags.sourceforge.net/|txt2tags]]
    * [[http://devsuki.com/pottymouth/|PottyMouth]] (for untrusted text input)
    * [[http://code.google.com/p/python-creole/|Creole]] (creole to html and html to creole)



== Template engines implemented as Internal DSL's ==

These engines are implemented as an internal DSL, that is, they don't process text into markup, rather they represent the final document as actual Python code and data structures. 
   * [[http://www.kieranholland.com/code/documentation/nevow-stan/|Stan]]
   * [[http://breve.twisty-industries.com/|Breve]]
   * [[http://dirty.googlecode.com/|Dirty]]
   * [[http://bitbucket.org/tavisrudd/throw-out-your-templates/src/tip/throw_out_your_templates.py|An overview of the benefits of this internal DSL approach vs external template languages]]


== HTML Generation Packages ==

''Many of these links are dead. Perhaps someone more knowledgeable might want to fix or prune them.''

These packages are not really templating systems in that they do not typically employ a template document as such to define the form of the output they produce, but they can be useful in applications where it is more convenient to programmatically generate output.

   * [[http://genshi.edgewall.org/|Genshi]] The genshi.builder module provides [[http://genshi.edgewall.org/wiki/Documentation/builder.html|simple markup generation]]
   * [[http://starship.python.net/crew/friedrich/HTMLgen/html/main.html|HTMLgen]]
   * [[http://pylonshq.com/WebHelpers/module-webhelpers.htmlgen.html|webhelpers.htmlgen]] Kind of like HTMLGen, only much simpler. Like stan, only not.
   * [[http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/366000|HTMLTags ]]
   * [[http://dustman.net/andy/python/HyperText/|HyperText]]
   * [[http://markup.sourceforge.net/|markup ]]  A light-weight and flexible HTML/XML generator
   * [[http://pyoohtml.appspot.com/v2|PyOoHtml]] - Python Object Oriented HTML (version 2.0.0 - 2009.04.10)
   * [[http://www.livinglogic.de/Python/xist/|XIST ]]
   * [[http://pyhtmloo.sourceforge.net/|pyhtmloo ]] pyhtmloo is a library that allows python developers to use HTML code like any other python objects.

== Static Website Generators ==

Static website generators are more than templating engines in that they create ''the whole site structure'', not just individual files. While templating is an important part of their function, determining the site structure and ''incorporating structural information'' in the output (for example to automatically generate navigational elements) is what really makes a static website generator a useful tool.

   * [[http://www.ivy.fr/tahchee/|tahchee]] - [[Cheetah]]-based static web site generator
   * [[http://www.owlfish.com/software/PubTal/|PubTal]] - [[#SimpleTAL]]-based static web site generator
   * [[#Elements]]
   * [[http://www.voidspace.org.uk/python/rest2web/]] - Generates Websites from ReST contents
   * [[http://site.ringce.com/products/hyde/hyde.html|Hyde]] - [[Django]] based static web site generator.
   * [[http://www.blogofile.com/|Blogofile]] - Mako-based static web site generator. Supports Git, Disqus, RSS feeds, plugins, and S3.
   * [[http://pelican.readthedocs.org/en/2.7.2/index.html|Pelican]] - Uses Markdown or ReST for content and Jinja 2 for themes. Supports DVCS, Disqus.
   * [[http://sphinx.pocoo.org/index.html|Sphinx]] - Turns ReST into HTML, LaTeX, man pages, or plaintext. Created to by Python's official documentation system and has many features for making site trees, inter-document linking, and other documentation necessities.

== Java Templating Engines ==

The following templating engines are accessible or usable via Jython:

   * [[http://freemarker.org/index.html|FreeMarker]] (with Jython data binding)
   * [[http://java.sun.com/products/jsp|Java Server Pages, JSP]]
   * [[http://jakarta.apache.org/velocity/index.html|Velocity]]
   * [[http://www.webmacro.org/|WebMacro]]

== CPython-accessible C Templating Engines ==

   * <<Anchor(ClearSilver)>> ClearSilver (HTML generation)
