=== Question ===

Does a project have to already be using buildbot to use this community
buildbot?  I'm still more than a bit fuzzy on how the whole thing is
supposed to work.   Suppose I decided to help out project Foo, an
application written in Python.  Does project Foo have to already have drunk the buildbot Kool Aid or can I take that task on, assuming they already have some sort of unit test framework?

=== Answer ===

No, you don't need to drinl any buildbot Kool Aid at all :-)

The idea is this: let's say you work on project Foo, or decide to help project Foo. You just need to figure out how to run project Foo's unit tests from the command line. Once you have a shell script or python script that does that, my [http://agiletesting.blogspot.com/2006/08/setting-up-pybots-buildslave.html instructions] show you how to set up a buildslave that runs that script every time a checkin is made into Python trunk, using the newly built Python binary. This way, both project Foo's developers and the Python core developers will know if things suddenly start breaking in project Foo because of new/modified code in Python trunk.

=== Question ===

We'd be interested in getting project Foo into the pybots test builds
and would also contribute a buildbot if we can get some idea of the security implications this would have.

=== Answer ===

Buildbot is based on the idea is that the buildmaster machine sends commands to the buildslave, which then executes them and reports back to the master. One security implication is the authentication between master and slave. This is done via a slave name and password. The slave name can be gleaned from the buildbot HTML status page, but the password of course is secret. So you would be protected against somebody posing as a master and trying to send you commands.

The other security implication is that there is a "Force build" button on the Web interface, which by default can be pressed by anybody. This can be disabled easily, or it can be configured so it requires authentication.

=== Question ===

What would be the procedure for releasing a new version of
project Foo to the pybots system ? 

=== Answer ===

The way pybots is running the Twisted unit tests is: the Twisted buildslave checks out the latest Twisted code from the Twisted svn repository, then it uses the newly built python binary to run them. It's detailed in these [http://agiletesting.blogspot.com/2006/08/setting-up-pybots-buildslave.html instructions].

If you prefer to test a released package against the latest python binary, we can do that too. The pybots buildslave just needs to know where to get the package from, then it can unpack it and run its automated tests. Basically, anything you can do from the command line, you can also run within a buildslave. 
