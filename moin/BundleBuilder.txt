BundleBuilder is a script that lets you create applets, or more importantly, standalone Python application bundles on Mac. To create a standalone application bundle on Mac, you need to create a script which starts bundlebuilder, tells it what files and libraries you want to package, and then lets it do its thing. Here is an example script that showcases most of the important features of bundlebuilder:

{{{
#!python
import bundlebuilder, os

# I set this to make adding subfolders into the package easier
packageroot = "/Users/kevino/oss/eclass/eclass_builder"

# Create the AppBuilder
myapp = bundlebuilder.AppBuilder(verbosity=1)

# Tell it where to find the main script - the one that loads on startup
myapp.mainprogram = os.path.join(packageroot, "editor.py")

myapp.standalone = 1
myapp.name = "EClass.Builder"

# includePackages forces certain packages to be added to the app bundle
myapp.includePackages.append("encodings")
myapp.includePackages.append("_xmlplus")

# Here you add supporting files and/or folders to your bundle
myapp.resources.append(os.path.join(packageroot, "about"))
myapp.resources.append(os.path.join(packageroot, "autorun"))
myapp.resources.append(os.path.join(packageroot, "Graphics"))

# bundlebuilder does not yet have the capability to detect what shared libraries
# are needed by your app - so in this case I am adding the wxPython libs manually
myapp.libs.append("/usr/local/lib/libwx_macd-2.4.0.dylib")
myapp.libs.append("/usr/local/lib/libwx_macd-2.4.0.rsrc")

# Here we build the app!
myapp.setup()
myapp.build()
}}}

In the future, BundleBuilder will be able to detect and incorporate shared libraries as well, meaning you will only need to worry about adding your own files to the bundle. 

Todo: Troubleshooting bundlebuilder problems section?
