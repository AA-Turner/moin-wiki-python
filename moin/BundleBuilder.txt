Also see:
 * http://www.pythonmac.org/wiki/BundleBuilder

BundleBuilder is a script that lets you create applets, or more importantly, standalone Python application bundles on Mac. To create an application bundle on Mac, you need to create a script which starts bundlebuilder, tells it what files and libraries you want to package, and then lets it do its thing. Here is an minimal bundlebuilder script for a fictional PyObjC application:
{{{
#!python
from bundlebuilder import buildapp

buildapp(
	name = "MyApp",
	mainprogram = "MyAppMain.py",
	resources = ["MainMenu.nib"],
	nibname = "MainMenu",
)
}}}

Bundlebuilder scripts are typically called "buildapp.py", and can be invoked from the command line in several ways. By default, bundlebuilder will create a folder named "build" in the current directory; the application will be built there.

Build an applet (depends on a Python installation):
  % python buildapp.py build

However, the next invocation is much more useful during development, as instead of copying files to the bundle, it creates symbolic links to the original files, meaning you don't have to rebuild the applet after each change:
  % python buildapp.py --link build

To create a standalone application, it is typically invoked like this:
  % python buildapp.py --standalone --strip build

The --standalone option will cause almost everything that's needed (and nothing more!) to be included in the .app bundle. It analyzes which modules are (potentially) used. Sometimes this does not include enough (it may miss modules that are imported dynamically through the __import__ hook), sometimes it includes too much (it follows every potential dependency, even if there on a brach of the code which will never be executed. To tweak what's included, use the --include, --package and --exclude bundlebuilder options.

The --strip option will strip all executable files inside the application bundle of their debugging info, which will have a huge impact on the size of the final bundle.

Try --help for a list of options.

Here is a more elaborate example script that showcases more features of bundlebuilder, yet will only build a standalone application:

{{{
#!python
import bundlebuilder, os

# I set this to make adding subfolders into the package easier
packageroot = "/Users/kevino/oss/eclass/eclass_builder"

# Create the AppBuilder
myapp = bundlebuilder.AppBuilder(verbosity=1)

# Tell it where to find the main script - the one that loads on startup
myapp.mainprogram = os.path.join(packageroot, "editor.py")

myapp.standalone = 1
myapp.name = "EClass.Builder"

# includePackages forces certain packages to be added to the app bundle
myapp.includePackages.append("encodings")
myapp.includePackages.append("_xmlplus")

# Here you add supporting files and/or folders to your bundle
myapp.resources.append(os.path.join(packageroot, "about"))
myapp.resources.append(os.path.join(packageroot, "autorun"))
myapp.resources.append(os.path.join(packageroot, "Graphics"))

# bundlebuilder does not yet have the capability to detect what shared libraries
# are needed by your app - so in this case I am adding the wxPython libs manually
myapp.libs.append("/usr/local/lib/libwx_macd-2.4.0.dylib")
myapp.libs.append("/usr/local/lib/libwx_macd-2.4.0.rsrc")

# Here we build the app!
myapp.setup()
myapp.build()
}}}

In the future, BundleBuilder will be able to detect and incorporate shared libraries as well, meaning you will only need to worry about adding your own files to the bundle. 

Todo: Troubleshooting bundlebuilder problems section? Yes, especially the encodings problem; it's a FAQ in the py2exe world. The quick fix is to add --package=encodings to bundlebuilder's command line options. However, this includes all of the encodings package, which for many applications means unnecessary bloat.
